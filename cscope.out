cscope 15 $HOME\Desktop\INTEL\src\Webserver"               0000567400
	@App/App.cpp

26 
	~<°dio.h
>

27 
	~<°rög.h
>

28 
	~<as£π.h
>

30 #ifde‡
_MSC_VER


31 
	~<Shlobj.h
>

33 
	~<uni°d.h
>

34 
	~<pwd.h
>

35 
	#MAX_PATH
 
FILENAME_MAX


	)

38 
	~"sgx_uπs.h
"

39 
	~"sgx_u´_£rvi˚.h
"

40 
	~"Aµ.h
"

41 
	~"En˛ave_u.h
"

43 "C" 
FILE
* 
gëSTDOUT
();

44 
	~"fun˘i⁄s.h
"

47 
sgx_í˛ave_id_t
 
	gglobÆ_eid
 = 0;

49 
	s_sgx_îæi°_t
 {

50 
sgx_°©us_t
 
	mîr
;

51 c⁄° *
	mmsg
;

52 c⁄° *
	msug
;

53 } 
	tsgx_îæi°_t
;

56 
sgx_îæi°_t
 
	gsgx_îæi°
[] = {

58 
SGX_ERROR_UNEXPECTED
,

60 
NULL


63 
SGX_ERROR_INVALID_PARAMETER
,

65 
NULL


68 
SGX_ERROR_OUT_OF_MEMORY
,

70 
NULL


73 
SGX_ERROR_ENCLAVE_LOST
,

78 
SGX_ERROR_INVALID_ENCLAVE
,

80 
NULL


83 
SGX_ERROR_INVALID_ENCLAVE_ID
,

85 
NULL


88 
SGX_ERROR_INVALID_SIGNATURE
,

90 
NULL


93 
SGX_ERROR_OUT_OF_EPC
,

95 
NULL


98 
SGX_ERROR_NO_DEVICE
,

103 
SGX_ERROR_MEMORY_MAP_CONFLICT
,

105 
NULL


108 
SGX_ERROR_INVALID_METADATA
,

110 
NULL


113 
SGX_ERROR_DEVICE_BUSY
,

115 
NULL


118 
SGX_ERROR_INVALID_VERSION
,

120 
NULL


123 
SGX_ERROR_INVALID_ATTRIBUTE
,

125 
NULL


128 
SGX_ERROR_ENCLAVE_FILE_ACCESS
,

130 
NULL


133 
SGX_ERROR_NDEBUG_ENCLAVE
,

135 
NULL


140 
	$¥öt_îr‹_mesßge
(
sgx_°©us_t
 
ªt
)

142 
size_t
 
idx
 = 0;

143 
size_t
 
âl
 =  
sgx_îæi°
/ sgx_errlist[0];

145 
idx
 = 0; idx < 
âl
; idx++) {

146 if(
ªt
 =
sgx_îæi°
[
idx
].
îr
) {

147 if(
NULL
 !
sgx_îæi°
[
idx
].
sug
)

148 
	`¥ötf
("Info: %s\n", 
sgx_îæi°
[
idx
].
sug
);

149 
	`¥ötf
("Eº‹: %s\n", 
sgx_îæi°
[
idx
].
msg
);

154 i‡(
idx
 =
âl
)

155 
	`¥ötf
("Error: UnexpectedÉrror occurred.\n");

156 
	}
}

163 
	$öôülize_í˛ave
()

165 
tokí_∑th
[
MAX_PATH
] = {'\0'};

166 
sgx_œunch_tokí_t
 
tokí
 = {0};

167 
sgx_°©us_t
 
ªt
 = 
SGX_ERROR_UNEXPECTED
;

168 
upd©ed
 = 0;

173 #ifde‡
_MSC_VER


175 i‡(
S_OK
 !
	`SHGëFﬁdîP©hA
(
NULL
, 
CSIDL_LOCAL_APPDATA
, NULL, 0, 
tokí_∑th
)) {

176 
	`°∫˝y_s
(
tokí_∑th
, 
	`_cou¡of
—okí_∑th), 
TOKEN_FILENAME
, (TOKEN_FILENAME));

178 
	`°∫ˇt_s
(
tokí_∑th
, 
	`_cou¡of
—okí_∑th), "\\" 
TOKEN_FILENAME
, (TOKEN_FILENAME)+2);

182 
HANDLE
 
tokí_h™dÀr
 = 
	`Cª©eFûeA
(
tokí_∑th
, 
GENERIC_READ
|
GENERIC_WRITE
, 
FILE_SHARE_READ
, 
NULL
, 
OPEN_ALWAYS
, NULL, NULL);

183 i‡(
tokí_h™dÀr
 =
INVALID_HANDLE_VALUE
) {

184 
	`¥ötf
("W¨nög: FaûedÅÿ¸óã/›íÅhêœunchÅokí fûê\"%s\".\n", 
tokí_∑th
);

187 
DWORD
 
ªad_num
 = 0;

188 
	`RódFûe
(
tokí_h™dÀr
, 
tokí
, (
sgx_œunch_tokí_t
), &
ªad_num
, 
NULL
);

189 i‡(
ªad_num
 !0 &&Ñód_num !(
sgx_œunch_tokí_t
)) {

191 
	`mem£t
(&
tokí
, 0x0, (
sgx_œunch_tokí_t
));

192 
	`¥ötf
("W¨nög: InvÆidÜaunchÅokíÑód from \"%s\".\n", 
tokí_∑th
);

197 c⁄° *
home_dú
 = 
	`gëpwuid
(
	`gëuid
())->
pw_dú
;

199 i‡(
home_dú
 !
NULL
 &&

200 (
	`°æí
(
home_dú
)+°æí("/")+(
TOKEN_FILENAME
)+1Ë<
MAX_PATH
) {

202 
	`°∫˝y
(
tokí_∑th
, 
home_dú
, 
	`°æí
(home_dir));

203 
	`°∫ˇt
(
tokí_∑th
, "/", 
	`°æí
("/"));

204 
	`°∫ˇt
(
tokí_∑th
, 
TOKEN_FILENAME
, (TOKEN_FILENAME)+1);

207 
	`°∫˝y
(
tokí_∑th
, 
TOKEN_FILENAME
, (TOKEN_FILENAME));

210 
FILE
 *
Â
 = 
	`f›í
(
tokí_∑th
, "rb");

211 i‡(
Â
 =
NULL
 && (Â = 
	`f›í
(
tokí_∑th
, "wb")) == NULL) {

212 
	`¥ötf
("W¨nög: FaûedÅÿ¸óã/›íÅhêœunchÅokí fûê\"%s\".\n", 
tokí_∑th
);

215 i‡(
Â
 !
NULL
) {

217 
size_t
 
ªad_num
 = 
	`‰ód
(
tokí
, 1, (
sgx_œunch_tokí_t
), 
Â
);

218 i‡(
ªad_num
 !0 &&Ñód_num !(
sgx_œunch_tokí_t
)) {

220 
	`mem£t
(&
tokí
, 0x0, (
sgx_œunch_tokí_t
));

221 
	`¥ötf
("W¨nög: InvÆidÜaunchÅokíÑód from \"%s\".\n", 
tokí_∑th
);

227 
ªt
 = 
	`sgx_¸óã_í˛ave
(
ENCLAVE_FILENAME
, 
SGX_DEBUG_FLAG
, &
tokí
, &
upd©ed
, &
globÆ_eid
, 
NULL
);

228 i‡(
ªt
 !
SGX_SUCCESS
) {

229 
	`¥öt_îr‹_mesßge
(
ªt
);

230 #ifde‡
_MSC_VER


231 i‡(
tokí_h™dÀr
 !
INVALID_HANDLE_VALUE
)

232 
	`Clo£H™dÀ
(
tokí_h™dÀr
);

234 i‡(
Â
 !
NULL
Ë
	`f˛o£
(fp);

240 #ifde‡
_MSC_VER


241 i‡(
upd©ed
 =
FALSE
 || 
tokí_h™dÀr
 =
INVALID_HANDLE_VALUE
) {

243 i‡(
tokí_h™dÀr
 !
INVALID_HANDLE_VALUE
)

244 
	`Clo£H™dÀ
(
tokí_h™dÀr
);

249 
	`FlushFûeBuf„rs
(
tokí_h™dÀr
);

251 
	`SëFûePoöãr
(
tokí_h™dÀr
, 0, 
NULL
, 
FILE_BEGIN
);

254 
DWORD
 
wrôe_num
 = 0;

255 
	`WrôeFûe
(
tokí_h™dÀr
, 
tokí
, (
sgx_œunch_tokí_t
), &
wrôe_num
, 
NULL
);

256 i‡(
wrôe_num
 !(
sgx_œunch_tokí_t
))

257 
	`¥ötf
("W¨nög: FaûedÅÿßvêœunchÅokíÅÿ\"%s\".\n", 
tokí_∑th
);

258 
	`Clo£H™dÀ
(
tokí_h™dÀr
);

260 i‡(
upd©ed
 =
FALSE
 || 
Â
 =
NULL
) {

262 i‡(
Â
 !
NULL
Ë
	`f˛o£
(fp);

267 
Â
 = 
	`‰e›í
(
tokí_∑th
, "wb", fp);

268 i‡(
Â
 =
NULL
)  0;

269 
size_t
 
wrôe_num
 = 
	`fwrôe
(
tokí
, 1, (
sgx_œunch_tokí_t
), 
Â
);

270 i‡(
wrôe_num
 !(
sgx_œunch_tokí_t
))

271 
	`¥ötf
("W¨nög: FaûedÅÿßvêœunchÅokíÅÿ\"%s\".\n", 
tokí_∑th
);

272 
	`f˛o£
(
Â
);

275 
	}
}

278 
	$oˇŒ_¥öt_°rög
(c⁄° *
°r
)

283 
	`¥ötf
("%s", 
°r
);

284 
	}
}

286 "C" 
LaunchAµ
(*);

288 
	$oˇŒ_gíîic
(
±r
)

291 i‡(
±r
 <0 ||Öå > (
fun˘i⁄_poöãrs
)/(*)){

292 
	`¥ötf
("InvÆid fun˘i⁄ id %Œd\n", 
±r
);

293 
	`exô
(-1);

296  
	`LaunchAµ
(
fun˘i⁄_poöãrs
[
±r
]);

297 
	}
}

299 
FILE
* 
gëSTDOUT
() {

300  
°dout
;

304 * 
mymÆloc
(
size_t
 
a
){

305  
mÆloc
(
a
);

307 *
myˇŒoc
(
size_t
 
a
, size_à
b
) {

308  
ˇŒoc
(
a
, 
b
);

310 *
myªÆloc
(* 
a
, 
size_t
 
b
) {

311  
ªÆloc
(
a
, 
b
);

313 
my‰ì
(*
a
) {

314 
‰ì
(
a
);

317 #i‡
deföed
(
_MSC_VER
)

319 
	$quîy_sgx_°©us
()

321 
sgx_devi˚_°©us_t
 
sgx_devi˚_°©us
;

322 
sgx_°©us_t
 
sgx_ªt
 = 
	`sgx_íabÀ_devi˚
(&
sgx_devi˚_°©us
);

323 i‡(
sgx_ªt
 !
SGX_SUCCESS
) {

324 
	`¥ötf
("FailedÅo get SGX device status.\n");

328 
sgx_devi˚_°©us
) {

329 
SGX_ENABLED
:

331 
SGX_DISABLED_REBOOT_REQUIRED
:

332 
	`¥ötf
("SGX device has beenÉnabled. PleaseÑeboot your machine.\n");

334 
SGX_DISABLED_LEGACY_OS
:

335 
	`¥ötf
("SGX device can't beÉnabled onán OSÅhat doesn't support EFI interface.\n");

337 
SGX_DISABLED
:

338 
	`¥ötf
("SGX isÇotÉnabled onÅhisÖlatform. More detailsáre unavailable.\n");

340 
SGX_DISABLED_SCI_AVAILABLE
:

341 
	`¥ötf
("SGX device can beÉnabled byá Software Control Interface.\n");

343 
SGX_DISABLED_MANUAL_ENABLE
:

344 
	`¥ötf
("SGX device can beÉnabled manually inÅhe BIOS setup.\n");

346 
SGX_DISABLED_HYPERV_ENABLED
:

347 
	`¥ötf
("Detectedán unsupported version of Windows* 10 with Hyper-VÉnabled.\n");

349 
SGX_DISABLED_UNSUPPORTED_CPU
:

350 
	`¥ötf
("SGX isÇot supported byÅhis CPU.\n");

353 
	`¥ötf
("UnexpectedÉrror.\n");

357 
	}
}

361 
SGX_CDECL
 
	$maö
(
¨gc
, *
¨gv
[])

363 ()(
¨gc
);

364 ()(
¨gv
);

367 #i‡
	`deföed
(
_MSC_VER
)

368 i‡(
	`quîy_sgx_°©us
() < 0) {

370 
	`¥ötf
("Enterá character beforeÉxit ...\n");

371 
	`gëch¨
();

377 if(
	`öôülize_í˛ave
() < 0){

378 
	`¥ötf
("Enterá character beforeÉxit ...\n");

379 
	`gëch¨
();

384 
	#SWAP_AREA
 0x900000000ULL

	)

385 
	#GLOBAL_AREA
 0xA0000000000ULL

	)

387 
	`¥ötf
("Hello world\n");

389 if((*)
SWAP_AREA
 !
	`VútuÆAŒoc
((*)SWAP_AREA, 4096, 
MEM_RESERVE
 | 
MEM_COMMIT
, 
PAGE_READWRITE
)){

390 
	`¥ötf
("Swapállocation failed\n");

393 if((*)
GLOBAL_AREA
 !
	`VútuÆAŒoc
((*)GLOBAL_AREA, 4096*16, 
MEM_RESERVE
 | 
MEM_COMMIT
, 
PAGE_READWRITE
)){

394 
	`¥ötf
("globalállocation failed\n");

397 
	#FORMAT_STRING
 "Hñlÿw‹ld %d %d %d %d %s\n"

	)

398 
	`°r˝y_s
((*)(
SWAP_AREA
 + 0x100), (
FORMAT_STRING
) + 1, FORMAT_STRING);

400 *
vÆ
 = (*)
SWAP_AREA
;

402 *(*)(
vÆ
 + 0xf8) += (8192 * 16 - 1024- 8);

405 
ªt
;

407 
	`eˇŒ_big_mÆloc
(
globÆ_eid
, &
ªt
);

409 
ªt
 = (ret + (4096*16 -1)) & ~0xffff;

410 
	`¥ötf
("ªt:%Œx\n", 
ªt
);

411 
¥iv©e_°ack_íd
 = 
ªt
 + 4096 * 16;

412 
public_°ack_íd
 = 
¥iv©e_°ack_íd
 + (1ULL << 30);

413 
public_°ack_°¨t
 = 
ªt
 + (1ULL << 30);

414 *(*)(
vÆ
 + 0xf8Ë
public_°ack_íd
 - 64 - 8;

416 
	`¥ötf
("public_°ak_°¨t:%Œx\n", 
public_°ack_°¨t
);

417 if((*)
public_°ack_°¨t
 !
	`VútuÆAŒoc
((*Ìublic_°ack_°¨t, 4096 * 16, 
MEM_RESERVE
 | 
MEM_COMMIT
 , 
PAGE_READWRITE
)){

418 
	`¥ötf
("Public stack creation failed\n");

423 
	`eˇŒ_maö
(
globÆ_eid
);

427 
	`edgî8r_¨øy_©åibuãs
();

428 
	`edgî8r_poöãr_©åibuãs
();

429 
	`edgî8r_ty≥_©åibuãs
();

430 
	`edgî8r_fun˘i⁄_©åibuãs
();

433 
	`eˇŒ_libc_fun˘i⁄s
();

434 
	`eˇŒ_libcxx_fun˘i⁄s
();

435 
	`eˇŒ_thªad_fun˘i⁄s
();

438 
	`sgx_de°roy_í˛ave
(
globÆ_eid
);

439 
	`SÀï
(100);

440 
	`exô
(0);

447 
	}
}

	@App/App.h

26 #i‚de‡
_APP_H_


27 
	#_APP_H_


	)

29 
	~<as£π.h
>

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<°d¨g.h
>

34 
	~"sgx_îr‹.h
"

35 
	~"sgx_eid.h
"

37 #i‚de‡
TRUE


38 
	#TRUE
 1

	)

41 #i‚de‡
FALSE


42 
	#FALSE
 0

	)

45 #i‡
deföed
(
_MSC_VER
)

46 
	#TOKEN_FILENAME
 "En˛ave.tokí"

	)

47 
	#ENCLAVE_FILENAME
 "En˛ave.sig√d.dŒ"

	)

48 #ñi‡
deföed
(
__GNUC__
)

49 
	#TOKEN_FILENAME
 "í˛ave.tokí"

	)

50 
	#ENCLAVE_FILENAME
 "í˛ave.sig√d.so"

	)

53 
sgx_í˛ave_id_t
 
globÆ_eid
;

55 #i‡
deföed
(
__˝lu•lus
)

59 
edgî8r_¨øy_©åibuãs
();

60 
edgî8r_ty≥_©åibuãs
();

61 
edgî8r_poöãr_©åibuãs
();

62 
edgî8r_fun˘i⁄_©åibuãs
();

64 
eˇŒ_libc_fun˘i⁄s
();

65 
eˇŒ_libcxx_fun˘i⁄s
();

66 
eˇŒ_thªad_fun˘i⁄s
();

68 #i‡
deföed
(
__˝lu•lus
)

	@App/Edger8rSyntax/Arrays.cpp

26 
	~"../Aµ.h
"

27 
	~"En˛ave_u.h
"

32 
	$edgî8r_¨øy_©åibuãs
()

34 
sgx_°©us_t
 
ªt
 = 
SGX_ERROR_UNEXPECTED
;

37 
¨r1
[4] = {0, 1, 2, 3};

38 
ªt
 = 
	`eˇŒ_¨øy_u£r_check
(
globÆ_eid
, 
¨r1
);

39 i‡(
ªt
 !
SGX_SUCCESS
)

40 
	`ab‹t
();

43 
i
 = 0; i < 4; i++)

44 
	`as£π
(
¨r1
[
i
] == (3 - i));

47 
¨r2
[4] = {0, 1, 2, 3};

48 
ªt
 = 
	`eˇŒ_¨øy_ö
(
globÆ_eid
, 
¨r2
);

49 i‡(
ªt
 !
SGX_SUCCESS
)

50 
	`ab‹t
();

53 
i
 = 0; i < 4; i++)

54 
	`as£π
(
¨r2
[
i
] == i);

57 
¨r3
[4] = {0, 1, 2, 3};

58 
ªt
 = 
	`eˇŒ_¨øy_out
(
globÆ_eid
, 
¨r3
);

59 i‡(
ªt
 !
SGX_SUCCESS
)

60 
	`ab‹t
();

63 
i
 = 0; i < 4; i++)

64 
	`as£π
(
¨r3
[
i
] == (3 - i));

67 
¨r4
[4] = {0, 1, 2, 3};

68 
ªt
 = 
	`eˇŒ_¨øy_ö_out
(
globÆ_eid
, 
¨r4
);

69 i‡(
ªt
 !
SGX_SUCCESS
)

70 
	`ab‹t
();

73 
i
 = 0; i < 4; i++)

74 
	`as£π
(
¨r4
[
i
] == (3 - i));

77 
¨øy_t
 
¨r5
 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

78 
ªt
 = 
	`eˇŒ_¨øy_ißry
(
globÆ_eid
, 
¨r5
);

79 i‡(
ªt
 !
SGX_SUCCESS
)

80 
	`ab‹t
();

83 
i
 = 0; i < 10; i++)

84 
	`as£π
(
¨r5
[
i
] == (9 - i));

85 
	}
}

	@App/Edger8rSyntax/Functions.cpp

26 
	~"../Aµ.h
"

27 
	~"En˛ave_u.h
"

35 
	$edgî8r_fun˘i⁄_©åibuãs
()

37 
sgx_°©us_t
 
ªt
 = 
SGX_ERROR_UNEXPECTED
;

39 
ªt
 = 
	`eˇŒ_fun˘i⁄_ˇŒög_c⁄vs
(
globÆ_eid
);

40 i‡(
ªt
 !
SGX_SUCCESS
)

41 
	`ab‹t
();

43 
ªt
 = 
	`eˇŒ_fun˘i⁄_public
(
globÆ_eid
);

44 i‡(
ªt
 !
SGX_SUCCESS
)

45 
	`ab‹t
();

48 
ru¬ed
 = 0;

49 
ªt
 = 
	`eˇŒ_fun˘i⁄_¥iv©e
(
globÆ_eid
, &
ru¬ed
);

50 i‡(
ªt
 !
SGX_ERROR_ECALL_NOT_ALLOWED
 || 
ru¬ed
 != 0)

51 
	`ab‹t
();

52 
	}
}

57 
	$oˇŒ_fun˘i⁄_Ælow
()

59 
ru¬ed
 = 0;

60 
sgx_°©us_t
 
ªt
 = 
SGX_ERROR_UNEXPECTED
;

62 
ªt
 = 
	`eˇŒ_fun˘i⁄_¥iv©e
(
globÆ_eid
, &
ru¬ed
);

63 i‡(
ªt
 !
SGX_SUCCESS
 || 
ru¬ed
 != 1)

64 
	`ab‹t
();

65 
	}
}

	@App/Edger8rSyntax/Pointers.cpp

26 
	~"../Aµ.h
"

27 
	~"En˛ave_u.h
"

32 
	$edgî8r_poöãr_©åibuãs
()

34 
vÆ
 = 0;

35 
sgx_°©us_t
 
ªt
 = 
SGX_ERROR_UNEXPECTED
;

37 
c
[128] = {0};

38 
size_t
 
Àn
 = 0;

39 
	`mem£t
(
c
, 0xe, 128);

40 
ªt
 = 
	`eˇŒ_poöãr_u£r_check
(
globÆ_eid
, &
Àn
, &
c
, 128);

41 i‡(
ªt
 !
SGX_SUCCESS
)

42 
	`ab‹t
();

43 
	`as£π
(
	`°rcmp
(
c
, "SGX_SUCCESS") == 0);

46 
vÆ
 = 0;

47 
ªt
 = 
	`eˇŒ_poöãr_ö
(
globÆ_eid
, &
vÆ
);

48 i‡(
ªt
 !
SGX_SUCCESS
)

49 
	`ab‹t
();

50 
	`as£π
(
vÆ
 == 0);

52 
vÆ
 = 0;

53 
ªt
 = 
	`eˇŒ_poöãr_out
(
globÆ_eid
, &
vÆ
);

54 i‡(
ªt
 !
SGX_SUCCESS
)

55 
	`ab‹t
();

56 
	`as£π
(
vÆ
 == 1234);

58 
vÆ
 = 0;

59 
ªt
 = 
	`eˇŒ_poöãr_ö_out
(
globÆ_eid
, &
vÆ
);

60 i‡(
ªt
 !
SGX_SUCCESS
)

61 
	`ab‹t
();

62 
	`as£π
(
vÆ
 == 1234);

64 
ªt
 = 
	`oˇŒ_poöãr_©å
(
globÆ_eid
);

65 i‡(
ªt
 !
SGX_SUCCESS
)

66 
	`ab‹t
();

68 
°r1
[] = "1234567890";

69 
ªt
 = 
	`eˇŒ_poöãr_°rög
(
globÆ_eid
, 
°r1
);

70 i‡(
ªt
 !
SGX_SUCCESS
)

71 
	`ab‹t
();

72 
	`as£π
(
	`°æí
(
°r1
Ë=10 && 
	`memcmp
(str1, "0987654321", strlen(str1)) == 0);

74 c⁄° 
°r2
[] = "1234567890";

75 
ªt
 = 
	`eˇŒ_poöãr_°rög_c⁄°
(
globÆ_eid
, 
°r2
);

76 i‡(
ªt
 !
SGX_SUCCESS
)

77 
	`ab‹t
();

78 
	`as£π
(
	`°æí
(
°r2
Ë=10 && 
	`memcmp
(str2, "1234567890", strlen(str2)) == 0);

80 
°r3
[] = "1234567890";

81 
ªt
 = 
	`eˇŒ_poöãr_size
(
globÆ_eid
, (*)
°r3
, 
	`°æí
(str3));

82 i‡(
ªt
 !
SGX_SUCCESS
)

83 
	`ab‹t
();

84 
	`as£π
(
	`°æí
(
°r3
Ë=10 && 
	`memcmp
(str3, "0987654321", strlen(str3)) == 0);

86 
°r4
[] = "1234567890";

87 
ªt
 = 
	`eˇŒ_poöãr_i•å_ªad⁄ly
(
globÆ_eid
, (
buf„r_t
)
°r4
, 
	`°æí
(str4));

88 i‡(
ªt
 !
SGX_SUCCESS
)

89 
	`ab‹t
();

90 
	`as£π
(
	`°æí
(
°r4
Ë=10 && 
	`memcmp
(str4, "1234567890", strlen(str4)) == 0);

92 
¨r
[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

93 
ªt
 = 
	`eˇŒ_poöãr_cou¡
(
globÆ_eid
, 
¨r
, 10);

94 i‡(
ªt
 !
SGX_SUCCESS
)

95 
	`ab‹t
();

97 
i
 = 0; i < 10; i++)

98 
	`as£π
(
¨r
[
i
] == (9 - i));

100 
	`mem£t
(
¨r
, 0x0, (arr));

101 
ªt
 = 
	`eˇŒ_poöãr_sizefunc
(
globÆ_eid
, (*)
¨r
);

102 i‡(
ªt
 !
SGX_SUCCESS
)

103 
	`ab‹t
();

105 
i
 = 0; i < 10; i++)

106 
	`as£π
(
¨r
[
i
] == i);

109 
	}
}

114 
	$oˇŒ_poöãr_u£r_check
(* 
vÆ
)

116 ()
vÆ
;

117 
	`as£π
(
vÆ
 !
NULL
);

118 
	}
}

123 
	$oˇŒ_poöãr_ö
(* 
vÆ
)

125 *
vÆ
 = 1234;

126 
	}
}

131 
	$oˇŒ_poöãr_out
(* 
vÆ
)

133 *
vÆ
 = 1234;

134 
	}
}

139 
	$oˇŒ_poöãr_ö_out
(* 
vÆ
)

141 *
vÆ
 = 1234;

142 
	}
}

	@App/Edger8rSyntax/Types.cpp

26 
	~"../Aµ.h
"

27 
	~"En˛ave_u.h
"

32 
	$edgî8r_ty≥_©åibuãs
()

34 
sgx_°©us_t
 
ªt
 = 
SGX_ERROR_UNEXPECTED
;

36 
ªt
 = 
	`eˇŒ_ty≥_ch¨
(
globÆ_eid
, ()0x12);

37 i‡(
ªt
 !
SGX_SUCCESS
)

38 
	`ab‹t
();

40 
ªt
 = 
	`eˇŒ_ty≥_öt
(
globÆ_eid
, ()1234);

41 i‡(
ªt
 !
SGX_SUCCESS
)

42 
	`ab‹t
();

44 
ªt
 = 
	`eˇŒ_ty≥_Êﬂt
(
globÆ_eid
, ()1234.0);

45 i‡(
ªt
 !
SGX_SUCCESS
)

46 
	`ab‹t
();

48 
ªt
 = 
	`eˇŒ_ty≥_doubÀ
(
globÆ_eid
, ()1234.5678);

49 i‡(
ªt
 !
SGX_SUCCESS
)

50 
	`ab‹t
();

52 
ªt
 = 
	`eˇŒ_ty≥_size_t
(
globÆ_eid
, (
size_t
)12345678);

53 i‡(
ªt
 !
SGX_SUCCESS
)

54 
	`ab‹t
();

56 
ªt
 = 
	`eˇŒ_ty≥_wch¨_t
(
globÆ_eid
, (
wch¨_t
)0x1234);

57 i‡(
ªt
 !
SGX_SUCCESS
)

58 
	`ab‹t
();

60 
°ru˘_foo_t
 
g
 = {1234, 5678};

61 
ªt
 = 
	`eˇŒ_ty≥_°ru˘
(
globÆ_eid
, 
g
);

62 i‡(
ªt
 !
SGX_SUCCESS
)

63 
	`ab‹t
();

65 
uni⁄_foo_t
 
vÆ
 = {0};

66 
ªt
 = 
	`eˇŒ_ty≥_íum_uni⁄
(
globÆ_eid
, 
ENUM_FOO_0
, &
vÆ
);

67 i‡(
ªt
 !
SGX_SUCCESS
)

68 
	`ab‹t
();

69 
	`as£π
(
vÆ
.
uni⁄_foo_0
 == 2);

70 
	}
}

	@App/Enclave_u.c

1 
	~"En˛ave_u.h
"

2 
	~<î∫o.h
>

5 
	sms_eˇŒ_big_mÆloc_t
 {

6 
	mms_ªtvÆ
;

7 } 
	tms_eˇŒ_big_mÆloc_t
;

9 
	sms_eˇŒ_ty≥_ch¨_t
 {

10 
	mms_vÆ
;

11 } 
	tms_eˇŒ_ty≥_ch¨_t
;

13 
	sms_eˇŒ_ty≥_öt_t
 {

14 
	mms_vÆ
;

15 } 
	tms_eˇŒ_ty≥_öt_t
;

17 
	sms_eˇŒ_ty≥_Êﬂt_t
 {

18 
	mms_vÆ
;

19 } 
	tms_eˇŒ_ty≥_Êﬂt_t
;

21 
	sms_eˇŒ_ty≥_doubÀ_t
 {

22 
	mms_vÆ
;

23 } 
	tms_eˇŒ_ty≥_doubÀ_t
;

25 
	sms_eˇŒ_ty≥_size_t_t
 {

26 
size_t
 
	mms_vÆ
;

27 } 
	tms_eˇŒ_ty≥_size_t_t
;

29 
	sms_eˇŒ_ty≥_wch¨_t_t
 {

30 
wch¨_t
 
	mms_vÆ
;

31 } 
	tms_eˇŒ_ty≥_wch¨_t_t
;

33 
	sms_eˇŒ_ty≥_°ru˘_t
 {

34 
°ru˘_foo_t
 
	mms_vÆ
;

35 } 
	tms_eˇŒ_ty≥_°ru˘_t
;

37 
	sms_eˇŒ_ty≥_íum_uni⁄_t
 {

38 
íum_foo_t
 
	mms_vÆ1
;

39 
uni⁄_foo_t
* 
	mms_vÆ2
;

40 } 
	tms_eˇŒ_ty≥_íum_uni⁄_t
;

42 
	sms_eˇŒ_poöãr_u£r_check_t
 {

43 
size_t
 
	mms_ªtvÆ
;

44 * 
	mms_vÆ
;

45 
size_t
 
	mms_sz
;

46 } 
	tms_eˇŒ_poöãr_u£r_check_t
;

48 
	sms_eˇŒ_poöãr_ö_t
 {

49 * 
	mms_vÆ
;

50 } 
	tms_eˇŒ_poöãr_ö_t
;

52 
	sms_eˇŒ_poöãr_out_t
 {

53 * 
	mms_vÆ
;

54 } 
	tms_eˇŒ_poöãr_out_t
;

56 
	sms_eˇŒ_poöãr_ö_out_t
 {

57 * 
	mms_vÆ
;

58 } 
	tms_eˇŒ_poöãr_ö_out_t
;

60 
	sms_eˇŒ_poöãr_°rög_t
 {

61 * 
	mms_°r
;

62 } 
	tms_eˇŒ_poöãr_°rög_t
;

64 
	sms_eˇŒ_poöãr_°rög_c⁄°_t
 {

65 * 
	mms_°r
;

66 } 
	tms_eˇŒ_poöãr_°rög_c⁄°_t
;

68 
	sms_eˇŒ_poöãr_size_t
 {

69 * 
	mms_±r
;

70 
size_t
 
	mms_Àn
;

71 } 
	tms_eˇŒ_poöãr_size_t
;

73 
	sms_eˇŒ_poöãr_cou¡_t
 {

74 * 
	mms_¨r
;

75 
	mms_˙t
;

76 } 
	tms_eˇŒ_poöãr_cou¡_t
;

78 
	sms_eˇŒ_poöãr_i•å_ªad⁄ly_t
 {

79 
buf„r_t
 
	mms_buf
;

80 
size_t
 
	mms_Àn
;

81 } 
	tms_eˇŒ_poöãr_i•å_ªad⁄ly_t
;

83 
	sms_eˇŒ_poöãr_sizefunc_t
 {

84 * 
	mms_buf
;

85 } 
	tms_eˇŒ_poöãr_sizefunc_t
;

88 
	sms_eˇŒ_¨øy_u£r_check_t
 {

89 * 
	mms_¨r
;

90 } 
	tms_eˇŒ_¨øy_u£r_check_t
;

92 
	sms_eˇŒ_¨øy_ö_t
 {

93 * 
	mms_¨r
;

94 } 
	tms_eˇŒ_¨øy_ö_t
;

96 
	sms_eˇŒ_¨øy_out_t
 {

97 * 
	mms_¨r
;

98 } 
	tms_eˇŒ_¨øy_out_t
;

100 
	sms_eˇŒ_¨øy_ö_out_t
 {

101 * 
	mms_¨r
;

102 } 
	tms_eˇŒ_¨øy_ö_out_t
;

104 
	sms_eˇŒ_¨øy_ißry_t
 {

105 
¨øy_t
* 
	mms_¨r
;

106 } 
	tms_eˇŒ_¨øy_ißry_t
;

110 
	sms_eˇŒ_fun˘i⁄_¥iv©e_t
 {

111 
	mms_ªtvÆ
;

112 } 
	tms_eˇŒ_fun˘i⁄_¥iv©e_t
;

115 
	sms_eˇŒ_sgx_˝uid_t
 {

116 * 
	mms_˝uöfo
;

117 
	mms_Àaf
;

118 } 
	tms_eˇŒ_sgx_˝uid_t
;

122 
	sms_eˇŒ_ö¸ó£_cou¡î_t
 {

123 
size_t
 
	mms_ªtvÆ
;

124 } 
	tms_eˇŒ_ö¸ó£_cou¡î_t
;

128 
	sms_oˇŒ_¥öt_°rög_t
 {

129 * 
	mms_°r
;

130 } 
	tms_oˇŒ_¥öt_°rög_t
;

132 
	sms_oˇŒ_gíîic_t
 {

133 
	mms_ªtvÆ
;

134 
	mms_±r
;

135 } 
	tms_oˇŒ_gíîic_t
;

137 
	sms_oˇŒ_poöãr_u£r_check_t
 {

138 * 
	mms_vÆ
;

139 } 
	tms_oˇŒ_poöãr_u£r_check_t
;

141 
	sms_oˇŒ_poöãr_ö_t
 {

142 * 
	mms_vÆ
;

143 } 
	tms_oˇŒ_poöãr_ö_t
;

145 
	sms_oˇŒ_poöãr_out_t
 {

146 * 
	mms_vÆ
;

147 } 
	tms_oˇŒ_poöãr_out_t
;

149 
	sms_oˇŒ_poöãr_ö_out_t
 {

150 * 
	mms_vÆ
;

151 } 
	tms_oˇŒ_poöãr_ö_out_t
;

153 
	sms_memc˝y_t
 {

154 * 
	mms_ªtvÆ
;

155 * 
	mms_de°
;

156 * 
	mms_§c
;

157 
	mms_vÆ
;

158 
size_t
 
	mms_Àn
;

159 } 
	tms_memc˝y_t
;

162 
	sms_sgx_oc_˝uidex_t
 {

163 * 
	mms_˝uöfo
;

164 
	mms_Àaf
;

165 
	mms_subÀaf
;

166 } 
	tms_sgx_oc_˝uidex_t
;

168 
	sms_sgx_thªad_waô_u¡ru°ed_evít_oˇŒ_t
 {

169 
	mms_ªtvÆ
;

170 * 
	mms_£lf
;

171 } 
	tms_sgx_thªad_waô_u¡ru°ed_evít_oˇŒ_t
;

173 
	sms_sgx_thªad_£t_u¡ru°ed_evít_oˇŒ_t
 {

174 
	mms_ªtvÆ
;

175 * 
	mms_waôî
;

176 } 
	tms_sgx_thªad_£t_u¡ru°ed_evít_oˇŒ_t
;

178 
	sms_sgx_thªad_£twaô_u¡ru°ed_evíts_oˇŒ_t
 {

179 
	mms_ªtvÆ
;

180 * 
	mms_waôî
;

181 * 
	mms_£lf
;

182 } 
	tms_sgx_thªad_£twaô_u¡ru°ed_evíts_oˇŒ_t
;

184 
	sms_sgx_thªad_£t_mu…ùÀ_u¡ru°ed_evíts_oˇŒ_t
 {

185 
	mms_ªtvÆ
;

186 ** 
	mms_waôîs
;

187 
size_t
 
	mms_tŸÆ
;

188 } 
	tms_sgx_thªad_£t_mu…ùÀ_u¡ru°ed_evíts_oˇŒ_t
;

190 
sgx_°©us_t
 
SGX_CDECL
 
	$En˛ave_oˇŒ_¥öt_°rög
(* 
pms
)

192 
ms_oˇŒ_¥öt_°rög_t
* 
ms
 = 
	`SGX_CAST
(ms_oˇŒ_¥öt_°rög_t*, 
pms
);

193 
	`oˇŒ_¥öt_°rög
((c⁄° *)
ms
->
ms_°r
);

195  
SGX_SUCCESS
;

196 
	}
}

198 
sgx_°©us_t
 
SGX_CDECL
 
	$En˛ave_oˇŒ_gíîic
(* 
pms
)

200 
ms_oˇŒ_gíîic_t
* 
ms
 = 
	`SGX_CAST
(ms_oˇŒ_gíîic_t*, 
pms
);

201 
ms
->
ms_ªtvÆ
 = 
	`oˇŒ_gíîic
(ms->
ms_±r
);

203  
SGX_SUCCESS
;

204 
	}
}

206 
sgx_°©us_t
 
SGX_CDECL
 
	$En˛ave_oˇŒ_poöãr_u£r_check
(* 
pms
)

208 
ms_oˇŒ_poöãr_u£r_check_t
* 
ms
 = 
	`SGX_CAST
(ms_oˇŒ_poöãr_u£r_check_t*, 
pms
);

209 
	`oˇŒ_poöãr_u£r_check
(
ms
->
ms_vÆ
);

211  
SGX_SUCCESS
;

212 
	}
}

214 
sgx_°©us_t
 
SGX_CDECL
 
	$En˛ave_oˇŒ_poöãr_ö
(* 
pms
)

216 
ms_oˇŒ_poöãr_ö_t
* 
ms
 = 
	`SGX_CAST
(ms_oˇŒ_poöãr_ö_t*, 
pms
);

217 
	`oˇŒ_poöãr_ö
(
ms
->
ms_vÆ
);

219  
SGX_SUCCESS
;

220 
	}
}

222 
sgx_°©us_t
 
SGX_CDECL
 
	$En˛ave_oˇŒ_poöãr_out
(* 
pms
)

224 
ms_oˇŒ_poöãr_out_t
* 
ms
 = 
	`SGX_CAST
(ms_oˇŒ_poöãr_out_t*, 
pms
);

225 
	`oˇŒ_poöãr_out
(
ms
->
ms_vÆ
);

227  
SGX_SUCCESS
;

228 
	}
}

230 
sgx_°©us_t
 
SGX_CDECL
 
	$En˛ave_oˇŒ_poöãr_ö_out
(* 
pms
)

232 
ms_oˇŒ_poöãr_ö_out_t
* 
ms
 = 
	`SGX_CAST
(ms_oˇŒ_poöãr_ö_out_t*, 
pms
);

233 
	`oˇŒ_poöãr_ö_out
(
ms
->
ms_vÆ
);

235  
SGX_SUCCESS
;

236 
	}
}

238 
sgx_°©us_t
 
SGX_CDECL
 
	$En˛ave_memc˝y
(* 
pms
)

240 
ms_memc˝y_t
* 
ms
 = 
	`SGX_CAST
(ms_memc˝y_t*, 
pms
);

241 
ms
->
ms_ªtvÆ
 = 
	`memc˝y
(ms->
ms_de°
, (c⁄° *)ms->
ms_§c
, ms->
ms_vÆ
, ms->
ms_Àn
);

243  
SGX_SUCCESS
;

244 
	}
}

246 
sgx_°©us_t
 
SGX_CDECL
 
	$En˛ave_oˇŒ_fun˘i⁄_Ælow
(* 
pms
)

248 i‡(
pms
 !
NULL
Ë 
SGX_ERROR_INVALID_PARAMETER
;

249 
	`oˇŒ_fun˘i⁄_Ælow
();

250  
SGX_SUCCESS
;

251 
	}
}

253 
sgx_°©us_t
 
SGX_CDECL
 
	$En˛ave_sgx_oc_˝uidex
(* 
pms
)

255 
ms_sgx_oc_˝uidex_t
* 
ms
 = 
	`SGX_CAST
(ms_sgx_oc_˝uidex_t*, 
pms
);

256 
	`sgx_oc_˝uidex
(
ms
->
ms_˝uöfo
, ms->
ms_Àaf
, ms->
ms_subÀaf
);

258  
SGX_SUCCESS
;

259 
	}
}

261 
sgx_°©us_t
 
SGX_CDECL
 
	$En˛ave_sgx_thªad_waô_u¡ru°ed_evít_oˇŒ
(* 
pms
)

263 
ms_sgx_thªad_waô_u¡ru°ed_evít_oˇŒ_t
* 
ms
 = 
	`SGX_CAST
(ms_sgx_thªad_waô_u¡ru°ed_evít_oˇŒ_t*, 
pms
);

264 
ms
->
ms_ªtvÆ
 = 
	`sgx_thªad_waô_u¡ru°ed_evít_oˇŒ
((c⁄° *)ms->
ms_£lf
);

266  
SGX_SUCCESS
;

267 
	}
}

269 
sgx_°©us_t
 
SGX_CDECL
 
	$En˛ave_sgx_thªad_£t_u¡ru°ed_evít_oˇŒ
(* 
pms
)

271 
ms_sgx_thªad_£t_u¡ru°ed_evít_oˇŒ_t
* 
ms
 = 
	`SGX_CAST
(ms_sgx_thªad_£t_u¡ru°ed_evít_oˇŒ_t*, 
pms
);

272 
ms
->
ms_ªtvÆ
 = 
	`sgx_thªad_£t_u¡ru°ed_evít_oˇŒ
((c⁄° *)ms->
ms_waôî
);

274  
SGX_SUCCESS
;

275 
	}
}

277 
sgx_°©us_t
 
SGX_CDECL
 
	$En˛ave_sgx_thªad_£twaô_u¡ru°ed_evíts_oˇŒ
(* 
pms
)

279 
ms_sgx_thªad_£twaô_u¡ru°ed_evíts_oˇŒ_t
* 
ms
 = 
	`SGX_CAST
(ms_sgx_thªad_£twaô_u¡ru°ed_evíts_oˇŒ_t*, 
pms
);

280 
ms
->
ms_ªtvÆ
 = 
	`sgx_thªad_£twaô_u¡ru°ed_evíts_oˇŒ
((c⁄° *)ms->
ms_waôî
, (c⁄° *)ms->
ms_£lf
);

282  
SGX_SUCCESS
;

283 
	}
}

285 
sgx_°©us_t
 
SGX_CDECL
 
	$En˛ave_sgx_thªad_£t_mu…ùÀ_u¡ru°ed_evíts_oˇŒ
(* 
pms
)

287 
ms_sgx_thªad_£t_mu…ùÀ_u¡ru°ed_evíts_oˇŒ_t
* 
ms
 = 
	`SGX_CAST
(ms_sgx_thªad_£t_mu…ùÀ_u¡ru°ed_evíts_oˇŒ_t*, 
pms
);

288 
ms
->
ms_ªtvÆ
 = 
	`sgx_thªad_£t_mu…ùÀ_u¡ru°ed_evíts_oˇŒ
((c⁄° **)ms->
ms_waôîs
, ms->
ms_tŸÆ
);

290  
SGX_SUCCESS
;

291 
	}
}

294 
size_t
 
	mƒ_oˇŒ
;

295 * 
	mfunc_addr
[13];

296 } 
	goˇŒ_èbÀ_En˛ave
 = {

299 (*)(
uöçå_t
)
En˛ave_oˇŒ_¥öt_°rög
,

300 (*)(
uöçå_t
)
En˛ave_oˇŒ_gíîic
,

301 (*)(
uöçå_t
)
En˛ave_oˇŒ_poöãr_u£r_check
,

302 (*)(
uöçå_t
)
En˛ave_oˇŒ_poöãr_ö
,

303 (*)(
uöçå_t
)
En˛ave_oˇŒ_poöãr_out
,

304 (*)(
uöçå_t
)
En˛ave_oˇŒ_poöãr_ö_out
,

305 (*)(
uöçå_t
)
En˛ave_memc˝y
,

306 (*)(
uöçå_t
)
En˛ave_oˇŒ_fun˘i⁄_Ælow
,

307 (*)(
uöçå_t
)
En˛ave_sgx_oc_˝uidex
,

308 (*)(
uöçå_t
)
En˛ave_sgx_thªad_waô_u¡ru°ed_evít_oˇŒ
,

309 (*)(
uöçå_t
)
En˛ave_sgx_thªad_£t_u¡ru°ed_evít_oˇŒ
,

310 (*)(
uöçå_t
)
En˛ave_sgx_thªad_£twaô_u¡ru°ed_evíts_oˇŒ
,

311 (*)(
uöçå_t
)
En˛ave_sgx_thªad_£t_mu…ùÀ_u¡ru°ed_evíts_oˇŒ
,

315 
sgx_°©us_t
 
	$eˇŒ_maö
(
sgx_í˛ave_id_t
 
eid
)

317 
sgx_°©us_t
 
°©us
;

318 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 0, &
oˇŒ_èbÀ_En˛ave
, 
NULL
);

319  
°©us
;

320 
	}
}

322 
sgx_°©us_t
 
	$eˇŒ_big_mÆloc
(
sgx_í˛ave_id_t
 
eid
, * 
ªtvÆ
)

324 
sgx_°©us_t
 
°©us
;

325 
ms_eˇŒ_big_mÆloc_t
 
ms
;

326 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 1, &
oˇŒ_èbÀ_En˛ave
, &
ms
);

327 i‡(
°©us
 =
SGX_SUCCESS
 && 
ªtvÆ
Ë*ªtvÆ = 
ms
.
ms_ªtvÆ
;

328  
°©us
;

329 
	}
}

331 
sgx_°©us_t
 
	$eˇŒ_ty≥_ch¨
(
sgx_í˛ave_id_t
 
eid
, 
vÆ
)

333 
sgx_°©us_t
 
°©us
;

334 
ms_eˇŒ_ty≥_ch¨_t
 
ms
;

335 
ms
.
ms_vÆ
 = 
vÆ
;

336 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 2, &
oˇŒ_èbÀ_En˛ave
, &
ms
);

337  
°©us
;

338 
	}
}

340 
sgx_°©us_t
 
	$eˇŒ_ty≥_öt
(
sgx_í˛ave_id_t
 
eid
, 
vÆ
)

342 
sgx_°©us_t
 
°©us
;

343 
ms_eˇŒ_ty≥_öt_t
 
ms
;

344 
ms
.
ms_vÆ
 = 
vÆ
;

345 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 3, &
oˇŒ_èbÀ_En˛ave
, &
ms
);

346  
°©us
;

347 
	}
}

349 
sgx_°©us_t
 
	$eˇŒ_ty≥_Êﬂt
(
sgx_í˛ave_id_t
 
eid
, 
vÆ
)

351 
sgx_°©us_t
 
°©us
;

352 
ms_eˇŒ_ty≥_Êﬂt_t
 
ms
;

353 
ms
.
ms_vÆ
 = 
vÆ
;

354 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 4, &
oˇŒ_èbÀ_En˛ave
, &
ms
);

355  
°©us
;

356 
	}
}

358 
sgx_°©us_t
 
	$eˇŒ_ty≥_doubÀ
(
sgx_í˛ave_id_t
 
eid
, 
vÆ
)

360 
sgx_°©us_t
 
°©us
;

361 
ms_eˇŒ_ty≥_doubÀ_t
 
ms
;

362 
ms
.
ms_vÆ
 = 
vÆ
;

363 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 5, &
oˇŒ_èbÀ_En˛ave
, &
ms
);

364  
°©us
;

365 
	}
}

367 
sgx_°©us_t
 
	$eˇŒ_ty≥_size_t
(
sgx_í˛ave_id_t
 
eid
, 
size_t
 
vÆ
)

369 
sgx_°©us_t
 
°©us
;

370 
ms_eˇŒ_ty≥_size_t_t
 
ms
;

371 
ms
.
ms_vÆ
 = 
vÆ
;

372 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 6, &
oˇŒ_èbÀ_En˛ave
, &
ms
);

373  
°©us
;

374 
	}
}

376 
sgx_°©us_t
 
	$eˇŒ_ty≥_wch¨_t
(
sgx_í˛ave_id_t
 
eid
, 
wch¨_t
 
vÆ
)

378 
sgx_°©us_t
 
°©us
;

379 
ms_eˇŒ_ty≥_wch¨_t_t
 
ms
;

380 
ms
.
ms_vÆ
 = 
vÆ
;

381 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 7, &
oˇŒ_èbÀ_En˛ave
, &
ms
);

382  
°©us
;

383 
	}
}

385 
sgx_°©us_t
 
	$eˇŒ_ty≥_°ru˘
(
sgx_í˛ave_id_t
 
eid
, 
°ru˘_foo_t
 
vÆ
)

387 
sgx_°©us_t
 
°©us
;

388 
ms_eˇŒ_ty≥_°ru˘_t
 
ms
;

389 
ms
.
ms_vÆ
 = 
vÆ
;

390 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 8, &
oˇŒ_èbÀ_En˛ave
, &
ms
);

391  
°©us
;

392 
	}
}

394 
sgx_°©us_t
 
	$eˇŒ_ty≥_íum_uni⁄
(
sgx_í˛ave_id_t
 
eid
, 
íum_foo_t
 
vÆ1
, 
uni⁄_foo_t
* 
vÆ2
)

396 
sgx_°©us_t
 
°©us
;

397 
ms_eˇŒ_ty≥_íum_uni⁄_t
 
ms
;

398 
ms
.
ms_vÆ1
 = 
vÆ1
;

399 
ms
.
ms_vÆ2
 = 
vÆ2
;

400 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 9, &
oˇŒ_èbÀ_En˛ave
, &
ms
);

401  
°©us
;

402 
	}
}

404 
sgx_°©us_t
 
	$eˇŒ_poöãr_u£r_check
(
sgx_í˛ave_id_t
 
eid
, 
size_t
* 
ªtvÆ
, * 
vÆ
, size_à
sz
)

406 
sgx_°©us_t
 
°©us
;

407 
ms_eˇŒ_poöãr_u£r_check_t
 
ms
;

408 
ms
.
ms_vÆ
 = 
vÆ
;

409 
ms
.
ms_sz
 = 
sz
;

410 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 10, &
oˇŒ_èbÀ_En˛ave
, &
ms
);

411 i‡(
°©us
 =
SGX_SUCCESS
 && 
ªtvÆ
Ë*ªtvÆ = 
ms
.
ms_ªtvÆ
;

412  
°©us
;

413 
	}
}

415 
sgx_°©us_t
 
	$eˇŒ_poöãr_ö
(
sgx_í˛ave_id_t
 
eid
, * 
vÆ
)

417 
sgx_°©us_t
 
°©us
;

418 
ms_eˇŒ_poöãr_ö_t
 
ms
;

419 
ms
.
ms_vÆ
 = 
vÆ
;

420 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 11, &
oˇŒ_èbÀ_En˛ave
, &
ms
);

421  
°©us
;

422 
	}
}

424 
sgx_°©us_t
 
	$eˇŒ_poöãr_out
(
sgx_í˛ave_id_t
 
eid
, * 
vÆ
)

426 
sgx_°©us_t
 
°©us
;

427 
ms_eˇŒ_poöãr_out_t
 
ms
;

428 
ms
.
ms_vÆ
 = 
vÆ
;

429 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 12, &
oˇŒ_èbÀ_En˛ave
, &
ms
);

430  
°©us
;

431 
	}
}

433 
sgx_°©us_t
 
	$eˇŒ_poöãr_ö_out
(
sgx_í˛ave_id_t
 
eid
, * 
vÆ
)

435 
sgx_°©us_t
 
°©us
;

436 
ms_eˇŒ_poöãr_ö_out_t
 
ms
;

437 
ms
.
ms_vÆ
 = 
vÆ
;

438 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 13, &
oˇŒ_èbÀ_En˛ave
, &
ms
);

439  
°©us
;

440 
	}
}

442 
sgx_°©us_t
 
	$eˇŒ_poöãr_°rög
(
sgx_í˛ave_id_t
 
eid
, * 
°r
)

444 
sgx_°©us_t
 
°©us
;

445 
ms_eˇŒ_poöãr_°rög_t
 
ms
;

446 
ms
.
ms_°r
 = 
°r
;

447 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 14, &
oˇŒ_èbÀ_En˛ave
, &
ms
);

448  
°©us
;

449 
	}
}

451 
sgx_°©us_t
 
	$eˇŒ_poöãr_°rög_c⁄°
(
sgx_í˛ave_id_t
 
eid
, c⁄° * 
°r
)

453 
sgx_°©us_t
 
°©us
;

454 
ms_eˇŒ_poöãr_°rög_c⁄°_t
 
ms
;

455 
ms
.
ms_°r
 = (*)
°r
;

456 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 15, &
oˇŒ_èbÀ_En˛ave
, &
ms
);

457  
°©us
;

458 
	}
}

460 
sgx_°©us_t
 
	$eˇŒ_poöãr_size
(
sgx_í˛ave_id_t
 
eid
, * 
±r
, 
size_t
 
Àn
)

462 
sgx_°©us_t
 
°©us
;

463 
ms_eˇŒ_poöãr_size_t
 
ms
;

464 
ms
.
ms_±r
 = 
±r
;

465 
ms
.
ms_Àn
 = 
Àn
;

466 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 16, &
oˇŒ_èbÀ_En˛ave
, &
ms
);

467  
°©us
;

468 
	}
}

470 
sgx_°©us_t
 
	$eˇŒ_poöãr_cou¡
(
sgx_í˛ave_id_t
 
eid
, * 
¨r
, 
˙t
)

472 
sgx_°©us_t
 
°©us
;

473 
ms_eˇŒ_poöãr_cou¡_t
 
ms
;

474 
ms
.
ms_¨r
 = 
¨r
;

475 
ms
.
ms_˙t
 = 
˙t
;

476 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 17, &
oˇŒ_èbÀ_En˛ave
, &
ms
);

477  
°©us
;

478 
	}
}

480 
sgx_°©us_t
 
	$eˇŒ_poöãr_i•å_ªad⁄ly
(
sgx_í˛ave_id_t
 
eid
, 
buf„r_t
 
buf
, 
size_t
 
Àn
)

482 
sgx_°©us_t
 
°©us
;

483 
ms_eˇŒ_poöãr_i•å_ªad⁄ly_t
 
ms
;

484 
ms
.
ms_buf
 = (
buf„r_t
)
buf
;

485 
ms
.
ms_Àn
 = 
Àn
;

486 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 18, &
oˇŒ_èbÀ_En˛ave
, &
ms
);

487  
°©us
;

488 
	}
}

490 
sgx_°©us_t
 
	$eˇŒ_poöãr_sizefunc
(
sgx_í˛ave_id_t
 
eid
, * 
buf
)

492 
sgx_°©us_t
 
°©us
;

493 
ms_eˇŒ_poöãr_sizefunc_t
 
ms
;

494 
ms
.
ms_buf
 = 
buf
;

495 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 19, &
oˇŒ_èbÀ_En˛ave
, &
ms
);

496  
°©us
;

497 
	}
}

499 
sgx_°©us_t
 
	$oˇŒ_poöãr_©å
(
sgx_í˛ave_id_t
 
eid
)

501 
sgx_°©us_t
 
°©us
;

502 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 20, &
oˇŒ_èbÀ_En˛ave
, 
NULL
);

503  
°©us
;

504 
	}
}

506 
sgx_°©us_t
 
	$eˇŒ_¨øy_u£r_check
(
sgx_í˛ave_id_t
 
eid
, 
¨r
[4])

508 
sgx_°©us_t
 
°©us
;

509 
ms_eˇŒ_¨øy_u£r_check_t
 
ms
;

510 
ms
.
ms_¨r
 = (*)
¨r
;

511 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 21, &
oˇŒ_èbÀ_En˛ave
, &
ms
);

512  
°©us
;

513 
	}
}

515 
sgx_°©us_t
 
	$eˇŒ_¨øy_ö
(
sgx_í˛ave_id_t
 
eid
, 
¨r
[4])

517 
sgx_°©us_t
 
°©us
;

518 
ms_eˇŒ_¨øy_ö_t
 
ms
;

519 
ms
.
ms_¨r
 = (*)
¨r
;

520 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 22, &
oˇŒ_èbÀ_En˛ave
, &
ms
);

521  
°©us
;

522 
	}
}

524 
sgx_°©us_t
 
	$eˇŒ_¨øy_out
(
sgx_í˛ave_id_t
 
eid
, 
¨r
[4])

526 
sgx_°©us_t
 
°©us
;

527 
ms_eˇŒ_¨øy_out_t
 
ms
;

528 
ms
.
ms_¨r
 = (*)
¨r
;

529 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 23, &
oˇŒ_èbÀ_En˛ave
, &
ms
);

530  
°©us
;

531 
	}
}

533 
sgx_°©us_t
 
	$eˇŒ_¨øy_ö_out
(
sgx_í˛ave_id_t
 
eid
, 
¨r
[4])

535 
sgx_°©us_t
 
°©us
;

536 
ms_eˇŒ_¨øy_ö_out_t
 
ms
;

537 
ms
.
ms_¨r
 = (*)
¨r
;

538 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 24, &
oˇŒ_èbÀ_En˛ave
, &
ms
);

539  
°©us
;

540 
	}
}

542 
sgx_°©us_t
 
	$eˇŒ_¨øy_ißry
(
sgx_í˛ave_id_t
 
eid
, 
¨øy_t
 
¨r
)

544 
sgx_°©us_t
 
°©us
;

545 
ms_eˇŒ_¨øy_ißry_t
 
ms
;

546 
ms
.
ms_¨r
 = (
¨øy_t
 *)&
¨r
[0];

547 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 25, &
oˇŒ_èbÀ_En˛ave
, &
ms
);

548  
°©us
;

549 
	}
}

551 
sgx_°©us_t
 
	$eˇŒ_fun˘i⁄_ˇŒög_c⁄vs
(
sgx_í˛ave_id_t
 
eid
)

553 
sgx_°©us_t
 
°©us
;

554 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 26, &
oˇŒ_èbÀ_En˛ave
, 
NULL
);

555  
°©us
;

556 
	}
}

558 
sgx_°©us_t
 
	$eˇŒ_fun˘i⁄_public
(
sgx_í˛ave_id_t
 
eid
)

560 
sgx_°©us_t
 
°©us
;

561 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 27, &
oˇŒ_èbÀ_En˛ave
, 
NULL
);

562  
°©us
;

563 
	}
}

565 
sgx_°©us_t
 
	$eˇŒ_fun˘i⁄_¥iv©e
(
sgx_í˛ave_id_t
 
eid
, * 
ªtvÆ
)

567 
sgx_°©us_t
 
°©us
;

568 
ms_eˇŒ_fun˘i⁄_¥iv©e_t
 
ms
;

569 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 28, &
oˇŒ_èbÀ_En˛ave
, &
ms
);

570 i‡(
°©us
 =
SGX_SUCCESS
 && 
ªtvÆ
Ë*ªtvÆ = 
ms
.
ms_ªtvÆ
;

571  
°©us
;

572 
	}
}

574 
sgx_°©us_t
 
	$eˇŒ_mÆloc_‰ì
(
sgx_í˛ave_id_t
 
eid
)

576 
sgx_°©us_t
 
°©us
;

577 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 29, &
oˇŒ_èbÀ_En˛ave
, 
NULL
);

578  
°©us
;

579 
	}
}

581 
sgx_°©us_t
 
	$eˇŒ_sgx_˝uid
(
sgx_í˛ave_id_t
 
eid
, 
˝uöfo
[4], 
Àaf
)

583 
sgx_°©us_t
 
°©us
;

584 
ms_eˇŒ_sgx_˝uid_t
 
ms
;

585 
ms
.
ms_˝uöfo
 = (*)
˝uöfo
;

586 
ms
.
ms_Àaf
 = 
Àaf
;

587 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 30, &
oˇŒ_èbÀ_En˛ave
, &
ms
);

588  
°©us
;

589 
	}
}

591 
sgx_°©us_t
 
	$eˇŒ_ex˚±i⁄
(
sgx_í˛ave_id_t
 
eid
)

593 
sgx_°©us_t
 
°©us
;

594 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 31, &
oˇŒ_èbÀ_En˛ave
, 
NULL
);

595  
°©us
;

596 
	}
}

598 
sgx_°©us_t
 
	$eˇŒ_m≠
(
sgx_í˛ave_id_t
 
eid
)

600 
sgx_°©us_t
 
°©us
;

601 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 32, &
oˇŒ_èbÀ_En˛ave
, 
NULL
);

602  
°©us
;

603 
	}
}

605 
sgx_°©us_t
 
	$eˇŒ_ö¸ó£_cou¡î
(
sgx_í˛ave_id_t
 
eid
, 
size_t
* 
ªtvÆ
)

607 
sgx_°©us_t
 
°©us
;

608 
ms_eˇŒ_ö¸ó£_cou¡î_t
 
ms
;

609 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 33, &
oˇŒ_èbÀ_En˛ave
, &
ms
);

610 i‡(
°©us
 =
SGX_SUCCESS
 && 
ªtvÆ
Ë*ªtvÆ = 
ms
.
ms_ªtvÆ
;

611  
°©us
;

612 
	}
}

614 
sgx_°©us_t
 
	$eˇŒ_¥odu˚r
(
sgx_í˛ave_id_t
 
eid
)

616 
sgx_°©us_t
 
°©us
;

617 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 34, &
oˇŒ_èbÀ_En˛ave
, 
NULL
);

618  
°©us
;

619 
	}
}

621 
sgx_°©us_t
 
	$eˇŒ_c⁄sumî
(
sgx_í˛ave_id_t
 
eid
)

623 
sgx_°©us_t
 
°©us
;

624 
°©us
 = 
	`sgx_eˇŒ
(
eid
, 35, &
oˇŒ_èbÀ_En˛ave
, 
NULL
);

625  
°©us
;

626 
	}
}

	@App/Enclave_u.h

1 #i‚de‡
ENCLAVE_U_H__


2 
	#ENCLAVE_U_H__


	)

4 
	~<°döt.h
>

5 
	~<wch¨.h
>

6 
	~<°ddef.h
>

7 
	~<°rög.h
>

8 
	~"sgx_edgî8r.h
"

10 
	~"u£r_ty≥s.h
"

12 
	#SGX_CAST
(
ty≥
, 
ôem
Ë(—y≥)(ôem))

	)

14 #ifde‡
__˝lu•lus


18 
	s°ru˘_foo_t
 {

19 
uöt32_t
 
°ru˘_foo_0
;

20 
uöt64_t
 
°ru˘_foo_1
;

21 } 
	t°ru˘_foo_t
;

23 
	eíum_foo_t
 {

24 
ENUM_FOO_0
 = 0,

25 
ENUM_FOO_1
 = 1,

26 } 
	tíum_foo_t
;

28 
	uuni⁄_foo_t
 {

29 
uöt32_t
 
uni⁄_foo_0
;

30 
uöt32_t
 
uni⁄_foo_1
;

31 
uöt64_t
 
uni⁄_foo_3
;

32 } 
	tuni⁄_foo_t
;

34 
SGX_UBRIDGE
(
SGX_NOCONVENTION
, 
oˇŒ_¥öt_°rög
, (c⁄° * 
°r
));

35 
SGX_UBRIDGE
(
SGX_NOCONVENTION
, 
oˇŒ_gíîic
, (
±r
));

36 
SGX_UBRIDGE
(
SGX_NOCONVENTION
, 
oˇŒ_poöãr_u£r_check
, (* 
vÆ
));

37 
SGX_UBRIDGE
(
SGX_NOCONVENTION
, 
oˇŒ_poöãr_ö
, (* 
vÆ
));

38 
SGX_UBRIDGE
(
SGX_NOCONVENTION
, 
oˇŒ_poöãr_out
, (* 
vÆ
));

39 
SGX_UBRIDGE
(
SGX_NOCONVENTION
, 
oˇŒ_poöãr_ö_out
, (* 
vÆ
));

40 
SGX_DLLIMPORT
 * 
SGX_UBRIDGE
(
SGX_CDECL
, 
memc˝y
, (* 
de°
, c⁄° * 
§c
, 
vÆ
, 
size_t
 
Àn
));

41 
SGX_UBRIDGE
(
SGX_NOCONVENTION
, 
oˇŒ_fun˘i⁄_Ælow
, ());

42 
SGX_UBRIDGE
(
SGX_CDECL
, 
sgx_oc_˝uidex
, (
˝uöfo
[4], 
Àaf
, 
subÀaf
));

43 
SGX_UBRIDGE
(
SGX_CDECL
, 
sgx_thªad_waô_u¡ru°ed_evít_oˇŒ
, (c⁄° * 
£lf
));

44 
SGX_UBRIDGE
(
SGX_CDECL
, 
sgx_thªad_£t_u¡ru°ed_evít_oˇŒ
, (c⁄° * 
waôî
));

45 
SGX_UBRIDGE
(
SGX_CDECL
, 
sgx_thªad_£twaô_u¡ru°ed_evíts_oˇŒ
, (c⁄° * 
waôî
, c⁄° * 
£lf
));

46 
SGX_UBRIDGE
(
SGX_CDECL
, 
sgx_thªad_£t_mu…ùÀ_u¡ru°ed_evíts_oˇŒ
, (c⁄° ** 
waôîs
, 
size_t
 
tŸÆ
));

48 
sgx_°©us_t
 
eˇŒ_maö
(
sgx_í˛ave_id_t
 
eid
);

49 
sgx_°©us_t
 
eˇŒ_big_mÆloc
(
sgx_í˛ave_id_t
 
eid
, * 
ªtvÆ
);

50 
sgx_°©us_t
 
eˇŒ_ty≥_ch¨
(
sgx_í˛ave_id_t
 
eid
, 
vÆ
);

51 
sgx_°©us_t
 
eˇŒ_ty≥_öt
(
sgx_í˛ave_id_t
 
eid
, 
vÆ
);

52 
sgx_°©us_t
 
eˇŒ_ty≥_Êﬂt
(
sgx_í˛ave_id_t
 
eid
, 
vÆ
);

53 
sgx_°©us_t
 
eˇŒ_ty≥_doubÀ
(
sgx_í˛ave_id_t
 
eid
, 
vÆ
);

54 
sgx_°©us_t
 
eˇŒ_ty≥_size_t
(
sgx_í˛ave_id_t
 
eid
, 
size_t
 
vÆ
);

55 
sgx_°©us_t
 
eˇŒ_ty≥_wch¨_t
(
sgx_í˛ave_id_t
 
eid
, 
wch¨_t
 
vÆ
);

56 
sgx_°©us_t
 
eˇŒ_ty≥_°ru˘
(
sgx_í˛ave_id_t
 
eid
, 
°ru˘_foo_t
 
vÆ
);

57 
sgx_°©us_t
 
eˇŒ_ty≥_íum_uni⁄
(
sgx_í˛ave_id_t
 
eid
, 
íum_foo_t
 
vÆ1
, 
uni⁄_foo_t
* 
vÆ2
);

58 
sgx_°©us_t
 
eˇŒ_poöãr_u£r_check
(
sgx_í˛ave_id_t
 
eid
, 
size_t
* 
ªtvÆ
, * 
vÆ
, size_à
sz
);

59 
sgx_°©us_t
 
eˇŒ_poöãr_ö
(
sgx_í˛ave_id_t
 
eid
, * 
vÆ
);

60 
sgx_°©us_t
 
eˇŒ_poöãr_out
(
sgx_í˛ave_id_t
 
eid
, * 
vÆ
);

61 
sgx_°©us_t
 
eˇŒ_poöãr_ö_out
(
sgx_í˛ave_id_t
 
eid
, * 
vÆ
);

62 
sgx_°©us_t
 
eˇŒ_poöãr_°rög
(
sgx_í˛ave_id_t
 
eid
, * 
°r
);

63 
sgx_°©us_t
 
eˇŒ_poöãr_°rög_c⁄°
(
sgx_í˛ave_id_t
 
eid
, c⁄° * 
°r
);

64 
sgx_°©us_t
 
eˇŒ_poöãr_size
(
sgx_í˛ave_id_t
 
eid
, * 
±r
, 
size_t
 
Àn
);

65 
sgx_°©us_t
 
eˇŒ_poöãr_cou¡
(
sgx_í˛ave_id_t
 
eid
, * 
¨r
, 
˙t
);

66 
sgx_°©us_t
 
eˇŒ_poöãr_i•å_ªad⁄ly
(
sgx_í˛ave_id_t
 
eid
, 
buf„r_t
 
buf
, 
size_t
 
Àn
);

67 
sgx_°©us_t
 
eˇŒ_poöãr_sizefunc
(
sgx_í˛ave_id_t
 
eid
, * 
buf
);

68 
sgx_°©us_t
 
oˇŒ_poöãr_©å
(
sgx_í˛ave_id_t
 
eid
);

69 
sgx_°©us_t
 
eˇŒ_¨øy_u£r_check
(
sgx_í˛ave_id_t
 
eid
, 
¨r
[4]);

70 
sgx_°©us_t
 
eˇŒ_¨øy_ö
(
sgx_í˛ave_id_t
 
eid
, 
¨r
[4]);

71 
sgx_°©us_t
 
eˇŒ_¨øy_out
(
sgx_í˛ave_id_t
 
eid
, 
¨r
[4]);

72 
sgx_°©us_t
 
eˇŒ_¨øy_ö_out
(
sgx_í˛ave_id_t
 
eid
, 
¨r
[4]);

73 
sgx_°©us_t
 
eˇŒ_¨øy_ißry
(
sgx_í˛ave_id_t
 
eid
, 
¨øy_t
 
¨r
);

74 
sgx_°©us_t
 
eˇŒ_fun˘i⁄_ˇŒög_c⁄vs
(
sgx_í˛ave_id_t
 
eid
);

75 
sgx_°©us_t
 
eˇŒ_fun˘i⁄_public
(
sgx_í˛ave_id_t
 
eid
);

76 
sgx_°©us_t
 
eˇŒ_fun˘i⁄_¥iv©e
(
sgx_í˛ave_id_t
 
eid
, * 
ªtvÆ
);

77 
sgx_°©us_t
 
eˇŒ_mÆloc_‰ì
(
sgx_í˛ave_id_t
 
eid
);

78 
sgx_°©us_t
 
eˇŒ_sgx_˝uid
(
sgx_í˛ave_id_t
 
eid
, 
˝uöfo
[4], 
Àaf
);

79 
sgx_°©us_t
 
eˇŒ_ex˚±i⁄
(
sgx_í˛ave_id_t
 
eid
);

80 
sgx_°©us_t
 
eˇŒ_m≠
(
sgx_í˛ave_id_t
 
eid
);

81 
sgx_°©us_t
 
eˇŒ_ö¸ó£_cou¡î
(
sgx_í˛ave_id_t
 
eid
, 
size_t
* 
ªtvÆ
);

82 
sgx_°©us_t
 
eˇŒ_¥odu˚r
(
sgx_í˛ave_id_t
 
eid
);

83 
sgx_°©us_t
 
eˇŒ_c⁄sumî
(
sgx_í˛ave_id_t
 
eid
);

85 #ifde‡
__˝lu•lus


	@App/TrustedLibrary/Libc.cpp

26 
	~"../Aµ.h
"

27 
	~"En˛ave_u.h
"

32 
	$eˇŒ_libc_fun˘i⁄s
()

34 
sgx_°©us_t
 
ªt
 = 
SGX_ERROR_UNEXPECTED
;

36 
ªt
 = 
	`eˇŒ_mÆloc_‰ì
(
globÆ_eid
);

37 i‡(
ªt
 !
SGX_SUCCESS
)

38 
	`ab‹t
();

40 
˝uid
[4] = {0x1, 0x0, 0x0, 0x0};

41 
ªt
 = 
	`eˇŒ_sgx_˝uid
(
globÆ_eid
, 
˝uid
, 0x0);

42 i‡(
ªt
 !
SGX_SUCCESS
)

43 
	`ab‹t
();

44 
	}
}

	@App/TrustedLibrary/Libcxx.cpp

25 
	~<°dio.h
>

27 
	~"../Aµ.h
"

28 
	~"En˛ave_u.h
"

33 
	$eˇŒ_libcxx_fun˘i⁄s
()

35 
sgx_°©us_t
 
ªt
 = 
SGX_ERROR_UNEXPECTED
;

37 
ªt
 = 
	`eˇŒ_ex˚±i⁄
(
globÆ_eid
);

38 i‡(
ªt
 !
SGX_SUCCESS
)

39 
	`ab‹t
();

41 
ªt
 = 
	`eˇŒ_m≠
(
globÆ_eid
);

42 i‡(
ªt
 !
SGX_SUCCESS
)

43 
	`ab‹t
();

44 
	}
}

	@App/TrustedLibrary/Thread.cpp

26 
	~<thªad
>

27 
	~<°dio.h
>

28 
usög
 
«me•a˚
 
	g°d
;

30 
	~"../Aµ.h
"

31 
	~"En˛ave_u.h
"

33 
size_t
 
	gcou¡î
 = 0;

35 
	$ö¸ó£_cou¡î
()

37 
size_t
 
˙r
 = 0;

38 
sgx_°©us_t
 
ªt
 = 
SGX_ERROR_UNEXPECTED
;

39 
ªt
 = 
	`eˇŒ_ö¸ó£_cou¡î
(
globÆ_eid
, &
˙r
);

40 i‡(
˙r
 !0Ë
cou¡î
 = cnr;

41 i‡(
ªt
 !
SGX_SUCCESS
)

42 
	`ab‹t
();

43 
	}
}

45 
	$d©a_¥odu˚r
()

47 
sgx_°©us_t
 
ªt
 = 
SGX_ERROR_UNEXPECTED
;

48 
ªt
 = 
	`eˇŒ_¥odu˚r
(
globÆ_eid
);

49 i‡(
ªt
 !
SGX_SUCCESS
)

50 
	`ab‹t
();

51 
	}
}

53 
	$d©a_c⁄sumî
()

55 
sgx_°©us_t
 
ªt
 = 
SGX_ERROR_UNEXPECTED
;

56 
ªt
 = 
	`eˇŒ_c⁄sumî
(
globÆ_eid
);

57 i‡(
ªt
 !
SGX_SUCCESS
)

58 
	`ab‹t
();

59 
	}
}

64 
	$eˇŒ_thªad_fun˘i⁄s
()

66 
thªad
 
	`addî1
(
ö¸ó£_cou¡î
);

67 
thªad
 
	`addî2
(
ö¸ó£_cou¡î
);

68 
thªad
 
	`addî3
(
ö¸ó£_cou¡î
);

69 
thªad
 
	`addî4
(
ö¸ó£_cou¡î
);

71 
addî1
.
	`joö
();

72 
addî2
.
	`joö
();

73 
addî3
.
	`joö
();

74 
addî4
.
	`joö
();

76 
	`as£π
(
cou¡î
 =4*
LOOPS_PER_THREAD
);

78 
	`¥ötf
("Info:ÉxecutingÅhread synchronization,Ölease wait... \n");

80 
thªad
 
	`c⁄sumî1
(
d©a_c⁄sumî
);

81 
thªad
 
	`¥odu˚r0
(
d©a_¥odu˚r
);

82 
thªad
 
	`c⁄sumî2
(
d©a_c⁄sumî
);

83 
thªad
 
	`c⁄sumî3
(
d©a_c⁄sumî
);

84 
thªad
 
	`c⁄sumî4
(
d©a_c⁄sumî
);

86 
c⁄sumî1
.
	`joö
();

87 
c⁄sumî2
.
	`joö
();

88 
c⁄sumî3
.
	`joö
();

89 
c⁄sumî4
.
	`joö
();

90 
¥odu˚r0
.
	`joö
();

91 
	}
}

	@App/functions.h

1 
	~"ö˛udes.h
"

2 * 
	gfun˘i⁄_poöãrs
[] = {

3 
NULL
,

4 (*)
Clo£H™dÀ
,

5 (*)
Cª©ePùe
,

6 (*)
Cª©ePro˚ssW
,

7 (*)
Du∂iˇãH™dÀ
,

8 (*)
FödClo£
,

9 (*)
FödFú°FûeW
,

10 (*)
FödNextFûeW
,

11 (*)
GëCuºítPro˚ss
,

12 (*)
GëFûeAâribuãsW
,

13 (*)
GëFuŒP©hNameW
,

14 (*)
GëLa°Eº‹
,

15 (*)
GëLoˇlTime
,

16 (*)
GëStdH™dÀ
,

17 (*)
Mu…iByãToWideCh¨
,

18 (*)
RódFûe
,

19 (*)
RegClo£Key
,

20 (*)
RegEnumKeyExW
,

21 (*)
RegO≥nKeyExW
,

22 (*)
RegQuîyVÆueExW
,

23 (*)
SëH™dÀInf‹m©i⁄
,

24 (*)
SëLa°Eº‹
,

25 (*)
SÀï
,

26 (*)
Sy°emTimeToFûeTime
,

27 (*)
WSAGëLa°Eº‹
,

28 (*)
WSASèπup
,

29 (*)
WideCh¨ToMu…iByã
,

30 (*)
WrôeFûe
,

31 (*)
__WSAFDIsSë
,

32 (*)
__a¸t_iob_func
 ,

33 (*)
__°dio_comm⁄_vÂrötf
 ,

34 (*)
__°dio_comm⁄_v•rötf
,

35 (*)
__°dio_comm⁄_vssˇnf
,

36 (*)
_©oi64
,

37 (*)
_begöthªad
,

38 (*)
_î∫o
,

39 (*)
_fûío
,

40 (*)
_gmtime64
,

41 (*)
_loˇ…ime64
,

42 (*)
_rmdú
,

43 (*)
_°rdup
,

44 (*)
_was£π
,

45 (*)
_wf›í
,

46 (*)
_w›í
,

47 (*)
_w°©64
,

48 (*)
ac˚±
,

49 (*)
böd
,

50 (*)
˛o£sockë
,

51 (*)
c⁄√˘
,

52 (*)
f˛o£
,

53 (*)
fÊush
,

54 (*)
fgëc
,

55 (*)
fgës
,

56 (*)
Âutc
,

57 (*)
Âuts
,

58 (*)
‰ód
,

59 (*)
f£ek
,

60 (*)
fwrôe
,

61 (*)
gëív
,

62 (*)
gë≥î«me
,

63 (*)
gësock«me
,

64 (*)
gësock›t
,

65 (*)
ht⁄l
,

66 (*)
ht⁄s
,

67 (*)
öë_¡ﬂ
,

68 (*)
io˘lsockë
,

69 (*)
li°í
,

70 (*)
¡ohl
,

71 (*)
¡ohs
,

72 (*)
ønd
,

73 (*)
ªcv
,

74 (*)
ªcv‰om
,

75 (*)
£À˘
,

76 (*)
£nd
,

77 (*)
£ndto
,

78 (*)
£tsock›t
,

79 (*)
shutdown
,

80 (*)
sockë
,

81 (*)
wcsˇt
,

82 (*)
mymÆloc
,

83 (*)
myªÆloc
,

84 (*)
myˇŒoc
,

85 (*)
my‰ì
,

86 (*)
f›í
,

87 (*)
exô
,

	@App/includes.h

4 
	#_begöthªad
 (*)1

	)

8 
	~<time.h
>

9 
	~<dúe˘.h
>

12 #¥agm®
commít
(
lib
, "Ws2_32.lib")

13 #¥agm®
w¨nög
(
dißbÀ
:4996)

17 * 
mymÆloc
(
size_t
);

18 * 
myˇŒoc
(
size_t
, size_t);

19 * 
myªÆloc
(*, 
size_t
);

20 
my‰ì
(*);

	@Enclave/Edger8rSyntax/Arrays.cpp

27 
	~"sgx_åts.h
"

28 
	~"../En˛ave.h
"

29 
	~"En˛ave_t.h
"

34 
	$eˇŒ_¨øy_u£r_check
(
¨r
[4])

36 i‡(
	`sgx_is_outside_í˛ave
(
¨r
, 4 * ()) != 1)

37 
	`ab‹t
();

39 
i
 = 0; i < 4; i++) {

40 
	`as£π
(
¨r
[
i
] == i);

41 
¨r
[
i
] = 3 - i;

43 
	}
}

49 
	$eˇŒ_¨øy_ö
(
¨r
[4])

51 
i
 = 0; i < 4; i++) {

52 
	`as£π
(
¨r
[
i
] == i);

53 
¨r
[
i
] = (3 - i);

55 
	}
}

61 
	$eˇŒ_¨øy_out
(
¨r
[4])

63 
i
 = 0; i < 4; i++) {

65 
	`as£π
(
¨r
[
i
] == 0);

66 
¨r
[
i
] = (3 - i);

68 
	}
}

74 
	$eˇŒ_¨øy_ö_out
(
¨r
[4])

76 
i
 = 0; i < 4; i++) {

77 
	`as£π
(
¨r
[
i
] == i);

78 
¨r
[
i
] = (3 - i);

80 
	}
}

85 
	$eˇŒ_¨øy_ißry
(
¨øy_t
 
¨r
)

87 i‡(
	`sgx_is_outside_í˛ave
(
¨r
, (
¨øy_t
)) != 1)

88 
	`ab‹t
();

90 
n
 = (
¨øy_t
)/(
¨r
[0]);

91 
i
 = 0; i < 
n
; i++) {

92 
	`as£π
(
¨r
[
i
] == i);

93 
¨r
[
i
] = (
n
 - 1 - i);

95 
	}
}

	@Enclave/Edger8rSyntax/Functions.cpp

28 
	~<°rög.h
>

29 
	~<°dio.h
>

31 
	~"../En˛ave.h
"

32 
	~"En˛ave_t.h
"

37 
	$eˇŒ_fun˘i⁄_ˇŒög_c⁄vs
()

39 
sgx_°©us_t
 
ªt
 = 
SGX_ERROR_UNEXPECTED
;

41 
s1
[] = "1234567890";

42 
s2
[] = "0987654321";

44 
buf
[
BUFSIZ
] = {'\0'};

45 
	`mem˝y
(
buf
, 
s1
, 
	`°æí
(s1));

47 
ªt
 = 
	`memc˝y
(
NULL
, 
s1
, 
s2
, '\0', 
	`°æí
(s1));

49 i‡(
ªt
 !
SGX_SUCCESS
)

50 
	`ab‹t
();

51 
	`as£π
(
	`memcmp
(
s1
, 
s2
, 
	`°æí
(s1)) == 0);

54 
	}
}

59 
	$eˇŒ_fun˘i⁄_public
()

61 
sgx_°©us_t
 
ªt
 = 
SGX_ERROR_UNEXPECTED
;

63 
ªt
 = 
	`oˇŒ_fun˘i⁄_Ælow
();

64 i‡(
ªt
 !
SGX_SUCCESS
)

65 
	`ab‹t
();

68 
	}
}

73 
	$eˇŒ_fun˘i⁄_¥iv©e
()

76 
	}
}

	@Enclave/Edger8rSyntax/Pointers.cpp

28 
	~<sys/ty≥s.h
>

29 
	~<°rög.h
>

31 
	~"sgx_åts.h
"

32 
	~"../En˛ave.h
"

33 
	~"En˛ave_t.h
"

38 
öt32_t
 
	$checksum_öã∫Æ
(*
buf
, 
size_t
 
cou¡
)

40 
öt32_t
 
sum
 = 0;

41 
öt16_t
 *
±r
 = (öt16_à*)
buf
;

44 
cou¡
 > 1) {

45 
sum
 = sum + *
±r
++;

46 
cou¡
 = count - 2;

50 i‡(
cou¡
 > 0)

51 
sum
 = sum + *((*)
±r
);

53  ~
sum
;

54 
	}
}

59 
size_t
 
	$eˇŒ_poöãr_u£r_check
(*
vÆ
, 
size_t
 
sz
)

62 i‡(
	`sgx_is_outside_í˛ave
(
vÆ
, 
sz
) != 1)

63 
	`ab‹t
();

65 
tmp
[100] = {0};

66 
size_t
 
Àn
 = 
sz
>100?100:sz;

70 
	`mem˝y
(
tmp
, 
vÆ
, 
Àn
);

72 
öt32_t
 
sum
 = 
	`checksum_öã∫Æ
((*)
tmp
, 
Àn
);

73 
	`¥ötf
("Checksum(0x%p, %zu) = 0x%x\n",

74 
vÆ
, 
Àn
, 
sum
);

77 
	`mem˝y
(
vÆ
, "SGX_SUCCESS", 
Àn
>12?12:len);

79  
Àn
;

80 
	}
}

86 
	$eˇŒ_poöãr_ö
(*
vÆ
)

88 i‡(
	`sgx_is_wôhö_í˛ave
(
vÆ
, ()) != 1)

89 
	`ab‹t
();

90 *
vÆ
 = 1234;

91 
	}
}

96 
	$eˇŒ_poöãr_out
(*
vÆ
)

98 i‡(
	`sgx_is_wôhö_í˛ave
(
vÆ
, ()) != 1)

99 
	`ab‹t
();

100 
	`as£π
(*
vÆ
 == 0);

101 *
vÆ
 = 1234;

102 
	}
}

107 
	$eˇŒ_poöãr_ö_out
(*
vÆ
)

109 i‡(
	`sgx_is_wôhö_í˛ave
(
vÆ
, ()) != 1)

110 
	`ab‹t
();

111 *
vÆ
 = 1234;

112 
	}
}

117 
	$oˇŒ_poöãr_©å
()

119 
sgx_°©us_t
 
ªt
 = 
SGX_ERROR_UNEXPECTED
;

121 
vÆ
 = 0;

122 
ªt
 = 
	`oˇŒ_poöãr_u£r_check
(&
vÆ
);

123 i‡(
ªt
 !
SGX_SUCCESS
)

124 
	`ab‹t
();

126 
vÆ
 = 0;

127 
ªt
 = 
	`oˇŒ_poöãr_ö
(&
vÆ
);

128 i‡(
ªt
 !
SGX_SUCCESS
)

129 
	`ab‹t
();

130 
	`as£π
(
vÆ
 == 0);

132 
vÆ
 = 0;

133 
ªt
 = 
	`oˇŒ_poöãr_out
(&
vÆ
);

134 i‡(
ªt
 !
SGX_SUCCESS
)

135 
	`ab‹t
();

136 
	`as£π
(
vÆ
 == 1234);

138 
vÆ
 = 0;

139 
ªt
 = 
	`oˇŒ_poöãr_ö_out
(&
vÆ
);

140 i‡(
ªt
 !
SGX_SUCCESS
)

141 
	`ab‹t
();

142 
	`as£π
(
vÆ
 == 1234);

145 
	}
}

150 
	$eˇŒ_poöãr_°rög
(*
°r
)

152 
	`°∫˝y
(
°r
, "0987654321", 
	`°æí
(str));

153 
	}
}

158 
	$eˇŒ_poöãr_°rög_c⁄°
(c⁄° *
°r
)

160 * 
ãmp
 = 
√w
 [
	`°æí
(
°r
)];

161 
	`°∫˝y
(
ãmp
, 
°r
, 
	`°æí
(str));

162 
dñëe
 []
ãmp
;

163 
	}
}

168 
	$eˇŒ_poöãr_size
(*
±r
, 
size_t
 
Àn
)

170 
	`°∫˝y
((*)
±r
, "0987654321", 
Àn
);

171 
	}
}

176 
	$eˇŒ_poöãr_cou¡
(*
¨r
, 
˙t
)

178 
i
 = (
˙t
 - 1); i >= 0; i--)

179 
¨r
[
i
] = (
˙t
 - 1 - i);

180 
	}
}

186 
	$eˇŒ_poöãr_i•å_ªad⁄ly
(
buf„r_t
 
buf
, 
size_t
 
Àn
)

188 
	`°∫˝y
((*)
buf
, "0987654321", 
Àn
);

189 
	}
}

194 
size_t
 
	$gë_buf„r_Àn
(c⁄° * 
buf
)

196 ()
buf
;

198 
	}
}

203 
	$eˇŒ_poöãr_sizefunc
(*
buf
)

205 *
tmp
 = (*)
buf
;

206 
i
 = 0; i < 10; i++) {

207 
	`as£π
(
tmp
[
i
] == 0);

208 
tmp
[
i
] = i;

210 
	}
}

	@Enclave/Edger8rSyntax/Types.cpp

28 
	~"sgx_åts.h
"

29 
	~"../En˛ave.h
"

30 
	~"En˛ave_t.h
"

31 
	~<limôs
>

32 
	~<cm©h
>

35 
	#UNUSED
(
vÆ
Ë()(vÆ)

	)

37 
	#ULP
 2

	)

40 
boﬁ
 
	$Æmo°_equÆ
(
x
, 
y
)

44  
°d
::
	`abs
(
x
-
y
Ë<°d::
numîic_limôs
<>::
	`ïsû⁄
(Ë* std::abs(x+yË* 
ULP
;

45 
	}
}

48 
boﬁ
 
	$Æmo°_equÆ
(
x
, 
y
)

52  
°d
::
	`abs
(
x
-
y
Ë<°d::
numîic_limôs
<>::
	`ïsû⁄
(Ë* std::abs(x+yË* 
ULP
;

53 
	}
}

58 
	$eˇŒ_ty≥_ch¨
(
vÆ
)

60 
	`as£π
(
vÆ
 == 0x12);

61 #i‚de‡
DEBUG


62 
	`UNUSED
(
vÆ
);

64 
	}
}

69 
	$eˇŒ_ty≥_öt
(
vÆ
)

71 
	`as£π
(
vÆ
 == 1234);

72 #i‚de‡
DEBUG


73 
	`UNUSED
(
vÆ
);

75 
	}
}

80 
	$eˇŒ_ty≥_Êﬂt
(
vÆ
)

82 
	`as£π
(
	`Æmo°_equÆ
(
vÆ
, ()1234.0));

83 #i‚de‡
DEBUG


84 
	`UNUSED
(
vÆ
);

86 
	}
}

91 
	$eˇŒ_ty≥_doubÀ
(
vÆ
)

93 
	`as£π
(
	`Æmo°_equÆ
(
vÆ
, ()1234.5678));

94 #i‚de‡
DEBUG


95 
	`UNUSED
(
vÆ
);

97 
	}
}

102 
	$eˇŒ_ty≥_size_t
(
size_t
 
vÆ
)

104 
	`as£π
(
vÆ
 =(
size_t
)12345678);

105 #i‚de‡
DEBUG


106 
	`UNUSED
(
vÆ
);

108 
	}
}

113 
	$eˇŒ_ty≥_wch¨_t
(
wch¨_t
 
vÆ
)

115 
	`as£π
(
vÆ
 =(
wch¨_t
)0x1234);

116 #i‚de‡
DEBUG


117 
	`UNUSED
(
vÆ
);

119 
	}
}

124 
	$eˇŒ_ty≥_°ru˘
(
°ru˘_foo_t
 
vÆ
)

126 
	`as£π
(
vÆ
.
°ru˘_foo_0
 == 1234);

127 
	`as£π
(
vÆ
.
°ru˘_foo_1
 == 5678);

128 #i‚de‡
DEBUG


129 
	`UNUSED
(
vÆ
);

131 
	}
}

138 
	$eˇŒ_ty≥_íum_uni⁄
(
íum_foo_t
 
vÆ1
, 
uni⁄_foo_t
 *
vÆ2
)

140 i‡(
	`sgx_is_outside_í˛ave
(
vÆ2
, (
uni⁄_foo_t
)) != 1)

141 
	`ab‹t
();

142 
vÆ2
->
uni⁄_foo_0
 = 1;

143 
vÆ2
->
uni⁄_foo_1
 = 2;

144 
	`as£π
(
vÆ1
 =
ENUM_FOO_0
);

145 #i‚de‡
DEBUG


146 
	`UNUSED
(
vÆ1
);

148 
	}
}

	@Enclave/Enclave.cpp

26 
	~<°d¨g.h
>

27 
	~<°dio.h
>

29 
	~"En˛ave.h
"

30 
	~"En˛ave_t.h
"

46 
	$eˇŒ_maö
()

53 
	`oˇŒ_gíîic
(100);

57 
	}
}

	@Enclave/Enclave.h

26 #i‚de‡
_ENCLAVE_H_


27 
	#_ENCLAVE_H_


	)

29 
	~<°dlib.h
>

30 
	~<as£π.h
>

32 #i‡
deföed
(
__˝lu•lus
)

36 
¥ötf
(c⁄° *
fmt
, ...);

38 #i‡
deföed
(
__˝lu•lus
)

	@Enclave/Enclave_t.c

1 
	~"En˛ave_t.h
"

3 
	~"sgx_åts.h
"

5 
	~<î∫o.h
>

6 
	~<°rög.h
>

7 
	~<°dlib.h
>

9 
	#CHECK_REF_POINTER
(
±r
, 
siz
) do { \

10 i‡(!(
±r
Ë|| ! 
	`sgx_is_outside_í˛ave
(’å), (
siz
))) \

11  
SGX_ERROR_INVALID_PARAMETER
;\

12 } 0)

	)

14 
	#CHECK_UNIQUE_POINTER
(
±r
, 
siz
) do { \

15 i‡((
±r
Ë&& ! 
	`sgx_is_outside_í˛ave
(’å), (
siz
))) \

16  
SGX_ERROR_INVALID_PARAMETER
;\

17 } 0)

	)

21 
	sms_eˇŒ_big_mÆloc_t
 {

22 
	mms_ªtvÆ
;

23 } 
	tms_eˇŒ_big_mÆloc_t
;

25 
	sms_eˇŒ_ty≥_ch¨_t
 {

26 
	mms_vÆ
;

27 } 
	tms_eˇŒ_ty≥_ch¨_t
;

29 
	sms_eˇŒ_ty≥_öt_t
 {

30 
	mms_vÆ
;

31 } 
	tms_eˇŒ_ty≥_öt_t
;

33 
	sms_eˇŒ_ty≥_Êﬂt_t
 {

34 
	mms_vÆ
;

35 } 
	tms_eˇŒ_ty≥_Êﬂt_t
;

37 
	sms_eˇŒ_ty≥_doubÀ_t
 {

38 
	mms_vÆ
;

39 } 
	tms_eˇŒ_ty≥_doubÀ_t
;

41 
	sms_eˇŒ_ty≥_size_t_t
 {

42 
size_t
 
	mms_vÆ
;

43 } 
	tms_eˇŒ_ty≥_size_t_t
;

45 
	sms_eˇŒ_ty≥_wch¨_t_t
 {

46 
wch¨_t
 
	mms_vÆ
;

47 } 
	tms_eˇŒ_ty≥_wch¨_t_t
;

49 
	sms_eˇŒ_ty≥_°ru˘_t
 {

50 
°ru˘_foo_t
 
	mms_vÆ
;

51 } 
	tms_eˇŒ_ty≥_°ru˘_t
;

53 
	sms_eˇŒ_ty≥_íum_uni⁄_t
 {

54 
íum_foo_t
 
	mms_vÆ1
;

55 
uni⁄_foo_t
* 
	mms_vÆ2
;

56 } 
	tms_eˇŒ_ty≥_íum_uni⁄_t
;

58 
	sms_eˇŒ_poöãr_u£r_check_t
 {

59 
size_t
 
	mms_ªtvÆ
;

60 * 
	mms_vÆ
;

61 
size_t
 
	mms_sz
;

62 } 
	tms_eˇŒ_poöãr_u£r_check_t
;

64 
	sms_eˇŒ_poöãr_ö_t
 {

65 * 
	mms_vÆ
;

66 } 
	tms_eˇŒ_poöãr_ö_t
;

68 
	sms_eˇŒ_poöãr_out_t
 {

69 * 
	mms_vÆ
;

70 } 
	tms_eˇŒ_poöãr_out_t
;

72 
	sms_eˇŒ_poöãr_ö_out_t
 {

73 * 
	mms_vÆ
;

74 } 
	tms_eˇŒ_poöãr_ö_out_t
;

76 
	sms_eˇŒ_poöãr_°rög_t
 {

77 * 
	mms_°r
;

78 } 
	tms_eˇŒ_poöãr_°rög_t
;

80 
	sms_eˇŒ_poöãr_°rög_c⁄°_t
 {

81 * 
	mms_°r
;

82 } 
	tms_eˇŒ_poöãr_°rög_c⁄°_t
;

84 
	sms_eˇŒ_poöãr_size_t
 {

85 * 
	mms_±r
;

86 
size_t
 
	mms_Àn
;

87 } 
	tms_eˇŒ_poöãr_size_t
;

89 
	sms_eˇŒ_poöãr_cou¡_t
 {

90 * 
	mms_¨r
;

91 
	mms_˙t
;

92 } 
	tms_eˇŒ_poöãr_cou¡_t
;

94 
	sms_eˇŒ_poöãr_i•å_ªad⁄ly_t
 {

95 
buf„r_t
 
	mms_buf
;

96 
size_t
 
	mms_Àn
;

97 } 
	tms_eˇŒ_poöãr_i•å_ªad⁄ly_t
;

99 
	sms_eˇŒ_poöãr_sizefunc_t
 {

100 * 
	mms_buf
;

101 } 
	tms_eˇŒ_poöãr_sizefunc_t
;

104 
	sms_eˇŒ_¨øy_u£r_check_t
 {

105 * 
	mms_¨r
;

106 } 
	tms_eˇŒ_¨øy_u£r_check_t
;

108 
	sms_eˇŒ_¨øy_ö_t
 {

109 * 
	mms_¨r
;

110 } 
	tms_eˇŒ_¨øy_ö_t
;

112 
	sms_eˇŒ_¨øy_out_t
 {

113 * 
	mms_¨r
;

114 } 
	tms_eˇŒ_¨øy_out_t
;

116 
	sms_eˇŒ_¨øy_ö_out_t
 {

117 * 
	mms_¨r
;

118 } 
	tms_eˇŒ_¨øy_ö_out_t
;

120 
	sms_eˇŒ_¨øy_ißry_t
 {

121 
¨øy_t
* 
	mms_¨r
;

122 } 
	tms_eˇŒ_¨øy_ißry_t
;

126 
	sms_eˇŒ_fun˘i⁄_¥iv©e_t
 {

127 
	mms_ªtvÆ
;

128 } 
	tms_eˇŒ_fun˘i⁄_¥iv©e_t
;

131 
	sms_eˇŒ_sgx_˝uid_t
 {

132 * 
	mms_˝uöfo
;

133 
	mms_Àaf
;

134 } 
	tms_eˇŒ_sgx_˝uid_t
;

138 
	sms_eˇŒ_ö¸ó£_cou¡î_t
 {

139 
size_t
 
	mms_ªtvÆ
;

140 } 
	tms_eˇŒ_ö¸ó£_cou¡î_t
;

144 
	sms_oˇŒ_¥öt_°rög_t
 {

145 * 
	mms_°r
;

146 } 
	tms_oˇŒ_¥öt_°rög_t
;

148 
	sms_oˇŒ_gíîic_t
 {

149 
	mms_ªtvÆ
;

150 
	mms_±r
;

151 } 
	tms_oˇŒ_gíîic_t
;

153 
	sms_oˇŒ_poöãr_u£r_check_t
 {

154 * 
	mms_vÆ
;

155 } 
	tms_oˇŒ_poöãr_u£r_check_t
;

157 
	sms_oˇŒ_poöãr_ö_t
 {

158 * 
	mms_vÆ
;

159 } 
	tms_oˇŒ_poöãr_ö_t
;

161 
	sms_oˇŒ_poöãr_out_t
 {

162 * 
	mms_vÆ
;

163 } 
	tms_oˇŒ_poöãr_out_t
;

165 
	sms_oˇŒ_poöãr_ö_out_t
 {

166 * 
	mms_vÆ
;

167 } 
	tms_oˇŒ_poöãr_ö_out_t
;

169 
	sms_memc˝y_t
 {

170 * 
	mms_ªtvÆ
;

171 * 
	mms_de°
;

172 * 
	mms_§c
;

173 
	mms_vÆ
;

174 
size_t
 
	mms_Àn
;

175 } 
	tms_memc˝y_t
;

178 
	sms_sgx_oc_˝uidex_t
 {

179 * 
	mms_˝uöfo
;

180 
	mms_Àaf
;

181 
	mms_subÀaf
;

182 } 
	tms_sgx_oc_˝uidex_t
;

184 
	sms_sgx_thªad_waô_u¡ru°ed_evít_oˇŒ_t
 {

185 
	mms_ªtvÆ
;

186 * 
	mms_£lf
;

187 } 
	tms_sgx_thªad_waô_u¡ru°ed_evít_oˇŒ_t
;

189 
	sms_sgx_thªad_£t_u¡ru°ed_evít_oˇŒ_t
 {

190 
	mms_ªtvÆ
;

191 * 
	mms_waôî
;

192 } 
	tms_sgx_thªad_£t_u¡ru°ed_evít_oˇŒ_t
;

194 
	sms_sgx_thªad_£twaô_u¡ru°ed_evíts_oˇŒ_t
 {

195 
	mms_ªtvÆ
;

196 * 
	mms_waôî
;

197 * 
	mms_£lf
;

198 } 
	tms_sgx_thªad_£twaô_u¡ru°ed_evíts_oˇŒ_t
;

200 
	sms_sgx_thªad_£t_mu…ùÀ_u¡ru°ed_evíts_oˇŒ_t
 {

201 
	mms_ªtvÆ
;

202 ** 
	mms_waôîs
;

203 
size_t
 
	mms_tŸÆ
;

204 } 
	tms_sgx_thªad_£t_mu…ùÀ_u¡ru°ed_evíts_oˇŒ_t
;

206 #ifde‡
_MSC_VER


207 #¥agm®
w¨nög
(
push
)

208 #¥agm®
w¨nög
(
dißbÀ
: 4127)

209 #¥agm®
w¨nög
(
dißbÀ
: 4200)

212 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_maö
(* 
pms
)

214 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

215 i‡(
pms
 !
NULL
Ë 
SGX_ERROR_INVALID_PARAMETER
;

216 
	`eˇŒ_maö
();

217  
°©us
;

218 
	}
}

220 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_big_mÆloc
(* 
pms
)

222 
ms_eˇŒ_big_mÆloc_t
* 
ms
 = 
	`SGX_CAST
(ms_eˇŒ_big_mÆloc_t*, 
pms
);

223 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

225 
	`CHECK_REF_POINTER
(
pms
, (
ms_eˇŒ_big_mÆloc_t
));

227 
ms
->
ms_ªtvÆ
 = 
	`eˇŒ_big_mÆloc
();

230  
°©us
;

231 
	}
}

233 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_ty≥_ch¨
(* 
pms
)

235 
ms_eˇŒ_ty≥_ch¨_t
* 
ms
 = 
	`SGX_CAST
(ms_eˇŒ_ty≥_ch¨_t*, 
pms
);

236 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

238 
	`CHECK_REF_POINTER
(
pms
, (
ms_eˇŒ_ty≥_ch¨_t
));

240 
	`eˇŒ_ty≥_ch¨
(
ms
->
ms_vÆ
);

243  
°©us
;

244 
	}
}

246 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_ty≥_öt
(* 
pms
)

248 
ms_eˇŒ_ty≥_öt_t
* 
ms
 = 
	`SGX_CAST
(ms_eˇŒ_ty≥_öt_t*, 
pms
);

249 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

251 
	`CHECK_REF_POINTER
(
pms
, (
ms_eˇŒ_ty≥_öt_t
));

253 
	`eˇŒ_ty≥_öt
(
ms
->
ms_vÆ
);

256  
°©us
;

257 
	}
}

259 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_ty≥_Êﬂt
(* 
pms
)

261 
ms_eˇŒ_ty≥_Êﬂt_t
* 
ms
 = 
	`SGX_CAST
(ms_eˇŒ_ty≥_Êﬂt_t*, 
pms
);

262 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

264 
	`CHECK_REF_POINTER
(
pms
, (
ms_eˇŒ_ty≥_Êﬂt_t
));

266 
	`eˇŒ_ty≥_Êﬂt
(
ms
->
ms_vÆ
);

269  
°©us
;

270 
	}
}

272 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_ty≥_doubÀ
(* 
pms
)

274 
ms_eˇŒ_ty≥_doubÀ_t
* 
ms
 = 
	`SGX_CAST
(ms_eˇŒ_ty≥_doubÀ_t*, 
pms
);

275 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

277 
	`CHECK_REF_POINTER
(
pms
, (
ms_eˇŒ_ty≥_doubÀ_t
));

279 
	`eˇŒ_ty≥_doubÀ
(
ms
->
ms_vÆ
);

282  
°©us
;

283 
	}
}

285 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_ty≥_size_t
(* 
pms
)

287 
ms_eˇŒ_ty≥_size_t_t
* 
ms
 = 
	`SGX_CAST
(ms_eˇŒ_ty≥_size_t_t*, 
pms
);

288 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

290 
	`CHECK_REF_POINTER
(
pms
, (
ms_eˇŒ_ty≥_size_t_t
));

292 
	`eˇŒ_ty≥_size_t
(
ms
->
ms_vÆ
);

295  
°©us
;

296 
	}
}

298 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_ty≥_wch¨_t
(* 
pms
)

300 
ms_eˇŒ_ty≥_wch¨_t_t
* 
ms
 = 
	`SGX_CAST
(ms_eˇŒ_ty≥_wch¨_t_t*, 
pms
);

301 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

303 
	`CHECK_REF_POINTER
(
pms
, (
ms_eˇŒ_ty≥_wch¨_t_t
));

305 
	`eˇŒ_ty≥_wch¨_t
(
ms
->
ms_vÆ
);

308  
°©us
;

309 
	}
}

311 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_ty≥_°ru˘
(* 
pms
)

313 
ms_eˇŒ_ty≥_°ru˘_t
* 
ms
 = 
	`SGX_CAST
(ms_eˇŒ_ty≥_°ru˘_t*, 
pms
);

314 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

316 
	`CHECK_REF_POINTER
(
pms
, (
ms_eˇŒ_ty≥_°ru˘_t
));

318 
	`eˇŒ_ty≥_°ru˘
(
ms
->
ms_vÆ
);

321  
°©us
;

322 
	}
}

324 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_ty≥_íum_uni⁄
(* 
pms
)

326 
ms_eˇŒ_ty≥_íum_uni⁄_t
* 
ms
 = 
	`SGX_CAST
(ms_eˇŒ_ty≥_íum_uni⁄_t*, 
pms
);

327 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

328 
uni⁄_foo_t
* 
_tmp_vÆ2
 = 
ms
->
ms_vÆ2
;

330 
	`CHECK_REF_POINTER
(
pms
, (
ms_eˇŒ_ty≥_íum_uni⁄_t
));

332 
	`eˇŒ_ty≥_íum_uni⁄
(
ms
->
ms_vÆ1
, 
_tmp_vÆ2
);

335  
°©us
;

336 
	}
}

338 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_poöãr_u£r_check
(* 
pms
)

340 
ms_eˇŒ_poöãr_u£r_check_t
* 
ms
 = 
	`SGX_CAST
(ms_eˇŒ_poöãr_u£r_check_t*, 
pms
);

341 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

342 * 
_tmp_vÆ
 = 
ms
->
ms_vÆ
;

344 
	`CHECK_REF_POINTER
(
pms
, (
ms_eˇŒ_poöãr_u£r_check_t
));

346 
ms
->
ms_ªtvÆ
 = 
	`eˇŒ_poöãr_u£r_check
(
_tmp_vÆ
, ms->
ms_sz
);

349  
°©us
;

350 
	}
}

352 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_poöãr_ö
(* 
pms
)

354 
ms_eˇŒ_poöãr_ö_t
* 
ms
 = 
	`SGX_CAST
(ms_eˇŒ_poöãr_ö_t*, 
pms
);

355 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

356 * 
_tmp_vÆ
 = 
ms
->
ms_vÆ
;

357 
size_t
 
_Àn_vÆ
 = (*
_tmp_vÆ
);

358 * 
_ö_vÆ
 = 
NULL
;

360 
	`CHECK_REF_POINTER
(
pms
, (
ms_eˇŒ_poöãr_ö_t
));

361 
	`CHECK_UNIQUE_POINTER
(
_tmp_vÆ
, 
_Àn_vÆ
);

363 i‡(
_tmp_vÆ
 !
NULL
) {

364 
_ö_vÆ
 = (*)
	`mÆloc
(
_Àn_vÆ
);

365 i‡(
_ö_vÆ
 =
NULL
) {

366 
°©us
 = 
SGX_ERROR_OUT_OF_MEMORY
;

367 
îr
;

370 
	`mem˝y
(
_ö_vÆ
, 
_tmp_vÆ
, 
_Àn_vÆ
);

372 
	`eˇŒ_poöãr_ö
(
_ö_vÆ
);

373 
îr
:

374 i‡(
_ö_vÆ
Ë
	`‰ì
(_in_val);

376  
°©us
;

377 
	}
}

379 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_poöãr_out
(* 
pms
)

381 
ms_eˇŒ_poöãr_out_t
* 
ms
 = 
	`SGX_CAST
(ms_eˇŒ_poöãr_out_t*, 
pms
);

382 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

383 * 
_tmp_vÆ
 = 
ms
->
ms_vÆ
;

384 
size_t
 
_Àn_vÆ
 = (*
_tmp_vÆ
);

385 * 
_ö_vÆ
 = 
NULL
;

387 
	`CHECK_REF_POINTER
(
pms
, (
ms_eˇŒ_poöãr_out_t
));

388 
	`CHECK_UNIQUE_POINTER
(
_tmp_vÆ
, 
_Àn_vÆ
);

390 i‡(
_tmp_vÆ
 !
NULL
) {

391 i‡((
_ö_vÆ
 = (*)
	`mÆloc
(
_Àn_vÆ
)Ë=
NULL
) {

392 
°©us
 = 
SGX_ERROR_OUT_OF_MEMORY
;

393 
îr
;

396 
	`mem£t
((*)
_ö_vÆ
, 0, 
_Àn_vÆ
);

398 
	`eˇŒ_poöãr_out
(
_ö_vÆ
);

399 
îr
:

400 i‡(
_ö_vÆ
) {

401 
	`mem˝y
(
_tmp_vÆ
, 
_ö_vÆ
, 
_Àn_vÆ
);

402 
	`‰ì
(
_ö_vÆ
);

405  
°©us
;

406 
	}
}

408 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_poöãr_ö_out
(* 
pms
)

410 
ms_eˇŒ_poöãr_ö_out_t
* 
ms
 = 
	`SGX_CAST
(ms_eˇŒ_poöãr_ö_out_t*, 
pms
);

411 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

412 * 
_tmp_vÆ
 = 
ms
->
ms_vÆ
;

413 
size_t
 
_Àn_vÆ
 = (*
_tmp_vÆ
);

414 * 
_ö_vÆ
 = 
NULL
;

416 
	`CHECK_REF_POINTER
(
pms
, (
ms_eˇŒ_poöãr_ö_out_t
));

417 
	`CHECK_UNIQUE_POINTER
(
_tmp_vÆ
, 
_Àn_vÆ
);

419 i‡(
_tmp_vÆ
 !
NULL
) {

420 
_ö_vÆ
 = (*)
	`mÆloc
(
_Àn_vÆ
);

421 i‡(
_ö_vÆ
 =
NULL
) {

422 
°©us
 = 
SGX_ERROR_OUT_OF_MEMORY
;

423 
îr
;

426 
	`mem˝y
(
_ö_vÆ
, 
_tmp_vÆ
, 
_Àn_vÆ
);

428 
	`eˇŒ_poöãr_ö_out
(
_ö_vÆ
);

429 
îr
:

430 i‡(
_ö_vÆ
) {

431 
	`mem˝y
(
_tmp_vÆ
, 
_ö_vÆ
, 
_Àn_vÆ
);

432 
	`‰ì
(
_ö_vÆ
);

435  
°©us
;

436 
	}
}

438 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_poöãr_°rög
(* 
pms
)

440 
ms_eˇŒ_poöãr_°rög_t
* 
ms
 = 
	`SGX_CAST
(ms_eˇŒ_poöãr_°rög_t*, 
pms
);

441 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

442 * 
_tmp_°r
 = 
ms
->
ms_°r
;

443 
size_t
 
_Àn_°r
 = 
_tmp_°r
 ? 
	`°æí
(_tmp_str) + 1 : 0;

444 * 
_ö_°r
 = 
NULL
;

446 
	`CHECK_REF_POINTER
(
pms
, (
ms_eˇŒ_poöãr_°rög_t
));

447 
	`CHECK_UNIQUE_POINTER
(
_tmp_°r
, 
_Àn_°r
);

449 i‡(
_tmp_°r
 !
NULL
) {

450 
_ö_°r
 = (*)
	`mÆloc
(
_Àn_°r
);

451 i‡(
_ö_°r
 =
NULL
) {

452 
°©us
 = 
SGX_ERROR_OUT_OF_MEMORY
;

453 
îr
;

456 
	`mem˝y
(
_ö_°r
, 
_tmp_°r
, 
_Àn_°r
);

457 
_ö_°r
[
_Àn_°r
 - 1] = '\0';

459 
	`eˇŒ_poöãr_°rög
(
_ö_°r
);

460 
îr
:

461 i‡(
_ö_°r
) {

462 
	`mem˝y
(
_tmp_°r
, 
_ö_°r
, 
_Àn_°r
);

463 
	`‰ì
(
_ö_°r
);

466  
°©us
;

467 
	}
}

469 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_poöãr_°rög_c⁄°
(* 
pms
)

471 
ms_eˇŒ_poöãr_°rög_c⁄°_t
* 
ms
 = 
	`SGX_CAST
(ms_eˇŒ_poöãr_°rög_c⁄°_t*, 
pms
);

472 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

473 * 
_tmp_°r
 = 
ms
->
ms_°r
;

474 
size_t
 
_Àn_°r
 = 
_tmp_°r
 ? 
	`°æí
(_tmp_str) + 1 : 0;

475 * 
_ö_°r
 = 
NULL
;

477 
	`CHECK_REF_POINTER
(
pms
, (
ms_eˇŒ_poöãr_°rög_c⁄°_t
));

478 
	`CHECK_UNIQUE_POINTER
(
_tmp_°r
, 
_Àn_°r
);

480 i‡(
_tmp_°r
 !
NULL
) {

481 
_ö_°r
 = (*)
	`mÆloc
(
_Àn_°r
);

482 i‡(
_ö_°r
 =
NULL
) {

483 
°©us
 = 
SGX_ERROR_OUT_OF_MEMORY
;

484 
îr
;

487 
	`mem˝y
((*)
_ö_°r
, 
_tmp_°r
, 
_Àn_°r
);

488 
_ö_°r
[
_Àn_°r
 - 1] = '\0';

490 
	`eˇŒ_poöãr_°rög_c⁄°
((c⁄° *)
_ö_°r
);

491 
îr
:

492 i‡(
_ö_°r
Ë
	`‰ì
((*)_in_str);

494  
°©us
;

495 
	}
}

497 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_poöãr_size
(* 
pms
)

499 
ms_eˇŒ_poöãr_size_t
* 
ms
 = 
	`SGX_CAST
(ms_eˇŒ_poöãr_size_t*, 
pms
);

500 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

501 * 
_tmp_±r
 = 
ms
->
ms_±r
;

502 
size_t
 
_tmp_Àn
 = 
ms
->
ms_Àn
;

503 
size_t
 
_Àn_±r
 = 
_tmp_Àn
;

504 * 
_ö_±r
 = 
NULL
;

506 
	`CHECK_REF_POINTER
(
pms
, (
ms_eˇŒ_poöãr_size_t
));

507 
	`CHECK_UNIQUE_POINTER
(
_tmp_±r
, 
_Àn_±r
);

509 i‡(
_tmp_±r
 !
NULL
) {

510 
_ö_±r
 = (*)
	`mÆloc
(
_Àn_±r
);

511 i‡(
_ö_±r
 =
NULL
) {

512 
°©us
 = 
SGX_ERROR_OUT_OF_MEMORY
;

513 
îr
;

516 
	`mem˝y
(
_ö_±r
, 
_tmp_±r
, 
_Àn_±r
);

518 
	`eˇŒ_poöãr_size
(
_ö_±r
, 
_tmp_Àn
);

519 
îr
:

520 i‡(
_ö_±r
) {

521 
	`mem˝y
(
_tmp_±r
, 
_ö_±r
, 
_Àn_±r
);

522 
	`‰ì
(
_ö_±r
);

525  
°©us
;

526 
	}
}

528 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_poöãr_cou¡
(* 
pms
)

530 
ms_eˇŒ_poöãr_cou¡_t
* 
ms
 = 
	`SGX_CAST
(ms_eˇŒ_poöãr_cou¡_t*, 
pms
);

531 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

532 * 
_tmp_¨r
 = 
ms
->
ms_¨r
;

533 
_tmp_˙t
 = 
ms
->
ms_˙t
;

534 
size_t
 
_Àn_¨r
 = 
_tmp_˙t
 * (*
_tmp_¨r
);

535 * 
_ö_¨r
 = 
NULL
;

537 i‡((
size_t
)
_tmp_˙t
 > (
SIZE_MAX
 / (*
_tmp_¨r
))) {

538 
°©us
 = 
SGX_ERROR_INVALID_PARAMETER
;

539 
îr
;

542 
	`CHECK_REF_POINTER
(
pms
, (
ms_eˇŒ_poöãr_cou¡_t
));

543 
	`CHECK_UNIQUE_POINTER
(
_tmp_¨r
, 
_Àn_¨r
);

545 i‡(
_tmp_¨r
 !
NULL
) {

546 
_ö_¨r
 = (*)
	`mÆloc
(
_Àn_¨r
);

547 i‡(
_ö_¨r
 =
NULL
) {

548 
°©us
 = 
SGX_ERROR_OUT_OF_MEMORY
;

549 
îr
;

552 
	`mem˝y
(
_ö_¨r
, 
_tmp_¨r
, 
_Àn_¨r
);

554 
	`eˇŒ_poöãr_cou¡
(
_ö_¨r
, 
_tmp_˙t
);

555 
îr
:

556 i‡(
_ö_¨r
) {

557 
	`mem˝y
(
_tmp_¨r
, 
_ö_¨r
, 
_Àn_¨r
);

558 
	`‰ì
(
_ö_¨r
);

561  
°©us
;

562 
	}
}

564 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_poöãr_i•å_ªad⁄ly
(* 
pms
)

566 
ms_eˇŒ_poöãr_i•å_ªad⁄ly_t
* 
ms
 = 
	`SGX_CAST
(ms_eˇŒ_poöãr_i•å_ªad⁄ly_t*, 
pms
);

567 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

568 
buf„r_t
 
_tmp_buf
 = 
ms
->
ms_buf
;

569 
size_t
 
_tmp_Àn
 = 
ms
->
ms_Àn
;

570 
size_t
 
_Àn_buf
 = 
_tmp_Àn
;

571 
buf„r_t
 
_ö_buf
 = 
NULL
;

573 
	`CHECK_REF_POINTER
(
pms
, (
ms_eˇŒ_poöãr_i•å_ªad⁄ly_t
));

574 
	`CHECK_UNIQUE_POINTER
(
_tmp_buf
, 
_Àn_buf
);

576 i‡(
_tmp_buf
 !
NULL
) {

577 
_ö_buf
 = (
buf„r_t
)
	`mÆloc
(
_Àn_buf
);

578 i‡(
_ö_buf
 =
NULL
) {

579 
°©us
 = 
SGX_ERROR_OUT_OF_MEMORY
;

580 
îr
;

583 
	`mem˝y
((*)
_ö_buf
, 
_tmp_buf
, 
_Àn_buf
);

585 
	`eˇŒ_poöãr_i•å_ªad⁄ly
(
_ö_buf
, 
_tmp_Àn
);

586 
îr
:

587 i‡(
_ö_buf
Ë
	`‰ì
((*)_in_buf);

589  
°©us
;

590 
	}
}

592 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_poöãr_sizefunc
(* 
pms
)

594 
ms_eˇŒ_poöãr_sizefunc_t
* 
ms
 = 
	`SGX_CAST
(ms_eˇŒ_poöãr_sizefunc_t*, 
pms
);

595 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

596 * 
_tmp_buf
 = 
ms
->
ms_buf
;

597 
size_t
 
_Àn_buf
 = ((
_tmp_buf
Ë? 
	`gë_buf„r_Àn
(_tmp_buf) : 0);

598 * 
_ö_buf
 = 
NULL
;

600 
	`CHECK_REF_POINTER
(
pms
, (
ms_eˇŒ_poöãr_sizefunc_t
));

601 
	`CHECK_UNIQUE_POINTER
(
_tmp_buf
, 
_Àn_buf
);

603 i‡(
_tmp_buf
 !
NULL
) {

604 
_ö_buf
 = (*)
	`mÆloc
(
_Àn_buf
);

605 i‡(
_ö_buf
 =
NULL
) {

606 
°©us
 = 
SGX_ERROR_OUT_OF_MEMORY
;

607 
îr
;

610 
	`mem˝y
(
_ö_buf
, 
_tmp_buf
, 
_Àn_buf
);

613 i‡(
	`gë_buf„r_Àn
(
_ö_buf
Ë!
_Àn_buf
) {

614 
°©us
 = 
SGX_ERROR_INVALID_PARAMETER
;

615 
îr
;

618 
	`eˇŒ_poöãr_sizefunc
(
_ö_buf
);

619 
îr
:

620 i‡(
_ö_buf
) {

621 
	`mem˝y
(
_tmp_buf
, 
_ö_buf
, 
_Àn_buf
);

622 
	`‰ì
(
_ö_buf
);

625  
°©us
;

626 
	}
}

628 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_oˇŒ_poöãr_©å
(* 
pms
)

630 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

631 i‡(
pms
 !
NULL
Ë 
SGX_ERROR_INVALID_PARAMETER
;

632 
	`oˇŒ_poöãr_©å
();

633  
°©us
;

634 
	}
}

636 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_¨øy_u£r_check
(* 
pms
)

638 
ms_eˇŒ_¨øy_u£r_check_t
* 
ms
 = 
	`SGX_CAST
(ms_eˇŒ_¨øy_u£r_check_t*, 
pms
);

639 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

640 * 
_tmp_¨r
 = 
ms
->
ms_¨r
;

642 
	`CHECK_REF_POINTER
(
pms
, (
ms_eˇŒ_¨øy_u£r_check_t
));

644 
	`eˇŒ_¨øy_u£r_check
(
_tmp_¨r
);

647  
°©us
;

648 
	}
}

650 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_¨øy_ö
(* 
pms
)

652 
ms_eˇŒ_¨øy_ö_t
* 
ms
 = 
	`SGX_CAST
(ms_eˇŒ_¨øy_ö_t*, 
pms
);

653 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

654 * 
_tmp_¨r
 = 
ms
->
ms_¨r
;

655 
size_t
 
_Àn_¨r
 = 4 * (*
_tmp_¨r
);

656 * 
_ö_¨r
 = 
NULL
;

658 
	`CHECK_REF_POINTER
(
pms
, (
ms_eˇŒ_¨øy_ö_t
));

659 
	`CHECK_UNIQUE_POINTER
(
_tmp_¨r
, 
_Àn_¨r
);

661 i‡(
_tmp_¨r
 !
NULL
) {

662 
_ö_¨r
 = (*)
	`mÆloc
(
_Àn_¨r
);

663 i‡(
_ö_¨r
 =
NULL
) {

664 
°©us
 = 
SGX_ERROR_OUT_OF_MEMORY
;

665 
îr
;

668 
	`mem˝y
(
_ö_¨r
, 
_tmp_¨r
, 
_Àn_¨r
);

670 
	`eˇŒ_¨øy_ö
(
_ö_¨r
);

671 
îr
:

672 i‡(
_ö_¨r
Ë
	`‰ì
(_in_arr);

674  
°©us
;

675 
	}
}

677 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_¨øy_out
(* 
pms
)

679 
ms_eˇŒ_¨øy_out_t
* 
ms
 = 
	`SGX_CAST
(ms_eˇŒ_¨øy_out_t*, 
pms
);

680 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

681 * 
_tmp_¨r
 = 
ms
->
ms_¨r
;

682 
size_t
 
_Àn_¨r
 = 4 * (*
_tmp_¨r
);

683 * 
_ö_¨r
 = 
NULL
;

685 
	`CHECK_REF_POINTER
(
pms
, (
ms_eˇŒ_¨øy_out_t
));

686 
	`CHECK_UNIQUE_POINTER
(
_tmp_¨r
, 
_Àn_¨r
);

688 i‡(
_tmp_¨r
 !
NULL
) {

689 i‡((
_ö_¨r
 = (*)
	`mÆloc
(
_Àn_¨r
)Ë=
NULL
) {

690 
°©us
 = 
SGX_ERROR_OUT_OF_MEMORY
;

691 
îr
;

694 
	`mem£t
((*)
_ö_¨r
, 0, 
_Àn_¨r
);

696 
	`eˇŒ_¨øy_out
(
_ö_¨r
);

697 
îr
:

698 i‡(
_ö_¨r
) {

699 
	`mem˝y
(
_tmp_¨r
, 
_ö_¨r
, 
_Àn_¨r
);

700 
	`‰ì
(
_ö_¨r
);

703  
°©us
;

704 
	}
}

706 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_¨øy_ö_out
(* 
pms
)

708 
ms_eˇŒ_¨øy_ö_out_t
* 
ms
 = 
	`SGX_CAST
(ms_eˇŒ_¨øy_ö_out_t*, 
pms
);

709 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

710 * 
_tmp_¨r
 = 
ms
->
ms_¨r
;

711 
size_t
 
_Àn_¨r
 = 4 * (*
_tmp_¨r
);

712 * 
_ö_¨r
 = 
NULL
;

714 
	`CHECK_REF_POINTER
(
pms
, (
ms_eˇŒ_¨øy_ö_out_t
));

715 
	`CHECK_UNIQUE_POINTER
(
_tmp_¨r
, 
_Àn_¨r
);

717 i‡(
_tmp_¨r
 !
NULL
) {

718 
_ö_¨r
 = (*)
	`mÆloc
(
_Àn_¨r
);

719 i‡(
_ö_¨r
 =
NULL
) {

720 
°©us
 = 
SGX_ERROR_OUT_OF_MEMORY
;

721 
îr
;

724 
	`mem˝y
(
_ö_¨r
, 
_tmp_¨r
, 
_Àn_¨r
);

726 
	`eˇŒ_¨øy_ö_out
(
_ö_¨r
);

727 
îr
:

728 i‡(
_ö_¨r
) {

729 
	`mem˝y
(
_tmp_¨r
, 
_ö_¨r
, 
_Àn_¨r
);

730 
	`‰ì
(
_ö_¨r
);

733  
°©us
;

734 
	}
}

736 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_¨øy_ißry
(* 
pms
)

738 
ms_eˇŒ_¨øy_ißry_t
* 
ms
 = 
	`SGX_CAST
(ms_eˇŒ_¨øy_ißry_t*, 
pms
);

739 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

741 
	`CHECK_REF_POINTER
(
pms
, (
ms_eˇŒ_¨øy_ißry_t
));

743 
	`eˇŒ_¨øy_ißry
((
ms
->
ms_¨r
 !
NULL
) ? (*ms->ms_arr) : NULL);

746  
°©us
;

747 
	}
}

749 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_fun˘i⁄_ˇŒög_c⁄vs
(* 
pms
)

751 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

752 i‡(
pms
 !
NULL
Ë 
SGX_ERROR_INVALID_PARAMETER
;

753 
	`eˇŒ_fun˘i⁄_ˇŒög_c⁄vs
();

754  
°©us
;

755 
	}
}

757 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_fun˘i⁄_public
(* 
pms
)

759 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

760 i‡(
pms
 !
NULL
Ë 
SGX_ERROR_INVALID_PARAMETER
;

761 
	`eˇŒ_fun˘i⁄_public
();

762  
°©us
;

763 
	}
}

765 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_fun˘i⁄_¥iv©e
(* 
pms
)

767 
ms_eˇŒ_fun˘i⁄_¥iv©e_t
* 
ms
 = 
	`SGX_CAST
(ms_eˇŒ_fun˘i⁄_¥iv©e_t*, 
pms
);

768 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

770 
	`CHECK_REF_POINTER
(
pms
, (
ms_eˇŒ_fun˘i⁄_¥iv©e_t
));

772 
ms
->
ms_ªtvÆ
 = 
	`eˇŒ_fun˘i⁄_¥iv©e
();

775  
°©us
;

776 
	}
}

778 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_mÆloc_‰ì
(* 
pms
)

780 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

781 i‡(
pms
 !
NULL
Ë 
SGX_ERROR_INVALID_PARAMETER
;

782 
	`eˇŒ_mÆloc_‰ì
();

783  
°©us
;

784 
	}
}

786 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_sgx_˝uid
(* 
pms
)

788 
ms_eˇŒ_sgx_˝uid_t
* 
ms
 = 
	`SGX_CAST
(ms_eˇŒ_sgx_˝uid_t*, 
pms
);

789 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

790 * 
_tmp_˝uöfo
 = 
ms
->
ms_˝uöfo
;

791 
size_t
 
_Àn_˝uöfo
 = 4 * (*
_tmp_˝uöfo
);

792 * 
_ö_˝uöfo
 = 
NULL
;

794 
	`CHECK_REF_POINTER
(
pms
, (
ms_eˇŒ_sgx_˝uid_t
));

795 
	`CHECK_UNIQUE_POINTER
(
_tmp_˝uöfo
, 
_Àn_˝uöfo
);

797 i‡(
_tmp_˝uöfo
 !
NULL
) {

798 
_ö_˝uöfo
 = (*)
	`mÆloc
(
_Àn_˝uöfo
);

799 i‡(
_ö_˝uöfo
 =
NULL
) {

800 
°©us
 = 
SGX_ERROR_OUT_OF_MEMORY
;

801 
îr
;

804 
	`mem˝y
(
_ö_˝uöfo
, 
_tmp_˝uöfo
, 
_Àn_˝uöfo
);

806 
	`eˇŒ_sgx_˝uid
(
_ö_˝uöfo
, 
ms
->
ms_Àaf
);

807 
îr
:

808 i‡(
_ö_˝uöfo
) {

809 
	`mem˝y
(
_tmp_˝uöfo
, 
_ö_˝uöfo
, 
_Àn_˝uöfo
);

810 
	`‰ì
(
_ö_˝uöfo
);

813  
°©us
;

814 
	}
}

816 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_ex˚±i⁄
(* 
pms
)

818 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

819 i‡(
pms
 !
NULL
Ë 
SGX_ERROR_INVALID_PARAMETER
;

820 
	`eˇŒ_ex˚±i⁄
();

821  
°©us
;

822 
	}
}

824 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_m≠
(* 
pms
)

826 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

827 i‡(
pms
 !
NULL
Ë 
SGX_ERROR_INVALID_PARAMETER
;

828 
	`eˇŒ_m≠
();

829  
°©us
;

830 
	}
}

832 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_ö¸ó£_cou¡î
(* 
pms
)

834 
ms_eˇŒ_ö¸ó£_cou¡î_t
* 
ms
 = 
	`SGX_CAST
(ms_eˇŒ_ö¸ó£_cou¡î_t*, 
pms
);

835 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

837 
	`CHECK_REF_POINTER
(
pms
, (
ms_eˇŒ_ö¸ó£_cou¡î_t
));

839 
ms
->
ms_ªtvÆ
 = 
	`eˇŒ_ö¸ó£_cou¡î
();

842  
°©us
;

843 
	}
}

845 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_¥odu˚r
(* 
pms
)

847 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

848 i‡(
pms
 !
NULL
Ë 
SGX_ERROR_INVALID_PARAMETER
;

849 
	`eˇŒ_¥odu˚r
();

850  
°©us
;

851 
	}
}

853 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_eˇŒ_c⁄sumî
(* 
pms
)

855 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

856 i‡(
pms
 !
NULL
Ë 
SGX_ERROR_INVALID_PARAMETER
;

857 
	`eˇŒ_c⁄sumî
();

858  
°©us
;

859 
	}
}

861 
SGX_EXTERNC
 const struct {

862 
size_t
 
	mƒ_eˇŒ
;

863 °ru˘ {* 
	mˇŒ_addr
; 
uöt8_t
 
	mis_¥iv
;} 
	meˇŒ_èbÀ
[36];

864 } 
	gg_eˇŒ_èbÀ
 = {

867 {(*)(
uöçå_t
)
sgx_eˇŒ_maö
, 0},

868 {(*)(
uöçå_t
)
sgx_eˇŒ_big_mÆloc
, 0},

869 {(*)(
uöçå_t
)
sgx_eˇŒ_ty≥_ch¨
, 0},

870 {(*)(
uöçå_t
)
sgx_eˇŒ_ty≥_öt
, 0},

871 {(*)(
uöçå_t
)
sgx_eˇŒ_ty≥_Êﬂt
, 0},

872 {(*)(
uöçå_t
)
sgx_eˇŒ_ty≥_doubÀ
, 0},

873 {(*)(
uöçå_t
)
sgx_eˇŒ_ty≥_size_t
, 0},

874 {(*)(
uöçå_t
)
sgx_eˇŒ_ty≥_wch¨_t
, 0},

875 {(*)(
uöçå_t
)
sgx_eˇŒ_ty≥_°ru˘
, 0},

876 {(*)(
uöçå_t
)
sgx_eˇŒ_ty≥_íum_uni⁄
, 0},

877 {(*)(
uöçå_t
)
sgx_eˇŒ_poöãr_u£r_check
, 0},

878 {(*)(
uöçå_t
)
sgx_eˇŒ_poöãr_ö
, 0},

879 {(*)(
uöçå_t
)
sgx_eˇŒ_poöãr_out
, 0},

880 {(*)(
uöçå_t
)
sgx_eˇŒ_poöãr_ö_out
, 0},

881 {(*)(
uöçå_t
)
sgx_eˇŒ_poöãr_°rög
, 0},

882 {(*)(
uöçå_t
)
sgx_eˇŒ_poöãr_°rög_c⁄°
, 0},

883 {(*)(
uöçå_t
)
sgx_eˇŒ_poöãr_size
, 0},

884 {(*)(
uöçå_t
)
sgx_eˇŒ_poöãr_cou¡
, 0},

885 {(*)(
uöçå_t
)
sgx_eˇŒ_poöãr_i•å_ªad⁄ly
, 0},

886 {(*)(
uöçå_t
)
sgx_eˇŒ_poöãr_sizefunc
, 0},

887 {(*)(
uöçå_t
)
sgx_oˇŒ_poöãr_©å
, 0},

888 {(*)(
uöçå_t
)
sgx_eˇŒ_¨øy_u£r_check
, 0},

889 {(*)(
uöçå_t
)
sgx_eˇŒ_¨øy_ö
, 0},

890 {(*)(
uöçå_t
)
sgx_eˇŒ_¨øy_out
, 0},

891 {(*)(
uöçå_t
)
sgx_eˇŒ_¨øy_ö_out
, 0},

892 {(*)(
uöçå_t
)
sgx_eˇŒ_¨øy_ißry
, 0},

893 {(*)(
uöçå_t
)
sgx_eˇŒ_fun˘i⁄_ˇŒög_c⁄vs
, 0},

894 {(*)(
uöçå_t
)
sgx_eˇŒ_fun˘i⁄_public
, 0},

895 {(*)(
uöçå_t
)
sgx_eˇŒ_fun˘i⁄_¥iv©e
, 1},

896 {(*)(
uöçå_t
)
sgx_eˇŒ_mÆloc_‰ì
, 0},

897 {(*)(
uöçå_t
)
sgx_eˇŒ_sgx_˝uid
, 0},

898 {(*)(
uöçå_t
)
sgx_eˇŒ_ex˚±i⁄
, 0},

899 {(*)(
uöçå_t
)
sgx_eˇŒ_m≠
, 0},

900 {(*)(
uöçå_t
)
sgx_eˇŒ_ö¸ó£_cou¡î
, 0},

901 {(*)(
uöçå_t
)
sgx_eˇŒ_¥odu˚r
, 0},

902 {(*)(
uöçå_t
)
sgx_eˇŒ_c⁄sumî
, 0},

906 
SGX_EXTERNC
 const struct {

907 
size_t
 
	mƒ_oˇŒ
;

908 
uöt8_t
 
	míåy_èbÀ
[13][36];

909 } 
	gg_dyn_íåy_èbÀ
 = {

929 
sgx_°©us_t
 
SGX_CDECL
 
	$oˇŒ_¥öt_°rög
(c⁄° * 
°r
)

931 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

932 
size_t
 
_Àn_°r
 = 
°r
 ? 
	`°æí
(str) + 1 : 0;

934 
ms_oˇŒ_¥öt_°rög_t
* 
ms
 = 
NULL
;

935 
size_t
 
oˇŒoc_size
 = (
ms_oˇŒ_¥öt_°rög_t
);

936 *
__tmp
 = 
NULL
;

938 
oˇŒoc_size
 +(
°r
 !
NULL
 && 
	`sgx_is_wôhö_í˛ave
(°r, 
_Àn_°r
)) ? _len_str : 0;

940 
__tmp
 = 
	`sgx_oˇŒoc
(
oˇŒoc_size
);

941 i‡(
__tmp
 =
NULL
) {

942 
	`sgx_oc‰ì
();

943  
SGX_ERROR_UNEXPECTED
;

945 
ms
 = (
ms_oˇŒ_¥öt_°rög_t
*)
__tmp
;

946 
__tmp
 = (*)((
size_t
)__tm∞+ (
ms_oˇŒ_¥öt_°rög_t
));

948 i‡(
°r
 !
NULL
 && 
	`sgx_is_wôhö_í˛ave
(°r, 
_Àn_°r
)) {

949 
ms
->
ms_°r
 = (*)
__tmp
;

950 
__tmp
 = (*)((
size_t
)__tm∞+ 
_Àn_°r
);

951 
	`mem˝y
((*)
ms
->
ms_°r
, 
°r
, 
_Àn_°r
);

952 } i‡(
°r
 =
NULL
) {

953 
ms
->
ms_°r
 = 
NULL
;

955 
	`sgx_oc‰ì
();

956  
SGX_ERROR_INVALID_PARAMETER
;

959 
°©us
 = 
	`sgx_oˇŒ
(0, 
ms
);

962 
	`sgx_oc‰ì
();

963  
°©us
;

964 
	}
}

966 
sgx_°©us_t
 
SGX_CDECL
 
	$oˇŒ_gíîic
(* 
ªtvÆ
, 
±r
)

968 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

970 
ms_oˇŒ_gíîic_t
* 
ms
 = 
NULL
;

971 
size_t
 
oˇŒoc_size
 = (
ms_oˇŒ_gíîic_t
);

972 *
__tmp
 = 
NULL
;

975 
__tmp
 = 
	`sgx_oˇŒoc
(
oˇŒoc_size
);

976 i‡(
__tmp
 =
NULL
) {

977 
	`sgx_oc‰ì
();

978  
SGX_ERROR_UNEXPECTED
;

980 
ms
 = (
ms_oˇŒ_gíîic_t
*)
__tmp
;

981 
__tmp
 = (*)((
size_t
)__tm∞+ (
ms_oˇŒ_gíîic_t
));

983 
ms
->
ms_±r
 = 
±r
;

984 
°©us
 = 
	`sgx_oˇŒ
(1, 
ms
);

986 i‡(
ªtvÆ
Ë*ªtvÆ = 
ms
->
ms_ªtvÆ
;

988 
	`sgx_oc‰ì
();

989  
°©us
;

990 
	}
}

992 
sgx_°©us_t
 
SGX_CDECL
 
	$oˇŒ_poöãr_u£r_check
(* 
vÆ
)

994 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

996 
ms_oˇŒ_poöãr_u£r_check_t
* 
ms
 = 
NULL
;

997 
size_t
 
oˇŒoc_size
 = (
ms_oˇŒ_poöãr_u£r_check_t
);

998 *
__tmp
 = 
NULL
;

1001 
__tmp
 = 
	`sgx_oˇŒoc
(
oˇŒoc_size
);

1002 i‡(
__tmp
 =
NULL
) {

1003 
	`sgx_oc‰ì
();

1004  
SGX_ERROR_UNEXPECTED
;

1006 
ms
 = (
ms_oˇŒ_poöãr_u£r_check_t
*)
__tmp
;

1007 
__tmp
 = (*)((
size_t
)__tm∞+ (
ms_oˇŒ_poöãr_u£r_check_t
));

1009 
ms
->
ms_vÆ
 = 
	`SGX_CAST
(*, 
vÆ
);

1010 
°©us
 = 
	`sgx_oˇŒ
(2, 
ms
);

1013 
	`sgx_oc‰ì
();

1014  
°©us
;

1015 
	}
}

1017 
sgx_°©us_t
 
SGX_CDECL
 
	$oˇŒ_poöãr_ö
(* 
vÆ
)

1019 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

1020 
size_t
 
_Àn_vÆ
 = (*
vÆ
);

1022 
ms_oˇŒ_poöãr_ö_t
* 
ms
 = 
NULL
;

1023 
size_t
 
oˇŒoc_size
 = (
ms_oˇŒ_poöãr_ö_t
);

1024 *
__tmp
 = 
NULL
;

1026 
oˇŒoc_size
 +(
vÆ
 !
NULL
 && 
	`sgx_is_wôhö_í˛ave
(vÆ, 
_Àn_vÆ
)) ? _len_val : 0;

1028 
__tmp
 = 
	`sgx_oˇŒoc
(
oˇŒoc_size
);

1029 i‡(
__tmp
 =
NULL
) {

1030 
	`sgx_oc‰ì
();

1031  
SGX_ERROR_UNEXPECTED
;

1033 
ms
 = (
ms_oˇŒ_poöãr_ö_t
*)
__tmp
;

1034 
__tmp
 = (*)((
size_t
)__tm∞+ (
ms_oˇŒ_poöãr_ö_t
));

1036 i‡(
vÆ
 !
NULL
 && 
	`sgx_is_wôhö_í˛ave
(vÆ, 
_Àn_vÆ
)) {

1037 
ms
->
ms_vÆ
 = (*)
__tmp
;

1038 
__tmp
 = (*)((
size_t
)__tm∞+ 
_Àn_vÆ
);

1039 
	`mem˝y
(
ms
->
ms_vÆ
, 
vÆ
, 
_Àn_vÆ
);

1040 } i‡(
vÆ
 =
NULL
) {

1041 
ms
->
ms_vÆ
 = 
NULL
;

1043 
	`sgx_oc‰ì
();

1044  
SGX_ERROR_INVALID_PARAMETER
;

1047 
°©us
 = 
	`sgx_oˇŒ
(3, 
ms
);

1050 
	`sgx_oc‰ì
();

1051  
°©us
;

1052 
	}
}

1054 
sgx_°©us_t
 
SGX_CDECL
 
	$oˇŒ_poöãr_out
(* 
vÆ
)

1056 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

1057 
size_t
 
_Àn_vÆ
 = (*
vÆ
);

1059 
ms_oˇŒ_poöãr_out_t
* 
ms
 = 
NULL
;

1060 
size_t
 
oˇŒoc_size
 = (
ms_oˇŒ_poöãr_out_t
);

1061 *
__tmp
 = 
NULL
;

1063 
oˇŒoc_size
 +(
vÆ
 !
NULL
 && 
	`sgx_is_wôhö_í˛ave
(vÆ, 
_Àn_vÆ
)) ? _len_val : 0;

1065 
__tmp
 = 
	`sgx_oˇŒoc
(
oˇŒoc_size
);

1066 i‡(
__tmp
 =
NULL
) {

1067 
	`sgx_oc‰ì
();

1068  
SGX_ERROR_UNEXPECTED
;

1070 
ms
 = (
ms_oˇŒ_poöãr_out_t
*)
__tmp
;

1071 
__tmp
 = (*)((
size_t
)__tm∞+ (
ms_oˇŒ_poöãr_out_t
));

1073 i‡(
vÆ
 !
NULL
 && 
	`sgx_is_wôhö_í˛ave
(vÆ, 
_Àn_vÆ
)) {

1074 
ms
->
ms_vÆ
 = (*)
__tmp
;

1075 
__tmp
 = (*)((
size_t
)__tm∞+ 
_Àn_vÆ
);

1076 
	`mem£t
(
ms
->
ms_vÆ
, 0, 
_Àn_vÆ
);

1077 } i‡(
vÆ
 =
NULL
) {

1078 
ms
->
ms_vÆ
 = 
NULL
;

1080 
	`sgx_oc‰ì
();

1081  
SGX_ERROR_INVALID_PARAMETER
;

1084 
°©us
 = 
	`sgx_oˇŒ
(4, 
ms
);

1086 i‡(
vÆ
Ë
	`mem˝y
((*)vÆ, 
ms
->
ms_vÆ
, 
_Àn_vÆ
);

1088 
	`sgx_oc‰ì
();

1089  
°©us
;

1090 
	}
}

1092 
sgx_°©us_t
 
SGX_CDECL
 
	$oˇŒ_poöãr_ö_out
(* 
vÆ
)

1094 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

1095 
size_t
 
_Àn_vÆ
 = (*
vÆ
);

1097 
ms_oˇŒ_poöãr_ö_out_t
* 
ms
 = 
NULL
;

1098 
size_t
 
oˇŒoc_size
 = (
ms_oˇŒ_poöãr_ö_out_t
);

1099 *
__tmp
 = 
NULL
;

1101 
oˇŒoc_size
 +(
vÆ
 !
NULL
 && 
	`sgx_is_wôhö_í˛ave
(vÆ, 
_Àn_vÆ
)) ? _len_val : 0;

1103 
__tmp
 = 
	`sgx_oˇŒoc
(
oˇŒoc_size
);

1104 i‡(
__tmp
 =
NULL
) {

1105 
	`sgx_oc‰ì
();

1106  
SGX_ERROR_UNEXPECTED
;

1108 
ms
 = (
ms_oˇŒ_poöãr_ö_out_t
*)
__tmp
;

1109 
__tmp
 = (*)((
size_t
)__tm∞+ (
ms_oˇŒ_poöãr_ö_out_t
));

1111 i‡(
vÆ
 !
NULL
 && 
	`sgx_is_wôhö_í˛ave
(vÆ, 
_Àn_vÆ
)) {

1112 
ms
->
ms_vÆ
 = (*)
__tmp
;

1113 
__tmp
 = (*)((
size_t
)__tm∞+ 
_Àn_vÆ
);

1114 
	`mem˝y
(
ms
->
ms_vÆ
, 
vÆ
, 
_Àn_vÆ
);

1115 } i‡(
vÆ
 =
NULL
) {

1116 
ms
->
ms_vÆ
 = 
NULL
;

1118 
	`sgx_oc‰ì
();

1119  
SGX_ERROR_INVALID_PARAMETER
;

1122 
°©us
 = 
	`sgx_oˇŒ
(5, 
ms
);

1124 i‡(
vÆ
Ë
	`mem˝y
((*)vÆ, 
ms
->
ms_vÆ
, 
_Àn_vÆ
);

1126 
	`sgx_oc‰ì
();

1127  
°©us
;

1128 
	}
}

1130 
sgx_°©us_t
 
SGX_CDECL
 
	$memc˝y
(** 
ªtvÆ
, * 
de°
, c⁄° * 
§c
, 
vÆ
, 
size_t
 
Àn
)

1132 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

1133 
size_t
 
_Àn_de°
 = 
Àn
;

1134 
size_t
 
_Àn_§c
 = 
Àn
;

1136 
ms_memc˝y_t
* 
ms
 = 
NULL
;

1137 
size_t
 
oˇŒoc_size
 = (
ms_memc˝y_t
);

1138 *
__tmp
 = 
NULL
;

1140 
oˇŒoc_size
 +(
de°
 !
NULL
 && 
	`sgx_is_wôhö_í˛ave
(de°, 
_Àn_de°
)) ? _len_dest : 0;

1141 
oˇŒoc_size
 +(
§c
 !
NULL
 && 
	`sgx_is_wôhö_í˛ave
(§c, 
_Àn_§c
)) ? _len_src : 0;

1143 
__tmp
 = 
	`sgx_oˇŒoc
(
oˇŒoc_size
);

1144 i‡(
__tmp
 =
NULL
) {

1145 
	`sgx_oc‰ì
();

1146  
SGX_ERROR_UNEXPECTED
;

1148 
ms
 = (
ms_memc˝y_t
*)
__tmp
;

1149 
__tmp
 = (*)((
size_t
)__tm∞+ (
ms_memc˝y_t
));

1151 i‡(
de°
 !
NULL
 && 
	`sgx_is_wôhö_í˛ave
(de°, 
_Àn_de°
)) {

1152 
ms
->
ms_de°
 = (*)
__tmp
;

1153 
__tmp
 = (*)((
size_t
)__tm∞+ 
_Àn_de°
);

1154 
	`mem˝y
(
ms
->
ms_de°
, 
de°
, 
_Àn_de°
);

1155 } i‡(
de°
 =
NULL
) {

1156 
ms
->
ms_de°
 = 
NULL
;

1158 
	`sgx_oc‰ì
();

1159  
SGX_ERROR_INVALID_PARAMETER
;

1162 i‡(
§c
 !
NULL
 && 
	`sgx_is_wôhö_í˛ave
(§c, 
_Àn_§c
)) {

1163 
ms
->
ms_§c
 = (*)
__tmp
;

1164 
__tmp
 = (*)((
size_t
)__tm∞+ 
_Àn_§c
);

1165 
	`mem˝y
((*)
ms
->
ms_§c
, 
§c
, 
_Àn_§c
);

1166 } i‡(
§c
 =
NULL
) {

1167 
ms
->
ms_§c
 = 
NULL
;

1169 
	`sgx_oc‰ì
();

1170  
SGX_ERROR_INVALID_PARAMETER
;

1173 
ms
->
ms_vÆ
 = 
vÆ
;

1174 
ms
->
ms_Àn
 = 
Àn
;

1175 
°©us
 = 
	`sgx_oˇŒ
(6, 
ms
);

1177 i‡(
ªtvÆ
Ë*ªtvÆ = 
ms
->
ms_ªtvÆ
;

1178 i‡(
de°
Ë
	`mem˝y
((*)de°, 
ms
->
ms_de°
, 
_Àn_de°
);

1180 
	`sgx_oc‰ì
();

1181  
°©us
;

1182 
	}
}

1184 
sgx_°©us_t
 
SGX_CDECL
 
	$oˇŒ_fun˘i⁄_Ælow
()

1186 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

1187 
°©us
 = 
	`sgx_oˇŒ
(7, 
NULL
);

1189  
°©us
;

1190 
	}
}

1192 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_oc_˝uidex
(
˝uöfo
[4], 
Àaf
, 
subÀaf
)

1194 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

1195 
size_t
 
_Àn_˝uöfo
 = 4 * (*
˝uöfo
);

1197 
ms_sgx_oc_˝uidex_t
* 
ms
 = 
NULL
;

1198 
size_t
 
oˇŒoc_size
 = (
ms_sgx_oc_˝uidex_t
);

1199 *
__tmp
 = 
NULL
;

1201 
oˇŒoc_size
 +(
˝uöfo
 !
NULL
 && 
	`sgx_is_wôhö_í˛ave
(˝uöfo, 
_Àn_˝uöfo
)) ? _len_cpuinfo : 0;

1203 
__tmp
 = 
	`sgx_oˇŒoc
(
oˇŒoc_size
);

1204 i‡(
__tmp
 =
NULL
) {

1205 
	`sgx_oc‰ì
();

1206  
SGX_ERROR_UNEXPECTED
;

1208 
ms
 = (
ms_sgx_oc_˝uidex_t
*)
__tmp
;

1209 
__tmp
 = (*)((
size_t
)__tm∞+ (
ms_sgx_oc_˝uidex_t
));

1211 i‡(
˝uöfo
 !
NULL
 && 
	`sgx_is_wôhö_í˛ave
(˝uöfo, 
_Àn_˝uöfo
)) {

1212 
ms
->
ms_˝uöfo
 = (*)
__tmp
;

1213 
__tmp
 = (*)((
size_t
)__tm∞+ 
_Àn_˝uöfo
);

1214 
	`mem˝y
(
ms
->
ms_˝uöfo
, 
˝uöfo
, 
_Àn_˝uöfo
);

1215 } i‡(
˝uöfo
 =
NULL
) {

1216 
ms
->
ms_˝uöfo
 = 
NULL
;

1218 
	`sgx_oc‰ì
();

1219  
SGX_ERROR_INVALID_PARAMETER
;

1222 
ms
->
ms_Àaf
 = 
Àaf
;

1223 
ms
->
ms_subÀaf
 = 
subÀaf
;

1224 
°©us
 = 
	`sgx_oˇŒ
(8, 
ms
);

1226 i‡(
˝uöfo
Ë
	`mem˝y
((*)˝uöfo, 
ms
->
ms_˝uöfo
, 
_Àn_˝uöfo
);

1228 
	`sgx_oc‰ì
();

1229  
°©us
;

1230 
	}
}

1232 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_thªad_waô_u¡ru°ed_evít_oˇŒ
(* 
ªtvÆ
, c⁄° * 
£lf
)

1234 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

1236 
ms_sgx_thªad_waô_u¡ru°ed_evít_oˇŒ_t
* 
ms
 = 
NULL
;

1237 
size_t
 
oˇŒoc_size
 = (
ms_sgx_thªad_waô_u¡ru°ed_evít_oˇŒ_t
);

1238 *
__tmp
 = 
NULL
;

1241 
__tmp
 = 
	`sgx_oˇŒoc
(
oˇŒoc_size
);

1242 i‡(
__tmp
 =
NULL
) {

1243 
	`sgx_oc‰ì
();

1244  
SGX_ERROR_UNEXPECTED
;

1246 
ms
 = (
ms_sgx_thªad_waô_u¡ru°ed_evít_oˇŒ_t
*)
__tmp
;

1247 
__tmp
 = (*)((
size_t
)__tm∞+ (
ms_sgx_thªad_waô_u¡ru°ed_evít_oˇŒ_t
));

1249 
ms
->
ms_£lf
 = 
	`SGX_CAST
(*, 
£lf
);

1250 
°©us
 = 
	`sgx_oˇŒ
(9, 
ms
);

1252 i‡(
ªtvÆ
Ë*ªtvÆ = 
ms
->
ms_ªtvÆ
;

1254 
	`sgx_oc‰ì
();

1255  
°©us
;

1256 
	}
}

1258 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_thªad_£t_u¡ru°ed_evít_oˇŒ
(* 
ªtvÆ
, c⁄° * 
waôî
)

1260 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

1262 
ms_sgx_thªad_£t_u¡ru°ed_evít_oˇŒ_t
* 
ms
 = 
NULL
;

1263 
size_t
 
oˇŒoc_size
 = (
ms_sgx_thªad_£t_u¡ru°ed_evít_oˇŒ_t
);

1264 *
__tmp
 = 
NULL
;

1267 
__tmp
 = 
	`sgx_oˇŒoc
(
oˇŒoc_size
);

1268 i‡(
__tmp
 =
NULL
) {

1269 
	`sgx_oc‰ì
();

1270  
SGX_ERROR_UNEXPECTED
;

1272 
ms
 = (
ms_sgx_thªad_£t_u¡ru°ed_evít_oˇŒ_t
*)
__tmp
;

1273 
__tmp
 = (*)((
size_t
)__tm∞+ (
ms_sgx_thªad_£t_u¡ru°ed_evít_oˇŒ_t
));

1275 
ms
->
ms_waôî
 = 
	`SGX_CAST
(*, 
waôî
);

1276 
°©us
 = 
	`sgx_oˇŒ
(10, 
ms
);

1278 i‡(
ªtvÆ
Ë*ªtvÆ = 
ms
->
ms_ªtvÆ
;

1280 
	`sgx_oc‰ì
();

1281  
°©us
;

1282 
	}
}

1284 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_thªad_£twaô_u¡ru°ed_evíts_oˇŒ
(* 
ªtvÆ
, c⁄° * 
waôî
, c⁄° * 
£lf
)

1286 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

1288 
ms_sgx_thªad_£twaô_u¡ru°ed_evíts_oˇŒ_t
* 
ms
 = 
NULL
;

1289 
size_t
 
oˇŒoc_size
 = (
ms_sgx_thªad_£twaô_u¡ru°ed_evíts_oˇŒ_t
);

1290 *
__tmp
 = 
NULL
;

1293 
__tmp
 = 
	`sgx_oˇŒoc
(
oˇŒoc_size
);

1294 i‡(
__tmp
 =
NULL
) {

1295 
	`sgx_oc‰ì
();

1296  
SGX_ERROR_UNEXPECTED
;

1298 
ms
 = (
ms_sgx_thªad_£twaô_u¡ru°ed_evíts_oˇŒ_t
*)
__tmp
;

1299 
__tmp
 = (*)((
size_t
)__tm∞+ (
ms_sgx_thªad_£twaô_u¡ru°ed_evíts_oˇŒ_t
));

1301 
ms
->
ms_waôî
 = 
	`SGX_CAST
(*, 
waôî
);

1302 
ms
->
ms_£lf
 = 
	`SGX_CAST
(*, 
£lf
);

1303 
°©us
 = 
	`sgx_oˇŒ
(11, 
ms
);

1305 i‡(
ªtvÆ
Ë*ªtvÆ = 
ms
->
ms_ªtvÆ
;

1307 
	`sgx_oc‰ì
();

1308  
°©us
;

1309 
	}
}

1311 
sgx_°©us_t
 
SGX_CDECL
 
	$sgx_thªad_£t_mu…ùÀ_u¡ru°ed_evíts_oˇŒ
(* 
ªtvÆ
, c⁄° ** 
waôîs
, 
size_t
 
tŸÆ
)

1313 
sgx_°©us_t
 
°©us
 = 
SGX_SUCCESS
;

1314 
size_t
 
_Àn_waôîs
 = 
tŸÆ
 * (*
waôîs
);

1316 
ms_sgx_thªad_£t_mu…ùÀ_u¡ru°ed_evíts_oˇŒ_t
* 
ms
 = 
NULL
;

1317 
size_t
 
oˇŒoc_size
 = (
ms_sgx_thªad_£t_mu…ùÀ_u¡ru°ed_evíts_oˇŒ_t
);

1318 *
__tmp
 = 
NULL
;

1320 
oˇŒoc_size
 +(
waôîs
 !
NULL
 && 
	`sgx_is_wôhö_í˛ave
(waôîs, 
_Àn_waôîs
)) ? _len_waiters : 0;

1322 
__tmp
 = 
	`sgx_oˇŒoc
(
oˇŒoc_size
);

1323 i‡(
__tmp
 =
NULL
) {

1324 
	`sgx_oc‰ì
();

1325  
SGX_ERROR_UNEXPECTED
;

1327 
ms
 = (
ms_sgx_thªad_£t_mu…ùÀ_u¡ru°ed_evíts_oˇŒ_t
*)
__tmp
;

1328 
__tmp
 = (*)((
size_t
)__tm∞+ (
ms_sgx_thªad_£t_mu…ùÀ_u¡ru°ed_evíts_oˇŒ_t
));

1330 i‡(
waôîs
 !
NULL
 && 
	`sgx_is_wôhö_í˛ave
(waôîs, 
_Àn_waôîs
)) {

1331 
ms
->
ms_waôîs
 = (**)
__tmp
;

1332 
__tmp
 = (*)((
size_t
)__tm∞+ 
_Àn_waôîs
);

1333 
	`mem˝y
((*)
ms
->
ms_waôîs
, 
waôîs
, 
_Àn_waôîs
);

1334 } i‡(
waôîs
 =
NULL
) {

1335 
ms
->
ms_waôîs
 = 
NULL
;

1337 
	`sgx_oc‰ì
();

1338  
SGX_ERROR_INVALID_PARAMETER
;

1341 
ms
->
ms_tŸÆ
 = 
tŸÆ
;

1342 
°©us
 = 
	`sgx_oˇŒ
(12, 
ms
);

1344 i‡(
ªtvÆ
Ë*ªtvÆ = 
ms
->
ms_ªtvÆ
;

1346 
	`sgx_oc‰ì
();

1347  
°©us
;

1348 
	}
}

1350 #ifde‡
_MSC_VER


1351 #¥agm®
w¨nög
(
p›
)

	@Enclave/Enclave_t.h

1 #i‚de‡
ENCLAVE_T_H__


2 
	#ENCLAVE_T_H__


	)

4 
	~<°döt.h
>

5 
	~<wch¨.h
>

6 
	~<°ddef.h
>

7 
	~"sgx_edgî8r.h
"

9 
	~"u£r_ty≥s.h
"

11 
	#SGX_CAST
(
ty≥
, 
ôem
Ë(—y≥)(ôem))

	)

13 #ifde‡
__˝lu•lus


17 
	s°ru˘_foo_t
 {

18 
uöt32_t
 
°ru˘_foo_0
;

19 
uöt64_t
 
°ru˘_foo_1
;

20 } 
	t°ru˘_foo_t
;

22 
	eíum_foo_t
 {

23 
ENUM_FOO_0
 = 0,

24 
ENUM_FOO_1
 = 1,

25 } 
	tíum_foo_t
;

27 
	uuni⁄_foo_t
 {

28 
uöt32_t
 
uni⁄_foo_0
;

29 
uöt32_t
 
uni⁄_foo_1
;

30 
uöt64_t
 
uni⁄_foo_3
;

31 } 
	tuni⁄_foo_t
;

33 
size_t
 
gë_buf„r_Àn
(c⁄° * 
vÆ
);

35 
eˇŒ_maö
();

36 
eˇŒ_big_mÆloc
();

37 
eˇŒ_ty≥_ch¨
(
vÆ
);

38 
eˇŒ_ty≥_öt
(
vÆ
);

39 
eˇŒ_ty≥_Êﬂt
(
vÆ
);

40 
eˇŒ_ty≥_doubÀ
(
vÆ
);

41 
eˇŒ_ty≥_size_t
(
size_t
 
vÆ
);

42 
eˇŒ_ty≥_wch¨_t
(
wch¨_t
 
vÆ
);

43 
eˇŒ_ty≥_°ru˘
(
°ru˘_foo_t
 
vÆ
);

44 
eˇŒ_ty≥_íum_uni⁄
(
íum_foo_t
 
vÆ1
, 
uni⁄_foo_t
* 
vÆ2
);

45 
size_t
 
eˇŒ_poöãr_u£r_check
(* 
vÆ
, size_à
sz
);

46 
eˇŒ_poöãr_ö
(* 
vÆ
);

47 
eˇŒ_poöãr_out
(* 
vÆ
);

48 
eˇŒ_poöãr_ö_out
(* 
vÆ
);

49 
eˇŒ_poöãr_°rög
(* 
°r
);

50 
eˇŒ_poöãr_°rög_c⁄°
(c⁄° * 
°r
);

51 
eˇŒ_poöãr_size
(* 
±r
, 
size_t
 
Àn
);

52 
eˇŒ_poöãr_cou¡
(* 
¨r
, 
˙t
);

53 
eˇŒ_poöãr_i•å_ªad⁄ly
(
buf„r_t
 
buf
, 
size_t
 
Àn
);

54 
eˇŒ_poöãr_sizefunc
(* 
buf
);

55 
oˇŒ_poöãr_©å
();

56 
eˇŒ_¨øy_u£r_check
(
¨r
[4]);

57 
eˇŒ_¨øy_ö
(
¨r
[4]);

58 
eˇŒ_¨øy_out
(
¨r
[4]);

59 
eˇŒ_¨øy_ö_out
(
¨r
[4]);

60 
eˇŒ_¨øy_ißry
(
¨øy_t
 
¨r
);

61 
eˇŒ_fun˘i⁄_ˇŒög_c⁄vs
();

62 
eˇŒ_fun˘i⁄_public
();

63 
eˇŒ_fun˘i⁄_¥iv©e
();

64 
eˇŒ_mÆloc_‰ì
();

65 
eˇŒ_sgx_˝uid
(
˝uöfo
[4], 
Àaf
);

66 
eˇŒ_ex˚±i⁄
();

67 
eˇŒ_m≠
();

68 
size_t
 
eˇŒ_ö¸ó£_cou¡î
();

69 
eˇŒ_¥odu˚r
();

70 
eˇŒ_c⁄sumî
();

72 
sgx_°©us_t
 
SGX_CDECL
 
oˇŒ_¥öt_°rög
(c⁄° * 
°r
);

73 
sgx_°©us_t
 
SGX_CDECL
 
oˇŒ_gíîic
(* 
ªtvÆ
, 
±r
);

74 
sgx_°©us_t
 
SGX_CDECL
 
oˇŒ_poöãr_u£r_check
(* 
vÆ
);

75 
sgx_°©us_t
 
SGX_CDECL
 
oˇŒ_poöãr_ö
(* 
vÆ
);

76 
sgx_°©us_t
 
SGX_CDECL
 
oˇŒ_poöãr_out
(* 
vÆ
);

77 
sgx_°©us_t
 
SGX_CDECL
 
oˇŒ_poöãr_ö_out
(* 
vÆ
);

78 
sgx_°©us_t
 
SGX_CDECL
 
memc˝y
(** 
ªtvÆ
, * 
de°
, c⁄° * 
§c
, 
vÆ
, 
size_t
 
Àn
);

79 
sgx_°©us_t
 
SGX_CDECL
 
oˇŒ_fun˘i⁄_Ælow
();

80 
sgx_°©us_t
 
SGX_CDECL
 
sgx_oc_˝uidex
(
˝uöfo
[4], 
Àaf
, 
subÀaf
);

81 
sgx_°©us_t
 
SGX_CDECL
 
sgx_thªad_waô_u¡ru°ed_evít_oˇŒ
(* 
ªtvÆ
, c⁄° * 
£lf
);

82 
sgx_°©us_t
 
SGX_CDECL
 
sgx_thªad_£t_u¡ru°ed_evít_oˇŒ
(* 
ªtvÆ
, c⁄° * 
waôî
);

83 
sgx_°©us_t
 
SGX_CDECL
 
sgx_thªad_£twaô_u¡ru°ed_evíts_oˇŒ
(* 
ªtvÆ
, c⁄° * 
waôî
, c⁄° * 
£lf
);

84 
sgx_°©us_t
 
SGX_CDECL
 
sgx_thªad_£t_mu…ùÀ_u¡ru°ed_evíts_oˇŒ
(* 
ªtvÆ
, c⁄° ** 
waôîs
, 
size_t
 
tŸÆ
);

86 #ifde‡
__˝lu•lus


	@Enclave/TrustedLibrary/Libc.cpp

26 
	~<°rög.h
>

27 
	~<sgx_˝uid.h
>

29 
	~"sgx_åts.h
"

30 
	~"../En˛ave.h
"

31 
	~"En˛ave_t.h
"

36 
	$eˇŒ_mÆloc_‰ì
()

38 *
±r
 = 
	`mÆloc
(100);

39 
	`as£π
(
±r
 !
NULL
);

40 
	`mem£t
(
±r
, 0x0, 100);

41 
	`‰ì
(
±r
);

42 
	}
}

47 
	$eˇŒ_sgx_˝uid
(
˝uöfo
[4], 
Àaf
)

49 
sgx_°©us_t
 
ªt
 = 
	`sgx_˝uid
(
˝uöfo
, 
Àaf
);

50 i‡(
ªt
 !
SGX_SUCCESS
)

51 
	`ab‹t
();

52 
	}
}

	@Enclave/TrustedLibrary/Libcxx.cpp

26 
	~<c°dlib
>

27 
	~<°rög
>

29 
	~"../En˛ave.h
"

30 
	~"En˛ave_t.h
"

37 
	$eˇŒ_ex˚±i⁄
()

39 
°d
::
°rög
 
foo
 = "foo";

40 
åy
 {

41 
throw
 
°d
::
	`ru¡ime_îr‹
(
foo
);

43 
	`ˇtch
 (
°d
::
ru¡ime_îr‹
 c⁄°& 
e
) {

44 
	`as£π
–
foo
 =
e
.
	`wh©
() );

45 
°d
::
ru¡ime_îr‹
 
	`˛⁄e
("");

46 
˛⁄e
 = 
e
;

47 
	`as£π
(
foo
 =
˛⁄e
.
	`wh©
() );

49 
	`ˇtch
 (...) {

50 
	`as£π
–
Ál£
 );

52 
	}
}

54 
	~<m≠
>

55 
	~<Æg‹ôhm
>

57 
usög
 
«me•a˚
 
	g°d
;

63 
	$eˇŒ_m≠
()

65 
m≠
<, , 
	tÀss
<> > 
	tm≠_t
;

66 
m≠_t
::
	tvÆue_ty≥
 
	tm≠_vÆue
;

67 
m≠_t
 
m
;

69 
m
.
	`ö£π
(
	`m≠_vÆue
('a', 1));

70 
m
.
	`ö£π
(
	`m≠_vÆue
('b', 2));

71 
m
.
	`ö£π
(
	`m≠_vÆue
('c', 3));

72 
m
.
	`ö£π
(
	`m≠_vÆue
('d', 4));

74 
	`as£π
(
m
['a'] == 1);

75 
	`as£π
(
m
['b'] == 2);

76 
	`as£π
(
m
['c'] == 3);

77 
	`as£π
(
m
['d'] == 4);

79 
	`as£π
(
m
.
	`föd
('e'Ë=m.
	`íd
());

82 
	}
}

	@Enclave/TrustedLibrary/Thread.cpp

26 
	~"../En˛ave.h
"

27 
	~"En˛ave_t.h
"

29 
	~<sgx_thªad.h
>

31 
size_t
 
	gglobÆ_cou¡î
 = 0;

32 
sgx_thªad_muãx_t
 
	gglobÆ_muãx
 = 
SGX_THREAD_MUTEX_INITIALIZER
;

34 
	#BUFFER_SIZE
 50

	)

37 
	mbuf
[
BUFFER_SIZE
];

38 
	moccupõd
;

39 
	m√xtö
;

40 
	m√xtout
;

41 
sgx_thªad_muãx_t
 
	mmuãx
;

42 
sgx_thªad_c⁄d_t
 
	mm‹e
;

43 
sgx_thªad_c⁄d_t
 
	mÀss
;

44 } 
	tc⁄d_buf„r_t
;

46 
c⁄d_buf„r_t
 
	gbuf„r
 = {{0, 0, 0, 0, 0, 0}, 0, 0, 0,

47 
SGX_THREAD_MUTEX_INITIALIZER
, 
SGX_THREAD_COND_INITIALIZER
, SGX_THREAD_COND_INITIALIZER};

53 
size_t
 
	$eˇŒ_ö¸ó£_cou¡î
()

55 
size_t
 
ªt
 = 0;

56 
i
 = 0; i < 
LOOPS_PER_THREAD
; i++) {

57 
	`sgx_thªad_muãx_lock
(&
globÆ_muãx
);

59 
size_t
 
tmp
 = 
globÆ_cou¡î
;

60 
globÆ_cou¡î
 = ++
tmp
;

61 i‡(4*
LOOPS_PER_THREAD
 =
globÆ_cou¡î
)

62 
ªt
 = 
globÆ_cou¡î
;

63 
	`sgx_thªad_muãx_u∆ock
(&
globÆ_muãx
);

65  
ªt
;

66 
	}
}

68 
	$eˇŒ_¥odu˚r
()

70 
i
 = 0; i < 4*
LOOPS_PER_THREAD
; i++) {

71 
c⁄d_buf„r_t
 *
b
 = &
buf„r
;

72 
	`sgx_thªad_muãx_lock
(&
b
->
muãx
);

73 
b
->
occupõd
 >
BUFFER_SIZE
)

74 
	`sgx_thªad_c⁄d_waô
(&
b
->
Àss
, &b->
muãx
);

75 
b
->
buf
[b->
√xtö
] = b->nextin;

76 
b
->
√xtö
++;

77 
b
->
√xtö
 %
BUFFER_SIZE
;

78 
b
->
occupõd
++;

79 
	`sgx_thªad_c⁄d_sig«l
(&
b
->
m‹e
);

80 
	`sgx_thªad_muãx_u∆ock
(&
b
->
muãx
);

82 
	}
}

84 
	$eˇŒ_c⁄sumî
()

86 
i
 = 0; i < 
LOOPS_PER_THREAD
; i++) {

87 
c⁄d_buf„r_t
 *
b
 = &
buf„r
;

88 
	`sgx_thªad_muãx_lock
(&
b
->
muãx
);

89 
b
->
occupõd
 <= 0)

90 
	`sgx_thªad_c⁄d_waô
(&
b
->
m‹e
, &b->
muãx
);

91 
b
->
buf
[b->
√xtout
++] = 0;

92 
b
->
√xtout
 %
BUFFER_SIZE
;

93 
b
->
occupõd
--;

94 
	`sgx_thªad_c⁄d_sig«l
(&
b
->
Àss
);

95 
	`sgx_thªad_muãx_u∆ock
(&
b
->
muãx
);

97 
	}
}

	@Enclave/copy_globals.c

1 
_sgx_public_globÆs_°¨t
;

2 
_sgx_public_globÆs_íd
;

3 
¥ötf
 (const *, ...);

5 
	$c›y_globÆs
()

7 * 
°¨t
 = (*)&
_sgx_public_globÆs_°¨t
;

8 * 
°›
 = (*)&
_sgx_public_globÆs_íd
;

9 *
de°
 = (*)0xA0000000000;

11 
°¨t
; sèπ<
°›
; sèπ++, 
de°
++){

13 *
de°
 = *
°¨t
;

16 
	}
}

19 * 
mÆloc
(
size_t
);

20 
	$eˇŒ_big_mÆloc
()

22  ()
	`mÆloc
(4096*32);

23 
	}
}

	@Enclave/hello.c

9 
	~<°dio.h
>

11 
	$maö
() {

12 
	`¥ötf
("Starting web server\n");

15 
	}
}

	@Enclave/library.c

1 
	#_CRT_SECURE_NO_WARNINGS


	)

2 
	~<°rög.h
>

3 
	~<io.h
>

4 
	~<î∫o.h
>

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

7 
	~<˘y≥.h
>

8 
	~<m©h.h
>

11 
	#PUBLIC_LOWER
 (*)0x0

	)

12 
	#PUBLIC_UPPER
 (*)0xffffffffffffffff

	)

13 
	#PRIVATE_LOWER
 (*)0x0

	)

14 
	#PRIVATE_UPPER
 (*)0xffffffffffffffff

	)

21 
	~<wödows.h
>

35 
	$as£π_public
(c⁄° * 
s
){

36 if(
s
 < 
PUBLIC_LOWER
 || s >
PUBLIC_UPPER
){

37 
	`¥ötf
("Publi¯ouào‡boundác˚s†© %p\n", 
s
);

38 
	`exô
(-1);

40 
	}
}

42 
	$as£π_¥iv©e
(c⁄° * 
s
){

43 if(
s
 < 
PRIVATE_LOWER
 || s >
PRIVATE_UPPER
){

44 
	`¥ötf
("Priv©êouào‡boundác˚s†© %p\n", 
s
);

45 
	`exô
(-1);

47 
	}
}

49 
	$gë_í¸y±_Àngth
(c⁄° *
t
, 
size_t
 
n
){

50  
n
*2;

51 
	}
}

53 
	$is_¥iv©e_fûe
(c⁄° * 
∑th
){

54 
Àngth
 = 
	`°æí
(
∑th
);

55 if(
	`°rcmp
(".±xt" , &
∑th
[
Àngth
-5])==0)

58 
	}
}

60 
	$í¸y±
(* 
de°
, c⁄° *
§c
, 
size_t
 
n
 ) {

61 
i
;

62 
i
=0;i<
n
; i++) {

63 
de°
[
i
]='*';

66 
	}
}

68 
	efd_ty≥
 {

69 
	mUNDEFINED
=0, 
	mPUBLIC
, 
	mPRIVATE


72 
fd_ty≥
 
	gfds_ty≥
[2050] = {0};

75 
FILE
* 
	$f›í__wøµî
(c⁄° * 
fûíame
, c⁄° * 
mode
) {

76 
FILE
* 
ªt
 = 
	`f›í
(
fûíame
, 
mode
);

77 if(
	`is_¥iv©e_fûe
(
fûíame
))

78 
fds_ty≥
[
	`_fûío
(
ªt
)] = 
PRIVATE
;

80 
fds_ty≥
[
	`_fûío
(
ªt
)] = 
PUBLIC
;

81  
ªt
;

82 
	}
}

84 
	$f˛o£__wøµî
(
FILE
* 
°ªam
) {

85 
fd
 = 
	`_fûío
(
°ªam
);

86 
ªt
 = 
	`f˛o£
(
°ªam
);

87 i‡(
ªt
==0)

88 
fds_ty≥
[
fd
] = 
UNDEFINED
;

89  
ªt
;

90 
	}
}

92 
size_t
 
	$‰ód__wøµî
–* 
±r
, 
size_t
 
size
, size_à
cou¡
, 
FILE
 * 
°ªam
 ) {

93 
	`as£π_public
(
±r
);

94 
	`as£π_public
((*)
±r
 + 
size
*
cou¡
);

95 
fd_ty≥
 
ty≥
 = 
fds_ty≥
[
	`_fûío
(
°ªam
)];

96 if(
ty≥
 =
UNDEFINED
){

97 
	`¥ötf
("AttemptingÑead on unknown file\n");

98 
	`exô
(-1);

99 }if(
ty≥
 =
PRIVATE
) {

100 
	`¥ötf
("AttemptingÅoÑeadÖrivate file withÖublic_read\n");

101 
	`exô
(-1);

103  
	`‰ód
(
±r
, 
size
, 
cou¡
, 
°ªam
);

104 
	}
}

106 * 
mymÆloc
(
size_t
);

107 
size_t
 
	$‰ód_¥iv©e__wøµî
 ( * 
±r
, 
size_t
 
size
, size_à
cou¡
, 
FILE
 * 
°ªam
 ) {

121 *
public_±r
 = 
	`mymÆloc
(
size
);

122 
fmt
[] = "Pointer from malloc = %p\n";

123 
	`¥ötf
(
fmt
, 
public_±r
);

124 
ªt
 = 
	`‰ód
(
public_±r
, 
size
, 
cou¡
, 
°ªam
);

127 
	`my‰ì
(
public_±r
);

128  
ªt
;

130 
	}
}

	@Enclave/main.c

1 
¥ötf
(const *, ...);

5 
	$dummy
() {

6 
	}
}

10 
	$maö
(){

11 
«me
[100];

16 
	`¥ötf
("Hello world\n");

22 
	}
}

	@Enclave/mongoose.c

1 
	~"m⁄goo£.h
"

2 #ifde‡
MG_MODULE_LINES


10 #i‚de‡
CS_MONGOOSE_SRC_INTERNAL_H_


11 
	#CS_MONGOOSE_SRC_INTERNAL_H_


	)

13 #i‚de‡
MG_MALLOC


14 
	#MG_MALLOC
 
mÆloc


	)

17 #i‚de‡
MG_CALLOC


18 
	#MG_CALLOC
 
ˇŒoc


	)

21 #i‚de‡
MG_REALLOC


22 
	#MG_REALLOC
 
ªÆloc


	)

25 #i‚de‡
MG_FREE


26 
	#MG_FREE
 
‰ì


	)

29 #i‚de‡
MBUF_REALLOC


30 
	#MBUF_REALLOC
 
MG_REALLOC


	)

33 #i‚de‡
MBUF_FREE


34 
	#MBUF_FREE
 
MG_FREE


	)

37 
	#MG_SET_PTRPTR
(
_±r
, 
_v
) \

39 i‡(
_±r
Ë*(_±rË
_v
; \

40 } 0)

	)

42 #i‚de‡
MG_INTERNAL


43 
	#MG_INTERNAL
 

	)

46 #ifde‡
PICOTCP


47 
	#NO_LIBC


	)

48 
	#MG_DISABLE_PFS


	)

55 
	#MG_CTL_MSG_MESSAGE_SIZE
 8192

	)

58 
	gmi¸oFªq
;

59 
	gœ°Time
;

60 
ªadrdtsc
();

63 
	g°¨ãd_cou¡î
 = 0;

64 
	gabsﬁuã_cou¡î
 = 0;

65 
	g°¨t_cou¡î
;

66 
	g°›_cou¡î
;

71 
MG_INTERNAL
 
mg_c⁄√˘i⁄
 *
mg_do_c⁄√˘
(mg_c⁄√˘i⁄ *
nc
,

72 
¥Ÿo
,

73 
sockë_addªss
 *
ß
);

75 
MG_INTERNAL
 
mg_∑r£_addªss
(c⁄° *
°r
, 
sockë_addªss
 *
ß
,

76 *
¥Ÿo
, *
ho°
, 
size_t
 
ho°_Àn
);

77 
MG_INTERNAL
 
mg_ˇŒ
(
mg_c⁄√˘i⁄
 *
nc
,

78 
mg_evít_h™dÀr_t
 
ev_h™dÀr
, 
ev
, *
ev_d©a
);

79 
mg_f‹w¨d
(
mg_c⁄√˘i⁄
 *
‰om
, mg_c⁄√˘i⁄ *
to
);

80 
MG_INTERNAL
 
mg_add_c⁄n
(
mg_mgr
 *
mgr
, 
mg_c⁄√˘i⁄
 *
c
);

81 
MG_INTERNAL
 
mg_ªmove_c⁄n
(
mg_c⁄√˘i⁄
 *
c
);

82 
MG_INTERNAL
 
mg_c⁄√˘i⁄
 *
mg_¸óã_c⁄√˘i⁄
(

83 
mg_mgr
 *
mgr
, 
mg_evít_h™dÀr_t
 
ˇŒback
,

84 
mg_add_sock_›ts
 
›ts
);

85 #ifde‡
_WIN32


87 
to_wch¨
(c⁄° *
∑th
, 
wch¨_t
 *
wbuf
, 
size_t
 
wbuf_Àn
);

90 
	s˘l_msg
 {

91 
mg_evít_h™dÀr_t
 
	mˇŒback
;

92 
	mmesßge
[
MG_CTL_MSG_MESSAGE_SIZE
];

95 #i‡
MG_ENABLE_MQTT


96 
	gmg_mqâ_mesßge
;

97 
MG_INTERNAL
 
∑r£_mqâ
(
mbuf
 *
io
, 
mg_mqâ_mesßge
 *
mm
);

101 *(*
ã°_mÆloc
)(
size_t
 
size
);

102 *(*
ã°_ˇŒoc
)(
size_t
 
cou¡
, size_à
size
);

104 #i‚de‡
MIN


105 
	#MIN
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

108 #i‡
MG_ENABLE_HTTP


109 
	gmg_£rve_hâp_›ts
;

122 
MG_INTERNAL
 
size_t
 
mg_h™dÀ_chunked
(
mg_c⁄√˘i⁄
 *
nc
,

123 
hâp_mesßge
 *
hm
, *
buf
,

124 
size_t
 
bÀn
);

126 
MG_INTERNAL
 
mg_hâp_comm⁄_uæ_∑r£
(c⁄° *
uæ
, c⁄° *
schema
,

127 c⁄° *
schema_és
, *
u£_s¶
,

128 **
u£r
, **
∑ss
, **
addr
,

129 *
p‹t_i
, c⁄° **
∑th
);

131 #i‡
MG_ENABLE_FILESYSTEM


132 
MG_INTERNAL
 
mg_uri_to_loˇl_∑th
(
hâp_mesßge
 *
hm
,

133 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
,

134 **
loˇl_∑th
,

135 
mg_°r
 *
ªmaödî
);

136 
MG_INTERNAL
 
time_t
 
mg_∑r£_d©e_°rög
(c⁄° *
d©ëime
);

137 
MG_INTERNAL
 
mg_is_nŸ_modifõd
(
hâp_mesßge
 *
hm
, 
cs_°©_t
 *
°
);

139 #i‡
MG_ENABLE_HTTP_CGI


140 
MG_INTERNAL
 
mg_h™dÀ_cgi
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
¥og
,

141 c⁄° 
mg_°r
 *
∑th_öfo
,

142 c⁄° 
hâp_mesßge
 *
hm
,

143 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
);

144 
	gmg_hâp_¥Ÿo_d©a_cgi
;

145 
MG_INTERNAL
 
mg_hâp_‰ì_¥Ÿo_d©a_cgi
(
mg_hâp_¥Ÿo_d©a_cgi
 *
d
);

147 #i‡
MG_ENABLE_HTTP_SSI


148 
MG_INTERNAL
 
mg_h™dÀ_ssi_ªque°
(
mg_c⁄√˘i⁄
 *
nc
,

149 
hâp_mesßge
 *
hm
,

150 c⁄° *
∑th
,

151 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
);

153 #i‡
MG_ENABLE_HTTP_WEBDAV


154 
MG_INTERNAL
 
mg_is_dav_ªque°
(c⁄° 
mg_°r
 *
s
);

155 
MG_INTERNAL
 
mg_h™dÀ_¥›föd
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
,

156 
cs_°©_t
 *
°p
, 
hâp_mesßge
 *
hm
,

157 
mg_£rve_hâp_›ts
 *
›ts
);

158 
MG_INTERNAL
 
mg_h™dÀ_lock
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
);

159 
MG_INTERNAL
 
mg_h™dÀ_mkcﬁ
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
,

160 
hâp_mesßge
 *
hm
);

161 
MG_INTERNAL
 
mg_h™dÀ_move
(
mg_c⁄√˘i⁄
 *
c
,

162 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
,

163 c⁄° *
∑th
, 
hâp_mesßge
 *
hm
);

164 
MG_INTERNAL
 
mg_h™dÀ_dñëe
(
mg_c⁄√˘i⁄
 *
nc
,

165 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
,

166 c⁄° *
∑th
);

167 
MG_INTERNAL
 
mg_h™dÀ_put
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
,

168 
hâp_mesßge
 *
hm
);

170 #i‡
MG_ENABLE_HTTP_WEBSOCKET


171 
MG_INTERNAL
 
mg_ws_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
, *
ev_d©a
);

172 
MG_INTERNAL
 
mg_ws_h™dshake
(
mg_c⁄√˘i⁄
 *
nc
,

173 c⁄° 
mg_°r
 *
key
);

177 
MG_INTERNAL
 
mg_gë_î∫o
();

179 
MG_INTERNAL
 
mg_˛o£_c⁄n
(
mg_c⁄√˘i⁄
 *
c⁄n
);

181 
MG_INTERNAL
 
mg_hâp_comm⁄_uæ_∑r£
(c⁄° *
uæ
, c⁄° *
schema
,

182 c⁄° *
schema_és
, *
u£_s¶
,

183 **
u£r
, **
∑ss
, **
addr
,

184 *
p‹t_i
, c⁄° **
∑th
);

186 #i‡
MG_ENABLE_SNTP


187 
MG_INTERNAL
 
mg_¢ç_∑r£_ª∂y
(c⁄° *
buf
, 
Àn
,

188 
mg_¢ç_mesßge
 *
msg
);

192 #ifde‡
MG_MODULE_LINES


200 #i‚de‡
CS_COMMON_CS_DBG_H_


201 
	#CS_COMMON_CS_DBG_H_


	)

205 #i‡
CS_ENABLE_STDIO


206 
	~<°dio.h
>

209 #i‚de‡
CS_ENABLE_DEBUG


210 
	#CS_ENABLE_DEBUG
 0

	)

213 #i‚de‡
CS_LOG_ENABLE_TS_DIFF


214 
	#CS_LOG_ENABLE_TS_DIFF
 0

	)

217 #ifde‡
__˝lu•lus


221 
	ecs_log_Àvñ
 {

222 
LL_NONE
 = -1,

223 
LL_ERROR
 = 0,

224 
LL_WARN
 = 1,

225 
LL_INFO
 = 2,

226 
LL_DEBUG
 = 3,

227 
LL_VERBOSE_DEBUG
 = 4,

229 
_LL_MIN
 = -2,

230 
_LL_MAX
 = 5,

233 
cs_log_£t_Àvñ
(
cs_log_Àvñ
 
Àvñ
);

235 #i‡
CS_ENABLE_STDIO


237 
cs_log_£t_fûe
(
FILE
 *
fûe
);

238 
cs_log_Àvñ
 cs_log_level;

239 
cs_log_¥öt_¥efix
(c⁄° *
func
);

240 
cs_log_¥ötf
(c⁄° *
fmt
, ...);

242 
	#LOG
(
l
, 
x
) \

244 i‡(
cs_log_Àvñ
 >
l
) { \

245 
	`cs_log_¥öt_¥efix
(
__func__
); \

246 
cs_log_¥ötf
 
x
; \

248 } 0)

	)

250 #i‚de‡
CS_NDEBUG


252 
	#DBG
(
x
) \

254 i‡(
cs_log_Àvñ
 >
LL_VERBOSE_DEBUG
) { \

255 
	`cs_log_¥öt_¥efix
(
__func__
); \

256 
cs_log_¥ötf
 
x
; \

258 } 0)

	)

262 
	#DBG
(
x
)

	)

268 
	#LOG
(
l
, 
x
)

	)

269 
	#DBG
(
x
)

	)

273 #ifde‡
__˝lu•lus


278 #ifde‡
MG_MODULE_LINES


288 
	~<°d¨g.h
>

289 
	~<°dio.h
>

293 
cs_log_Àvñ
 cs_log_Àvñ 
	gWEAK
 =

294 #i‡
CS_ENABLE_DEBUG


295 
LL_VERBOSE_DEBUG
;

297 
	gLL_ERROR
;

300 #i‡
CS_ENABLE_STDIO


302 
FILE
 *
cs_log_fûe
 
	gWEAK
 = 
NULL
;

304 #i‡
CS_LOG_ENABLE_TS_DIFF


305 
cs_log_ts
 
	gWEAK
;

308 
	$cs_log_¥öt_¥efix
(c⁄° *
func
Ë
WEAK
;

309 
	$cs_log_¥öt_¥efix
(c⁄° *
func
) {

310 
¥efix
[21];

311 
	`°∫˝y
(
¥efix
, 
func
, 20);

312 
¥efix
[20] = '\0';

313 i‡(
cs_log_fûe
 =
NULL
Ëcs_log_fûê
°dîr
;

314 
	`Ârötf
(
cs_log_fûe
, "%-20†", 
¥efix
);

315 #i‡
CS_LOG_ENABLE_TS_DIFF


317 
now
 = 
	`cs_time
();

318 
	`Ârötf
(
cs_log_fûe
, "%7u ", (Ë((
now
 - 
cs_log_ts
) * 1000000));

319 
cs_log_ts
 = 
now
;

322 
	}
}

324 
	$cs_log_¥ötf
(c⁄° *
fmt
, ...Ë
WEAK
;

325 
	$cs_log_¥ötf
(c⁄° *
fmt
, ...) {

326 
va_li°
 
≠
;

327 
	`va_°¨t
(
≠
, 
fmt
);

328 
	`vÂrötf
(
cs_log_fûe
, 
fmt
, 
≠
);

329 
	`va_íd
(
≠
);

330 
	`Âutc
('\n', 
cs_log_fûe
);

331 
	`fÊush
(
cs_log_fûe
);

332 
	}
}

334 
	$cs_log_£t_fûe
(
FILE
 *
fûe
Ë
WEAK
;

335 
	$cs_log_£t_fûe
(
FILE
 *
fûe
) {

336 
cs_log_fûe
 = 
fûe
;

337 
	}
}

341 
	$cs_log_£t_Àvñ
(
cs_log_Àvñ
 
Àvñ
Ë
WEAK
;

342 
	$cs_log_£t_Àvñ
(
cs_log_Àvñ
 
Àvñ
) {

343 
cs_log_Àvñ
 = 
Àvñ
;

344 #i‡
CS_LOG_ENABLE_TS_DIFF
 && 
CS_ENABLE_STDIO


345 
cs_log_ts
 = 
	`cs_time
();

347 
	}
}

348 #ifde‡
MG_MODULE_LINES


356 #i‚de‡
EXCLUDE_COMMON


360 
	~<°rög.h
>

366 
	#NUM_UPPERCASES
 ('Z' - 'A' + 1)

	)

367 
	#NUM_LETTERS
 (
NUM_UPPERCASES
 * 2)

	)

368 
	#NUM_DIGITS
 ('9' - '0' + 1)

	)

375 
	$cs_ba£64_emô_code
(
cs_ba£64_˘x
 *
˘x
, 
v
) {

376 i‡(
v
 < 
NUM_UPPERCASES
) {

377 
˘x
->
	`b64_putc
(
v
 + 'A', ctx->
u£r_d©a
);

378 } i‡(
v
 < (
NUM_LETTERS
)) {

379 
˘x
->
	`b64_putc
(
v
 - 
NUM_UPPERCASES
 + 'a', ctx->
u£r_d©a
);

380 } i‡(
v
 < (
NUM_LETTERS
 + 
NUM_DIGITS
)) {

381 
˘x
->
	`b64_putc
(
v
 - 
NUM_LETTERS
 + '0', ctx->
u£r_d©a
);

383 
˘x
->
	`b64_putc
(
v
 - 
NUM_LETTERS
 - 
NUM_DIGITS
 == 0 ? '+' : '/',

384 
˘x
->
u£r_d©a
);

386 
	}
}

388 
	$cs_ba£64_emô_chunk
(
cs_ba£64_˘x
 *
˘x
) {

389 
a
, 
b
, 
c
;

391 
a
 = 
˘x
->
chunk
[0];

392 
b
 = 
˘x
->
chunk
[1];

393 
c
 = 
˘x
->
chunk
[2];

395 
	`cs_ba£64_emô_code
(
˘x
, 
a
 >> 2);

396 
	`cs_ba£64_emô_code
(
˘x
, ((
a
 & 3Ë<< 4Ë| (
b
 >> 4));

397 i‡(
˘x
->
chunk_size
 > 1) {

398 
	`cs_ba£64_emô_code
(
˘x
, (
b
 & 15Ë<< 2 | (
c
 >> 6));

400 i‡(
˘x
->
chunk_size
 > 2) {

401 
	`cs_ba£64_emô_code
(
˘x
, 
c
 & 63);

403 
	}
}

405 
	$cs_ba£64_öô
(
cs_ba£64_˘x
 *
˘x
, 
cs_ba£64_putc_t
 
b64_putc
,

406 *
u£r_d©a
) {

407 
˘x
->
chunk_size
 = 0;

408 
˘x
->
b64_putc
 = b64_putc;

409 
˘x
->
u£r_d©a
 = user_data;

410 
	}
}

412 
	$cs_ba£64_upd©e
(
cs_ba£64_˘x
 *
˘x
, c⁄° *
°r
, 
size_t
 
Àn
) {

413 c⁄° *
§c
 = (c⁄° *Ë
°r
;

414 
size_t
 
i
;

415 
i
 = 0; i < 
Àn
; i++) {

416 
˘x
->
chunk
[˘x->
chunk_size
++] = 
§c
[
i
];

417 i‡(
˘x
->
chunk_size
 == 3) {

418 
	`cs_ba£64_emô_chunk
(
˘x
);

419 
˘x
->
chunk_size
 = 0;

422 
	}
}

424 
	$cs_ba£64_föish
(
cs_ba£64_˘x
 *
˘x
) {

425 i‡(
˘x
->
chunk_size
 > 0) {

426 
i
;

427 
	`mem£t
(&
˘x
->
chunk
[˘x->
chunk_size
], 0, 3 - ctx->chunk_size);

428 
	`cs_ba£64_emô_chunk
(
˘x
);

429 
i
 = 0; i < (3 - 
˘x
->
chunk_size
); i++) {

430 
˘x
->
	`b64_putc
('=', ctx->
u£r_d©a
);

433 
	}
}

435 
	#BASE64_ENCODE_BODY
 \

436 c⁄° *
b64
 = \

438 
i
, 
j
, 
a
, 
b
, 
c
; \

440 
i
 = 
j
 = 0; i < 
§c_Àn
; i += 3) { \

441 
a
 = 
§c
[
i
]; \

442 
b
 = 
i
 + 1 >
§c_Àn
 ? 0 : 
§c
[i + 1]; \

443 
c
 = 
i
 + 2 >
§c_Àn
 ? 0 : 
§c
[i + 2]; \

445 
	`BASE64_OUT
(
b64
[
a
 >> 2]); \

446 
	`BASE64_OUT
(
b64
[((
a
 & 3Ë<< 4Ë| (
b
 >> 4)]); \

447 i‡(
i
 + 1 < 
§c_Àn
) { \

448 
	`BASE64_OUT
(
b64
[(
b
 & 15Ë<< 2 | (
c
 >> 6)]); \

450 i‡(
i
 + 2 < 
§c_Àn
) { \

451 
	`BASE64_OUT
(
b64
[
c
 & 63]); \

455 
j
 % 4 != 0) { \

456 
	`BASE64_OUT
('='); \

458 
	`BASE64_FLUSH
()

	)

460 
	#BASE64_OUT
(
ch
) \

462 
d°
[
j
++] = (
ch
); \

463 } 0)

	)

465 
	#BASE64_FLUSH
() \

467 
d°
[
j
++] = '\0'; \

468 } 0)

	)

470 
	$cs_ba£64_ícode
(c⁄° *
§c
, 
§c_Àn
, *
d°
) {

471 
BASE64_ENCODE_BODY
;

472 
	}
}

474 #unde‡
BASE64_OUT


475 #unde‡
BASE64_FLUSH


477 #i‡
CS_ENABLE_STDIO


478 
	#BASE64_OUT
(
ch
) \

480 
	`Ârötf
(
f
, "%c", (
ch
)); \

481 
j
++; \

482 } 0)

	)

484 
	#BASE64_FLUSH
()

	)

486 
	$cs_Âröt_ba£64
(
FILE
 *
f
, c⁄° *
§c
, 
§c_Àn
) {

487 
BASE64_ENCODE_BODY
;

488 
	}
}

490 #unde‡
BASE64_OUT


491 #unde‡
BASE64_FLUSH


495 
	$‰om_b64
(
ch
) {

497 c⁄° 
èb
[128] = {

531  
èb
[
ch
 & 127];

532 
	}
}

534 
	$cs_ba£64_decode
(c⁄° *
s
, 
Àn
, *
d°
, *
dec_Àn
) {

535 
a
, 
b
, 
c
, 
d
;

536 
‹ig_Àn
 = 
Àn
;

537 *
‹ig_d°
 = 
d°
;

538 
Àn
 >4 && (
a
 = 
	`‰om_b64
(
s
[0])) != 255 &&

539 (
b
 = 
	`‰om_b64
(
s
[1])Ë!255 && (
c
 = from_b64(s[2])) != 255 &&

540 (
d
 = 
	`‰om_b64
(
s
[3])) != 255) {

541 
s
 += 4;

542 
Àn
 -= 4;

543 i‡(
a
 =200 || 
b
 == 200) ;

544 *
d°
++ = 
a
 << 2 | 
b
 >> 4;

545 i‡(
c
 == 200) ;

546 *
d°
++ = 
b
 << 4 | 
c
 >> 2;

547 i‡(
d
 == 200) ;

548 *
d°
++ = 
c
 << 6 | 
d
;

550 *
d°
 = 0;

551 i‡(
dec_Àn
 !
NULL
Ë*dec_À¿(
d°
 - 
‹ig_d°
);

552  
‹ig_Àn
 - 
Àn
;

553 
	}
}

556 #ifde‡
MG_MODULE_LINES


564 #i‚de‡
CS_COMMON_CS_DIRENT_H_


565 
	#CS_COMMON_CS_DIRENT_H_


	)

567 
	~<limôs.h
>

571 #ifde‡
__˝lu•lus


575 #ifde‡
CS_DEFINE_DIRENT


576 °ru˘ { 
dummy
; } 
	tDIR
;

578 
	sdúít
 {

579 
	md_öo
;

580 #ifde‡
_WIN32


581 
	md_«me
[
MAX_PATH
];

584 
	md_«me
[256];

588 
DIR
 *
›ídú
(c⁄° *
dú_«me
);

589 
˛o£dú
(
DIR
 *
dú
);

590 
dúít
 *
ªaddú
(
DIR
 *
dú
);

593 #ifde‡
__˝lu•lus


598 #ifde‡
MG_MODULE_LINES


606 #i‚de‡
EXCLUDE_COMMON


615 #i‚de‡
MG_FREE


616 
	#MG_FREE
 
‰ì


	)

619 #i‚de‡
MG_MALLOC


620 
	#MG_MALLOC
 
mÆloc


	)

623 #ifde‡
_WIN32


624 
	swö32_dú
 {

625 
DIR
 
	md
;

626 
HANDLE
 
	mh™dÀ
;

627 
WIN32_FIND_DATAW
 
	möfo
;

628 
dúít
 
	mªsu…
;

631 
DIR
 *
	$›ídú
(c⁄° *
«me
) {

632 
wö32_dú
 *
dú
 = 
NULL
;

633 
wch¨_t
 
w∑th
[
MAX_PATH
];

634 
DWORD
 
©ås
;

636 i‡(
«me
 =
NULL
) {

637 
	`SëLa°Eº‹
(
ERROR_BAD_ARGUMENTS
);

638 } i‡((
dú
 = (
wö32_dú
 *Ë
	`MG_MALLOC
((*dú))Ë=
NULL
) {

639 
	`SëLa°Eº‹
(
ERROR_NOT_ENOUGH_MEMORY
);

641 
	`to_wch¨
(
«me
, 
w∑th
, 
	`ARRAY_SIZE
(wpath));

642 
©ås
 = 
	`GëFûeAâribuãsW
(
w∑th
);

643 i‡(
©ås
 !0xFFFFFFFF && (©å†& 
FILE_ATTRIBUTE_DIRECTORY
)) {

644 (Ë
	`wcsˇt
(
w∑th
, 
L
"\\*");

645 
dú
->
h™dÀ
 = 
	`FödFú°FûeW
(
w∑th
, &dú->
öfo
);

646 
dú
->
ªsu…
.
d_«me
[0] = '\0';

648 
	`MG_FREE
(
dú
);

649 
dú
 = 
NULL
;

653  (
DIR
 *Ë
dú
;

654 
	}
}

656 
	$˛o£dú
(
DIR
 *
d
) {

657 
wö32_dú
 *
dú
 = (wö32_dú *Ë
d
;

658 
ªsu…
 = 0;

660 i‡(
dú
 !
NULL
) {

661 i‡(
dú
->
h™dÀ
 !
INVALID_HANDLE_VALUE
)

662 
ªsu…
 = 
	`FödClo£
(
dú
->
h™dÀ
) ? 0 : -1;

663 
	`MG_FREE
(
dú
);

665 
ªsu…
 = -1;

666 
	`SëLa°Eº‹
(
ERROR_BAD_ARGUMENTS
);

669  
ªsu…
;

670 
	}
}

672 
dúít
 *
	$ªaddú
(
DIR
 *
d
) {

673 
wö32_dú
 *
dú
 = (wö32_dú *Ë
d
;

674 
dúít
 *
ªsu…
 = 
NULL
;

676 i‡(
dú
) {

677 
	`mem£t
(&
dú
->
ªsu…
, 0, (dir->result));

678 i‡(
dú
->
h™dÀ
 !
INVALID_HANDLE_VALUE
) {

679 
ªsu…
 = &
dú
->result;

680 (Ë
	`WideCh¨ToMu…iByã
(
CP_UTF8
, 0, 
dú
->
öfo
.
cFûeName
, -1,

681 
ªsu…
->
d_«me
, ‘esu…->d_«me), 
NULL
,

682 
NULL
);

684 i‡(!
	`FödNextFûeW
(
dú
->
h™dÀ
, &dú->
öfo
)) {

685 (Ë
	`FödClo£
(
dú
->
h™dÀ
);

686 
dú
->
h™dÀ
 = 
INVALID_HANDLE_VALUE
;

690 
	`SëLa°Eº‹
(
ERROR_FILE_NOT_FOUND
);

693 
	`SëLa°Eº‹
(
ERROR_BAD_ARGUMENTS
);

696  
ªsu…
;

697 
	}
}

703 
	tcs_dúít_dummy
;

704 #ifde‡
MG_MODULE_LINES


714 #i‚de‡
_WIN32


715 
	~<°ddef.h
>

719 #i‡!(
deföed
(
__ARMCC_VERSION
Ë|| deföed(
__ICCARM__
)) && \

720 !
deföed
(
__TI_COMPILER_VERSION__
) && \

721 (!
deföed
(
CS_PLATFORM
Ë|| 
	gCS_PLATFORM
 !
CS_P_NXP_LPC
)

722 
	~<sys/time.h
>

725 
	~<wödows.h
>

728 
	$cs_time
(Ë
WEAK
;

729 
	$cs_time
() {

730 
now
;

731 #i‚de‡
_WIN32


732 
timevÆ
 
tv
;

733 i‡(
	`gëtimeofday
(&
tv
, 
NULL
 ) != 0)  0;

734 
now
 = (Ë
tv
.
tv_£c
 + (((Ëtv.
tv_u£c
) / 1000000.0);

736 
SYSTEMTIME
 
sy¢ow
;

737 
FILETIME
 
·ime
;

738 
	`GëLoˇlTime
(&
sy¢ow
);

739 
	`Sy°emTimeToFûeTime
(&
sy¢ow
, &
·ime
);

748 
now
 = (Ë(((
öt64_t
Ë
·ime
.
dwLowD©eTime
 +

749 ((
öt64_t
Ë
·ime
.
dwHighD©eTime
 << 32)) /

753  
now
;

754 
	}
}

755 #ifde‡
MG_MODULE_LINES


763 #i‚de‡
CS_COMMON_CS_ENDIAN_H_


764 
	#CS_COMMON_CS_ENDIAN_H_


	)

771 #i‡!
deföed
(
BYTE_ORDER
Ë&& deföed(
__BYTE_ORDER
)

772 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

773 #i‚de‡
LITTLE_ENDIAN


774 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

776 #i‚de‡
BIG_ENDIAN


777 
	#BIG_ENDIAN
 
__LITTLE_ENDIAN


	)

782 #ifde‡
MG_MODULE_LINES


805 #i‡!
deföed
(
EXCLUDE_COMMON
)

806 #i‡!
DISABLE_MD5


810 
	$byãRevî£
(*
buf
, 
l⁄gs
) {

812 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


814 
uöt32_t
 
t
 = (uöt32_t)((Ë
buf
[3] << 8 | buf[2]) << 16 |

815 ((Ë
buf
[1] << 8 | buf[0]);

816 *(
uöt32_t
 *Ë
buf
 = 
t
;

817 
buf
 += 4;

818 } --
l⁄gs
);

820 (Ë
buf
;

821 (Ë
l⁄gs
;

823 
	}
}

825 
	#F1
(
x
, 
y
, 
z
Ë(z ^ (x & (y ^ z)))

	)

826 
	#F2
(
x
, 
y
, 
z
Ë
	`F1
(z, x, y)

	)

827 
	#F3
(
x
, 
y
, 
z
Ë(x ^ y ^ z)

	)

828 
	#F4
(
x
, 
y
, 
z
Ë(y ^ (x | ~z))

	)

830 
	#MD5STEP
(
f
, 
w
, 
x
, 
y
, 
z
, 
d©a
, 
s
) \

831 (
w
 +
	`f
(
x
, 
y
, 
z
Ë+ 
d©a
, w = w << 
s
 | w >> (32 - s), w +x)

	)

837 
	$MD5_Inô
(
MD5_CTX
 *
˘x
) {

838 
˘x
->
buf
[0] = 0x67452301;

839 
˘x
->
buf
[1] = 0xefcdab89;

840 
˘x
->
buf
[2] = 0x98badcfe;

841 
˘x
->
buf
[3] = 0x10325476;

843 
˘x
->
bôs
[0] = 0;

844 
˘x
->
bôs
[1] = 0;

845 
	}
}

847 
	$MD5Tønsf‹m
(
uöt32_t
 
buf
[4], uöt32_àc⁄° 
ö
[16]) {

848 
uöt32_t
 
a
, 
b
, 
c
, 
d
;

850 
a
 = 
buf
[0];

851 
b
 = 
buf
[1];

852 
c
 = 
buf
[2];

853 
d
 = 
buf
[3];

855 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[0] + 0xd76aa478, 7);

856 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[1] + 0xe8c7b756, 12);

857 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[2] + 0x242070db, 17);

858 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[3] + 0xc1bdceee, 22);

859 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[4] + 0xf57c0faf, 7);

860 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[5] + 0x4787c62a, 12);

861 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[6] + 0xa8304613, 17);

862 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[7] + 0xfd469501, 22);

863 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[8] + 0x698098d8, 7);

864 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[9] + 0x8b44f7af, 12);

865 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[10] + 0xffff5bb1, 17);

866 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[11] + 0x895cd7be, 22);

867 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[12] + 0x6b901122, 7);

868 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[13] + 0xfd987193, 12);

869 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[14] + 0xa679438e, 17);

870 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[15] + 0x49b40821, 22);

872 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[1] + 0xf61e2562, 5);

873 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[6] + 0xc040b340, 9);

874 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[11] + 0x265e5a51, 14);

875 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[0] + 0xe9b6c7aa, 20);

876 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[5] + 0xd62f105d, 5);

877 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[10] + 0x02441453, 9);

878 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[15] + 0xd8a1e681, 14);

879 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[4] + 0xe7d3fbc8, 20);

880 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[9] + 0x21e1cde6, 5);

881 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[14] + 0xc33707d6, 9);

882 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[3] + 0xf4d50d87, 14);

883 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[8] + 0x455a14ed, 20);

884 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[13] + 0xa9e3e905, 5);

885 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[2] + 0xfcefa3f8, 9);

886 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[7] + 0x676f02d9, 14);

887 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[12] + 0x8d2a4c8a, 20);

889 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[5] + 0xfffa3942, 4);

890 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[8] + 0x8771f681, 11);

891 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[11] + 0x6d9d6122, 16);

892 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[14] + 0xfde5380c, 23);

893 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[1] + 0xa4beea44, 4);

894 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[4] + 0x4bdecfa9, 11);

895 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[7] + 0xf6bb4b60, 16);

896 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[10] + 0xbebfbc70, 23);

897 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[13] + 0x289b7ec6, 4);

898 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[0] + 0xeaa127fa, 11);

899 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[3] + 0xd4ef3085, 16);

900 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[6] + 0x04881d05, 23);

901 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[9] + 0xd9d4d039, 4);

902 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[12] + 0xe6db99e5, 11);

903 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[15] + 0x1fa27cf8, 16);

904 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[2] + 0xc4ac5665, 23);

906 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[0] + 0xf4292244, 6);

907 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[7] + 0x432aff97, 10);

908 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[14] + 0xab9423a7, 15);

909 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[5] + 0xfc93a039, 21);

910 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[12] + 0x655b59c3, 6);

911 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[3] + 0x8f0ccc92, 10);

912 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[10] + 0xffeff47d, 15);

913 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[1] + 0x85845dd1, 21);

914 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[8] + 0x6fa87e4f, 6);

915 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[15] + 0xfe2ce6e0, 10);

916 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[6] + 0xa3014314, 15);

917 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[13] + 0x4e0811a1, 21);

918 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[4] + 0xf7537e82, 6);

919 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[11] + 0xbd3af235, 10);

920 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[2] + 0x2ad7d2bb, 15);

921 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[9] + 0xeb86d391, 21);

923 
buf
[0] +
a
;

924 
buf
[1] +
b
;

925 
buf
[2] +
c
;

926 
buf
[3] +
d
;

927 
	}
}

929 
	$MD5_Upd©e
(
MD5_CTX
 *
˘x
, c⁄° *
buf
, 
size_t
 
Àn
) {

930 
uöt32_t
 
t
;

932 
t
 = 
˘x
->
bôs
[0];

933 i‡((
˘x
->
bôs
[0] = 
t
 + ((
uöt32_t
Ë
Àn
 << 3)) <Å) ctx->bits[1]++;

934 
˘x
->
bôs
[1] +(
uöt32_t
Ë
Àn
 >> 29;

936 
t
 = (t >> 3) & 0x3f;

938 i‡(
t
) {

939 *
p
 = (*Ë
˘x
->
ö
 + 
t
;

941 
t
 = 64 -Å;

942 i‡(
Àn
 < 
t
) {

943 
	`mem˝y
(
p
, 
buf
, 
Àn
);

946 
	`mem˝y
(
p
, 
buf
, 
t
);

947 
	`byãRevî£
(
˘x
->
ö
, 16);

948 
	`MD5Tønsf‹m
(
˘x
->
buf
, (
uöt32_t
 *Ë˘x->
ö
);

949 
buf
 +
t
;

950 
Àn
 -
t
;

953 
Àn
 >= 64) {

954 
	`mem˝y
(
˘x
->
ö
, 
buf
, 64);

955 
	`byãRevî£
(
˘x
->
ö
, 16);

956 
	`MD5Tønsf‹m
(
˘x
->
buf
, (
uöt32_t
 *Ë˘x->
ö
);

957 
buf
 += 64;

958 
Àn
 -= 64;

961 
	`mem˝y
(
˘x
->
ö
, 
buf
, 
Àn
);

962 
	}
}

964 
	$MD5_FöÆ
(
dige°
[16], 
MD5_CTX
 *
˘x
) {

965 
cou¡
;

966 *
p
;

967 
uöt32_t
 *
a
;

969 
cou¡
 = (
˘x
->
bôs
[0] >> 3) & 0x3F;

971 
p
 = 
˘x
->
ö
 + 
cou¡
;

972 *
p
++ = 0x80;

973 
cou¡
 = 64 - 1 - count;

974 i‡(
cou¡
 < 8) {

975 
	`mem£t
(
p
, 0, 
cou¡
);

976 
	`byãRevî£
(
˘x
->
ö
, 16);

977 
	`MD5Tønsf‹m
(
˘x
->
buf
, (
uöt32_t
 *Ë˘x->
ö
);

978 
	`mem£t
(
˘x
->
ö
, 0, 56);

980 
	`mem£t
(
p
, 0, 
cou¡
 - 8);

982 
	`byãRevî£
(
˘x
->
ö
, 14);

984 
a
 = (
uöt32_t
 *Ë
˘x
->
ö
;

985 
a
[14] = 
˘x
->
bôs
[0];

986 
a
[15] = 
˘x
->
bôs
[1];

988 
	`MD5Tønsf‹m
(
˘x
->
buf
, (
uöt32_t
 *Ë˘x->
ö
);

989 
	`byãRevî£
((*Ë
˘x
->
buf
, 4);

990 
	`mem˝y
(
dige°
, 
˘x
->
buf
, 16);

991 
	`mem£t
((*Ë
˘x
, 0, (*ctx));

992 
	}
}

995 *
	$cs_md5
(
buf
[33], ...) {

996 
hash
[16];

997 c⁄° *
p
;

998 
va_li°
 
≠
;

999 
MD5_CTX
 
˘x
;

1001 
	`MD5_Inô
(&
˘x
);

1003 
	`va_°¨t
(
≠
, 
buf
);

1004 (
p
 = 
	`va_¨g
(
≠
, c⁄° *ËË!
NULL
) {

1005 
size_t
 
Àn
 = 
	`va_¨g
(
≠
, size_t);

1006 
	`MD5_Upd©e
(&
˘x
, 
p
, 
Àn
);

1008 
	`va_íd
(
≠
);

1010 
	`MD5_FöÆ
(
hash
, &
˘x
);

1011 
	`cs_to_hex
(
buf
, 
hash
, (hash));

1013  
buf
;

1014 
	}
}

1017 #ifde‡
MG_MODULE_LINES


1025 #i‚de‡
EXCLUDE_COMMON


1027 
	~<as£π.h
>

1028 
	~<°rög.h
>

1031 #i‚de‡
MBUF_REALLOC


1032 
	#MBUF_REALLOC
 
ªÆloc


	)

1035 #i‚de‡
MBUF_FREE


1036 
	#MBUF_FREE
 
‰ì


	)

1039 
	$mbuf_öô
(
mbuf
 *mbuf, 
size_t
 
öôül_size
Ë
WEAK
;

1040 
	$mbuf_öô
(
mbuf
 *mbuf, 
size_t
 
öôül_size
) {

1041 
mbuf
->
Àn
 = mbuf->
size
 = 0;

1042 
mbuf
->
buf
 = 
NULL
;

1043 
	`mbuf_ªsize
(
mbuf
, 
öôül_size
);

1044 
	}
}

1046 
	$mbuf_‰ì
(
mbuf
 *mbufË
WEAK
;

1047 
	$mbuf_‰ì
(
mbuf
 *mbuf) {

1048 i‡(
mbuf
->
buf
 !
NULL
) {

1049 
	`MBUF_FREE
(
mbuf
->
buf
);

1050 
	`mbuf_öô
(
mbuf
, 0);

1052 
	}
}

1054 
	$mbuf_ªsize
(
mbuf
 *
a
, 
size_t
 
√w_size
Ë
WEAK
;

1055 
	$mbuf_ªsize
(
mbuf
 *
a
, 
size_t
 
√w_size
) {

1056 i‡(
√w_size
 > 
a
->
size
 || (√w_sizê<á->sizê&&Çew_sizê>a->
Àn
)) {

1057 *
buf
 = (*Ë
	`MBUF_REALLOC
(
a
->buf, 
√w_size
);

1063 i‡(
buf
 =
NULL
 && 
√w_size
 != 0) ;

1064 
a
->
buf
 = buf;

1065 
a
->
size
 = 
√w_size
;

1067 
	}
}

1069 
	$mbuf_åim
(
mbuf
 *mbufË
WEAK
;

1070 
	$mbuf_åim
(
mbuf
 *mbuf) {

1071 
	`mbuf_ªsize
(
mbuf
, mbuf->
Àn
);

1072 
	}
}

1074 
size_t
 
	$mbuf_ö£π
(
mbuf
 *
a
, 
size_t
 
off
, c⁄° *
buf
, size_tË
WEAK
;

1075 
size_t
 
	$mbuf_ö£π
(
mbuf
 *
a
, 
size_t
 
off
, c⁄° *
buf
, size_à
Àn
) {

1076 *
p
 = 
NULL
;

1078 
	`as£π
(
a
 !
NULL
);

1079 
	`as£π
(
a
->
Àn
 <a->
size
);

1080 
	`as£π
(
off
 <
a
->
Àn
);

1083 i‡(~(
size_t
Ë0 - (size_tË
a
->
buf
 < 
Àn
)  0;

1085 i‡(
a
->
Àn
 +Üí <a->
size
) {

1086 
	`memmove
(
a
->
buf
 + 
off
 + 
Àn
,á->buf + off,á->len - off);

1087 i‡(
buf
 !
NULL
) {

1088 
	`mem˝y
(
a
->
buf
 + 
off
, buf, 
Àn
);

1090 
a
->
Àn
 +=Üen;

1092 
size_t
 
√w_size
 = (size_t)((
a
->
Àn
 +ÜíË* 
MBUF_SIZE_MULTIPLIER
);

1093 i‡((
p
 = (*Ë
	`MBUF_REALLOC
(
a
->
buf
, 
√w_size
)Ë!
NULL
) {

1094 
a
->
buf
 = 
p
;

1095 
	`memmove
(
a
->
buf
 + 
off
 + 
Àn
,á->buf + off,á->len - off);

1096 i‡(
buf
 !
NULL
Ë
	`mem˝y
(
a
->bu‡+ 
off
, buf, 
Àn
);

1097 
a
->
Àn
 +=Üen;

1098 
a
->
size
 = 
√w_size
;

1100 
Àn
 = 0;

1104  
Àn
;

1105 
	}
}

1107 
size_t
 
	$mbuf_≠≥nd
(
mbuf
 *
a
, c⁄° *
buf
, 
size_t
 
Àn
Ë
WEAK
;

1108 
size_t
 
	$mbuf_≠≥nd
(
mbuf
 *
a
, c⁄° *
buf
, 
size_t
 
Àn
) {

1109  
	`mbuf_ö£π
(
a
,á->
Àn
, 
buf
,Üen);

1110 
	}
}

1112 
	$mbuf_ªmove
(
mbuf
 *
mb
, 
size_t
 
n
Ë
WEAK
;

1113 
	$mbuf_ªmove
(
mbuf
 *
mb
, 
size_t
 
n
) {

1114 i‡(
n
 > 0 &&Ç <
mb
->
Àn
) {

1115 
	`memmove
(
mb
->
buf
, mb->bu‡+ 
n
, mb->
Àn
 -Ç);

1116 
mb
->
Àn
 -
n
;

1118 
	}
}

1121 #ifde‡
MG_MODULE_LINES


1131 
	~<°dlib.h
>

1132 
	~<°rög.h
>

1134 
	$mg_nˇ£cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
Àn
Ë
WEAK
;

1136 
mg_°r
 
	$mg_mk_°r
(c⁄° *
s
Ë
WEAK
;

1137 
mg_°r
 
	$mg_mk_°r
(c⁄° *
s
) {

1138 
mg_°r
 
ªt
 = {
s
, 0};

1139 i‡(
s
 !
NULL
Ë
ªt
.
Àn
 = 
	`°æí
(s);

1140  
ªt
;

1141 
	}
}

1143 
mg_°r
 
	$mg_mk_°r_n
(c⁄° *
s
, 
size_t
 
Àn
Ë
WEAK
;

1144 
mg_°r
 
	$mg_mk_°r_n
(c⁄° *
s
, 
size_t
 
Àn
) {

1145 
mg_°r
 
ªt
 = {
s
, 
Àn
};

1146  
ªt
;

1147 
	}
}

1149 
	$mg_vcmp
(c⁄° 
mg_°r
 *
°r1
, c⁄° *
°r2
Ë
WEAK
;

1150 
	$mg_vcmp
(c⁄° 
mg_°r
 *
°r1
, c⁄° *
°r2
) {

1151 
size_t
 
n2
 = 
	`°æí
(
°r2
), 
n1
 = 
°r1
->
Àn
;

1152 
r
 = 
	`memcmp
(
°r1
->
p
, 
°r2
, (
n1
 < 
n2
) ?Ç1 :Ç2);

1153 i‡(
r
 == 0) {

1154  
n1
 - 
n2
;

1156  
r
;

1157 
	}
}

1159 
	$mg_vˇ£cmp
(c⁄° 
mg_°r
 *
°r1
, c⁄° *
°r2
Ë
WEAK
;

1160 
	$mg_vˇ£cmp
(c⁄° 
mg_°r
 *
°r1
, c⁄° *
°r2
) {

1161 
size_t
 
n2
 = 
	`°æí
(
°r2
), 
n1
 = 
°r1
->
Àn
;

1162 
r
 = 
	`mg_nˇ£cmp
(
°r1
->
p
, 
°r2
, (
n1
 < 
n2
) ?Ç1 :Ç2);

1163 i‡(
r
 == 0) {

1164  
n1
 - 
n2
;

1166  
r
;

1167 
	}
}

1169 
mg_°r
 
	$mg_°rdup
(c⁄° 
mg_°r
 
s
Ë
WEAK
;

1170 
mg_°r
 
	$mg_°rdup
(c⁄° 
mg_°r
 
s
) {

1171 
mg_°r
 
r
 = {
NULL
, 0};

1172 i‡(
s
.
Àn
 > 0 && s.
p
 !
NULL
) {

1173 
r
.
p
 = (*Ë
	`mÆloc
(
s
.
Àn
);

1174 i‡(
r
.
p
 !
NULL
) {

1175 
	`mem˝y
((*Ë
r
.
p
, 
s
.p, s.
Àn
);

1176 
r
.
Àn
 = 
s
.len;

1179  
r
;

1180 
	}
}

1182 
	$mg_°rcmp
(c⁄° 
mg_°r
 
°r1
, c⁄° mg_°∏
°r2
Ë
WEAK
;

1183 
	$mg_°rcmp
(c⁄° 
mg_°r
 
°r1
, c⁄° mg_°∏
°r2
) {

1184 
size_t
 
i
 = 0;

1185 
i
 < 
°r1
.
Àn
 && i < 
°r2
.len) {

1186 i‡(
°r1
.
p
[
i
] < 
°r2
.p[i])  -1;

1187 i‡(
°r1
.
p
[
i
] > 
°r2
.p[i])  1;

1188 
i
++;

1190 i‡(
i
 < 
°r1
.
Àn
)  1;

1191 i‡(
i
 < 
°r2
.
Àn
)  -1;

1193 
	}
}

1195 
	$mg_°∫cmp
(c⁄° 
mg_°r
, c⁄° mg_°r, 
size_t
 
n
Ë
WEAK
;

1196 
	$mg_°∫cmp
(c⁄° 
mg_°r
 
°r1
, c⁄° mg_°∏
°r2
, 
size_t
 
n
) {

1197 
mg_°r
 
s1
 = 
°r1
;

1198 
mg_°r
 
s2
 = 
°r2
;

1200 i‡(
s1
.
Àn
 > 
n
) {

1201 
s1
.
Àn
 = 
n
;

1203 i‡(
s2
.
Àn
 > 
n
) {

1204 
s2
.
Àn
 = 
n
;

1206  
	`mg_°rcmp
(
s1
, 
s2
);

1207 
	}
}

1208 #ifde‡
MG_MODULE_LINES


1216 #i‡!
DISABLE_SHA1
 && !
deföed
(
EXCLUDE_COMMON
)

1220 
	#SHA1HANDSOFF


	)

1221 #i‡
deföed
(
__sun
)

1225 
	uch¨64l⁄g16
 {

1226 
	mc
[64];

1227 
uöt32_t
 
	ml
[16];

1230 
	#rﬁ
(
vÆue
, 
bôs
Ë(((vÆueË<< (bôs)Ë| ((vÆueË>> (32 - (bôs))))

	)

1232 
uöt32_t
 
	$blk0
(
ch¨64l⁄g16
 *
block
, 
i
) {

1234 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


1235 
block
->
l
[
i
] =

1236 (
	`rﬁ
(
block
->
l
[
i
], 24) & 0xFF00FF00) | (rol(block->l[i], 8) & 0x00FF00FF);

1238  
block
->
l
[
i
];

1239 
	}
}

1242 #unde‡
blk


1243 #unde‡
R0


1244 #unde‡
R1


1245 #unde‡
R2


1246 #unde‡
R3


1247 #unde‡
R4


1249 
	#blk
(
i
) \

1250 (
block
->
l
[
i
 & 15] = 
	`rﬁ
(block->l[(i + 13) & 15] ^ block->l[(i + 8) & 15] ^ \

1251 
block
->
l
[(
i
 + 2) & 15] ^ block->l[i & 15], \

1252 1))

	)

1253 
	#R0
(
v
, 
w
, 
x
, 
y
, 
z
, 
i
) \

1254 
z
 +((
w
 & (
x
 ^ 
y
)Ë^ yË+ 
	`blk0
(
block
, 
i
Ë+ 0x5A827999 + 
	`rﬁ
(
v
, 5); \

1255 
w
 = 
	`rﬁ
(w, 30);

	)

1256 
	#R1
(
v
, 
w
, 
x
, 
y
, 
z
, 
i
) \

1257 
z
 +((
w
 & (
x
 ^ 
y
)Ë^ yË+ 
	`blk
(
i
Ë+ 0x5A827999 + 
	`rﬁ
(
v
, 5); \

1258 
w
 = 
	`rﬁ
(w, 30);

	)

1259 
	#R2
(
v
, 
w
, 
x
, 
y
, 
z
, 
i
) \

1260 
z
 +(
w
 ^ 
x
 ^ 
y
Ë+ 
	`blk
(
i
Ë+ 0x6ED9EBA1 + 
	`rﬁ
(
v
, 5); \

1261 
w
 = 
	`rﬁ
(w, 30);

	)

1262 
	#R3
(
v
, 
w
, 
x
, 
y
, 
z
, 
i
) \

1263 
z
 +(((
w
 | 
x
Ë& 
y
Ë| (w & x)Ë+ 
	`blk
(
i
Ë+ 0x8F1BBCDC + 
	`rﬁ
(
v
, 5); \

1264 
w
 = 
	`rﬁ
(w, 30);

	)

1265 
	#R4
(
v
, 
w
, 
x
, 
y
, 
z
, 
i
) \

1266 
z
 +(
w
 ^ 
x
 ^ 
y
Ë+ 
	`blk
(
i
Ë+ 0xCA62C1D6 + 
	`rﬁ
(
v
, 5); \

1267 
w
 = 
	`rﬁ
(w, 30);

	)

1269 
	$cs_sha1_å™sf‹m
(
uöt32_t
 
°©e
[5], c⁄° 
buf„r
[64]) {

1270 
uöt32_t
 
a
, 
b
, 
c
, 
d
, 
e
;

1271 
ch¨64l⁄g16
 
block
[1];

1273 
	`mem˝y
(
block
, 
buf„r
, 64);

1274 
a
 = 
°©e
[0];

1275 
b
 = 
°©e
[1];

1276 
c
 = 
°©e
[2];

1277 
d
 = 
°©e
[3];

1278 
e
 = 
°©e
[4];

1279 
	`R0
(
a
, 
b
, 
c
, 
d
, 
e
, 0);

1280 
	`R0
(
e
, 
a
, 
b
, 
c
, 
d
, 1);

1281 
	`R0
(
d
, 
e
, 
a
, 
b
, 
c
, 2);

1282 
	`R0
(
c
, 
d
, 
e
, 
a
, 
b
, 3);

1283 
	`R0
(
b
, 
c
, 
d
, 
e
, 
a
, 4);

1284 
	`R0
(
a
, 
b
, 
c
, 
d
, 
e
, 5);

1285 
	`R0
(
e
, 
a
, 
b
, 
c
, 
d
, 6);

1286 
	`R0
(
d
, 
e
, 
a
, 
b
, 
c
, 7);

1287 
	`R0
(
c
, 
d
, 
e
, 
a
, 
b
, 8);

1288 
	`R0
(
b
, 
c
, 
d
, 
e
, 
a
, 9);

1289 
	`R0
(
a
, 
b
, 
c
, 
d
, 
e
, 10);

1290 
	`R0
(
e
, 
a
, 
b
, 
c
, 
d
, 11);

1291 
	`R0
(
d
, 
e
, 
a
, 
b
, 
c
, 12);

1292 
	`R0
(
c
, 
d
, 
e
, 
a
, 
b
, 13);

1293 
	`R0
(
b
, 
c
, 
d
, 
e
, 
a
, 14);

1294 
	`R0
(
a
, 
b
, 
c
, 
d
, 
e
, 15);

1295 
	`R1
(
e
, 
a
, 
b
, 
c
, 
d
, 16);

1296 
	`R1
(
d
, 
e
, 
a
, 
b
, 
c
, 17);

1297 
	`R1
(
c
, 
d
, 
e
, 
a
, 
b
, 18);

1298 
	`R1
(
b
, 
c
, 
d
, 
e
, 
a
, 19);

1299 
	`R2
(
a
, 
b
, 
c
, 
d
, 
e
, 20);

1300 
	`R2
(
e
, 
a
, 
b
, 
c
, 
d
, 21);

1301 
	`R2
(
d
, 
e
, 
a
, 
b
, 
c
, 22);

1302 
	`R2
(
c
, 
d
, 
e
, 
a
, 
b
, 23);

1303 
	`R2
(
b
, 
c
, 
d
, 
e
, 
a
, 24);

1304 
	`R2
(
a
, 
b
, 
c
, 
d
, 
e
, 25);

1305 
	`R2
(
e
, 
a
, 
b
, 
c
, 
d
, 26);

1306 
	`R2
(
d
, 
e
, 
a
, 
b
, 
c
, 27);

1307 
	`R2
(
c
, 
d
, 
e
, 
a
, 
b
, 28);

1308 
	`R2
(
b
, 
c
, 
d
, 
e
, 
a
, 29);

1309 
	`R2
(
a
, 
b
, 
c
, 
d
, 
e
, 30);

1310 
	`R2
(
e
, 
a
, 
b
, 
c
, 
d
, 31);

1311 
	`R2
(
d
, 
e
, 
a
, 
b
, 
c
, 32);

1312 
	`R2
(
c
, 
d
, 
e
, 
a
, 
b
, 33);

1313 
	`R2
(
b
, 
c
, 
d
, 
e
, 
a
, 34);

1314 
	`R2
(
a
, 
b
, 
c
, 
d
, 
e
, 35);

1315 
	`R2
(
e
, 
a
, 
b
, 
c
, 
d
, 36);

1316 
	`R2
(
d
, 
e
, 
a
, 
b
, 
c
, 37);

1317 
	`R2
(
c
, 
d
, 
e
, 
a
, 
b
, 38);

1318 
	`R2
(
b
, 
c
, 
d
, 
e
, 
a
, 39);

1319 
	`R3
(
a
, 
b
, 
c
, 
d
, 
e
, 40);

1320 
	`R3
(
e
, 
a
, 
b
, 
c
, 
d
, 41);

1321 
	`R3
(
d
, 
e
, 
a
, 
b
, 
c
, 42);

1322 
	`R3
(
c
, 
d
, 
e
, 
a
, 
b
, 43);

1323 
	`R3
(
b
, 
c
, 
d
, 
e
, 
a
, 44);

1324 
	`R3
(
a
, 
b
, 
c
, 
d
, 
e
, 45);

1325 
	`R3
(
e
, 
a
, 
b
, 
c
, 
d
, 46);

1326 
	`R3
(
d
, 
e
, 
a
, 
b
, 
c
, 47);

1327 
	`R3
(
c
, 
d
, 
e
, 
a
, 
b
, 48);

1328 
	`R3
(
b
, 
c
, 
d
, 
e
, 
a
, 49);

1329 
	`R3
(
a
, 
b
, 
c
, 
d
, 
e
, 50);

1330 
	`R3
(
e
, 
a
, 
b
, 
c
, 
d
, 51);

1331 
	`R3
(
d
, 
e
, 
a
, 
b
, 
c
, 52);

1332 
	`R3
(
c
, 
d
, 
e
, 
a
, 
b
, 53);

1333 
	`R3
(
b
, 
c
, 
d
, 
e
, 
a
, 54);

1334 
	`R3
(
a
, 
b
, 
c
, 
d
, 
e
, 55);

1335 
	`R3
(
e
, 
a
, 
b
, 
c
, 
d
, 56);

1336 
	`R3
(
d
, 
e
, 
a
, 
b
, 
c
, 57);

1337 
	`R3
(
c
, 
d
, 
e
, 
a
, 
b
, 58);

1338 
	`R3
(
b
, 
c
, 
d
, 
e
, 
a
, 59);

1339 
	`R4
(
a
, 
b
, 
c
, 
d
, 
e
, 60);

1340 
	`R4
(
e
, 
a
, 
b
, 
c
, 
d
, 61);

1341 
	`R4
(
d
, 
e
, 
a
, 
b
, 
c
, 62);

1342 
	`R4
(
c
, 
d
, 
e
, 
a
, 
b
, 63);

1343 
	`R4
(
b
, 
c
, 
d
, 
e
, 
a
, 64);

1344 
	`R4
(
a
, 
b
, 
c
, 
d
, 
e
, 65);

1345 
	`R4
(
e
, 
a
, 
b
, 
c
, 
d
, 66);

1346 
	`R4
(
d
, 
e
, 
a
, 
b
, 
c
, 67);

1347 
	`R4
(
c
, 
d
, 
e
, 
a
, 
b
, 68);

1348 
	`R4
(
b
, 
c
, 
d
, 
e
, 
a
, 69);

1349 
	`R4
(
a
, 
b
, 
c
, 
d
, 
e
, 70);

1350 
	`R4
(
e
, 
a
, 
b
, 
c
, 
d
, 71);

1351 
	`R4
(
d
, 
e
, 
a
, 
b
, 
c
, 72);

1352 
	`R4
(
c
, 
d
, 
e
, 
a
, 
b
, 73);

1353 
	`R4
(
b
, 
c
, 
d
, 
e
, 
a
, 74);

1354 
	`R4
(
a
, 
b
, 
c
, 
d
, 
e
, 75);

1355 
	`R4
(
e
, 
a
, 
b
, 
c
, 
d
, 76);

1356 
	`R4
(
d
, 
e
, 
a
, 
b
, 
c
, 77);

1357 
	`R4
(
c
, 
d
, 
e
, 
a
, 
b
, 78);

1358 
	`R4
(
b
, 
c
, 
d
, 
e
, 
a
, 79);

1359 
°©e
[0] +
a
;

1360 
°©e
[1] +
b
;

1361 
°©e
[2] +
c
;

1362 
°©e
[3] +
d
;

1363 
°©e
[4] +
e
;

1366 
	`mem£t
(
block
, 0, (block));

1367 
a
 = 
b
 = 
c
 = 
d
 = 
e
 = 0;

1368 (Ë
a
;

1369 (Ë
b
;

1370 (Ë
c
;

1371 (Ë
d
;

1372 (Ë
e
;

1373 
	}
}

1375 
	$cs_sha1_öô
(
cs_sha1_˘x
 *
c⁄ãxt
) {

1376 
c⁄ãxt
->
°©e
[0] = 0x67452301;

1377 
c⁄ãxt
->
°©e
[1] = 0xEFCDAB89;

1378 
c⁄ãxt
->
°©e
[2] = 0x98BADCFE;

1379 
c⁄ãxt
->
°©e
[3] = 0x10325476;

1380 
c⁄ãxt
->
°©e
[4] = 0xC3D2E1F0;

1381 
c⁄ãxt
->
cou¡
[0] = context->count[1] = 0;

1382 
	}
}

1384 
	$cs_sha1_upd©e
(
cs_sha1_˘x
 *
c⁄ãxt
, c⁄° *
d©a
,

1385 
uöt32_t
 
Àn
) {

1386 
uöt32_t
 
i
, 
j
;

1388 
j
 = 
c⁄ãxt
->
cou¡
[0];

1389 i‡((
c⁄ãxt
->
cou¡
[0] +
Àn
 << 3Ë< 
j
) context->count[1]++;

1390 
c⁄ãxt
->
cou¡
[1] +(
Àn
 >> 29);

1391 
j
 = (j >> 3) & 63;

1392 i‡((
j
 + 
Àn
) > 63) {

1393 
	`mem˝y
(&
c⁄ãxt
->
buf„r
[
j
], 
d©a
, (
i
 = 64 - j));

1394 
	`cs_sha1_å™sf‹m
(
c⁄ãxt
->
°©e
, c⁄ãxt->
buf„r
);

1395 ; 
i
 + 63 < 
Àn
; i += 64) {

1396 
	`cs_sha1_å™sf‹m
(
c⁄ãxt
->
°©e
, &
d©a
[
i
]);

1398 
j
 = 0;

1400 
i
 = 0;

1401 
	`mem˝y
(&
c⁄ãxt
->
buf„r
[
j
], &
d©a
[
i
], 
Àn
 - i);

1402 
	}
}

1404 
	$cs_sha1_föÆ
(
dige°
[20], 
cs_sha1_˘x
 *
c⁄ãxt
) {

1405 
i
;

1406 
föÆcou¡
[8], 
c
;

1408 
i
 = 0; i < 8; i++) {

1409 
föÆcou¡
[
i
] = (Ë((
c⁄ãxt
->
cou¡
[(i >= 4 ? 0 : 1)] >>

1410 ((3 - (
i
 & 3)) * 8)) &

1413 
c
 = 0200;

1414 
	`cs_sha1_upd©e
(
c⁄ãxt
, &
c
, 1);

1415 (
c⁄ãxt
->
cou¡
[0] & 504) != 448) {

1416 
c
 = 0000;

1417 
	`cs_sha1_upd©e
(
c⁄ãxt
, &
c
, 1);

1419 
	`cs_sha1_upd©e
(
c⁄ãxt
, 
föÆcou¡
, 8);

1420 
i
 = 0; i < 20; i++) {

1421 
dige°
[
i
] =

1422 (Ë((
c⁄ãxt
->
°©e
[
i
 >> 2] >> ((3 - (i & 3)) * 8)) & 255);

1424 
	`mem£t
(
c⁄ãxt
, '\0', (*context));

1425 
	`mem£t
(&
föÆcou¡
, '\0', (finalcount));

1426 
	}
}

1428 
	$cs_hmac_sha1
(c⁄° *
key
, 
size_t
 
keyÀn
,

1429 c⁄° *
d©a
, 
size_t
 
d©Æí
,

1430 
out
[20]) {

1431 
cs_sha1_˘x
 
˘x
;

1432 
buf1
[64], 
buf2
[64], 
tmp_key
[20], 
i
;

1434 i‡(
keyÀn
 > (
buf1
)) {

1435 
	`cs_sha1_öô
(&
˘x
);

1436 
	`cs_sha1_upd©e
(&
˘x
, 
key
, 
keyÀn
);

1437 
	`cs_sha1_föÆ
(
tmp_key
, &
˘x
);

1438 
key
 = 
tmp_key
;

1439 
keyÀn
 = (
tmp_key
);

1442 
	`mem£t
(
buf1
, 0, (buf1));

1443 
	`mem£t
(
buf2
, 0, (buf2));

1444 
	`mem˝y
(
buf1
, 
key
, 
keyÀn
);

1445 
	`mem˝y
(
buf2
, 
key
, 
keyÀn
);

1447 
i
 = 0; i < (
buf1
); i++) {

1448 
buf1
[
i
] ^= 0x36;

1449 
buf2
[
i
] ^= 0x5c;

1452 
	`cs_sha1_öô
(&
˘x
);

1453 
	`cs_sha1_upd©e
(&
˘x
, 
buf1
, (buf1));

1454 
	`cs_sha1_upd©e
(&
˘x
, 
d©a
, 
d©Æí
);

1455 
	`cs_sha1_föÆ
(
out
, &
˘x
);

1457 
	`cs_sha1_öô
(&
˘x
);

1458 
	`cs_sha1_upd©e
(&
˘x
, 
buf2
, (buf2));

1459 
	`cs_sha1_upd©e
(&
˘x
, 
out
, 20);

1460 
	`cs_sha1_föÆ
(
out
, &
˘x
);

1461 
	}
}

1464 #ifde‡
MG_MODULE_LINES


1472 #i‚de‡
EXCLUDE_COMMON


1477 #i‚de‡
C_DISABLE_BUILTIN_SNPRINTF


1478 
	#C_DISABLE_BUILTIN_SNPRINTF
 0

	)

1481 #i‚de‡
MG_MALLOC


1482 
	#MG_MALLOC
 
mÆloc


	)

1485 #i‚de‡
MG_FREE


1486 
	#MG_FREE
 
‰ì


	)

1489 
size_t
 
	$c_°∫Àn
(c⁄° *
s
, 
size_t
 
maxÀn
Ë
WEAK
;

1490 
size_t
 
	$c_°∫Àn
(c⁄° *
s
, 
size_t
 
maxÀn
) {

1491 
size_t
 
l
 = 0;

1492 ; 
l
 < 
maxÀn
 && 
s
[l] != '\0';Ü++) {

1494  
l
;

1495 
	}
}

1497 
	#C_SNPRINTF_APPEND_CHAR
(
ch
) \

1499 i‡(
i
 < (Ë
buf_size
Ë
buf
[i] = 
ch
; \

1500 
i
++; \

1501 } 0)

	)

1503 
	#C_SNPRINTF_FLAG_ZERO
 1

	)

1505 #i‡
C_DISABLE_BUILTIN_SNPRINTF


1506 
	$c_v¢¥ötf
(*
buf
, 
size_t
 
buf_size
, c⁄° *
fmt
, 
va_li°
 
≠
Ë
WEAK
;

1507 
	$c_v¢¥ötf
(*
buf
, 
size_t
 
buf_size
, c⁄° *
fmt
, 
va_li°
 
≠
) {

1508  
	`v¢¥ötf
(
buf
, 
buf_size
, 
fmt
, 
≠
);

1509 
	}
}

1511 
	$c_ôﬂ
(*
buf
, 
size_t
 
buf_size
, 
öt64_t
 
num
, 
ba£
, 
Êags
,

1512 
fõld_width
) {

1513 
tmp
[40];

1514 
i
 = 0, 
k
 = 0, 
√g
 = 0;

1516 i‡(
num
 < 0) {

1517 
√g
++;

1518 
num
 = -num;

1523 
ªm
 = 
num
 % 
ba£
;

1524 i‡(
ªm
 < 10) {

1525 
tmp
[
k
++] = '0' + 
ªm
;

1527 
tmp
[
k
++] = 'a' + (
ªm
 - 10);

1529 
num
 /
ba£
;

1530 } 
num
 > 0);

1533 i‡(
Êags
 && 
C_SNPRINTF_FLAG_ZERO
) {

1534 
k
 < 
fõld_width
 && k < (Ë(
tmp
) - 1) {

1535 
tmp
[
k
++] = '0';

1540 i‡(
√g
) {

1541 
tmp
[
k
++] = '-';

1545 --
k
 >= 0) {

1546 
	`C_SNPRINTF_APPEND_CHAR
(
tmp
[
k
]);

1549  
i
;

1550 
	}
}

1552 
	$c_v¢¥ötf
(*
buf
, 
size_t
 
buf_size
, c⁄° *
fmt
, 
va_li°
 
≠
Ë
WEAK
;

1553 
	$c_v¢¥ötf
(*
buf
, 
size_t
 
buf_size
, c⁄° *
fmt
, 
va_li°
 
≠
) {

1554 
ch
, 
i
 = 0, 
Àn_mod
, 
Êags
, 
¥ecisi⁄
, 
fõld_width
;

1556 (
ch
 = *
fmt
++) != '\0') {

1557 i‡(
ch
 != '%') {

1558 
	`C_SNPRINTF_APPEND_CHAR
(
ch
);

1568 
Êags
 = 
fõld_width
 = 
¥ecisi⁄
 = 
Àn_mod
 = 0;

1571 i‡(*
fmt
 == '0') {

1572 
Êags
 |
C_SNPRINTF_FLAG_ZERO
;

1576 *
fmt
 >= '0' && *fmt <= '9') {

1577 
fõld_width
 *= 10;

1578 
fõld_width
 +*
fmt
++ - '0';

1581 i‡(*
fmt
 == '*') {

1582 
fõld_width
 = 
	`va_¨g
(
≠
, );

1583 
fmt
++;

1587 i‡(*
fmt
 == '.') {

1588 
fmt
++;

1589 i‡(*
fmt
 == '*') {

1590 
¥ecisi⁄
 = 
	`va_¨g
(
≠
, );

1591 
fmt
++;

1593 *
fmt
 >= '0' && *fmt <= '9') {

1594 
¥ecisi⁄
 *= 10;

1595 
¥ecisi⁄
 +*
fmt
++ - '0';

1601 *
fmt
) {

1610 
Àn_mod
 = *
fmt
++;

1611 i‡(*
fmt
 == 'h') {

1612 
Àn_mod
 = 'H';

1613 
fmt
++;

1615 i‡(*
fmt
 == 'l') {

1616 
Àn_mod
 = 'q';

1617 
fmt
++;

1622 
ch
 = *
fmt
++;

1623 i‡(
ch
 == 's') {

1624 c⁄° *
s
 = 
	`va_¨g
(
≠
, const *);

1625 
j
;

1626 
∑d
 = 
fõld_width
 - (
¥ecisi⁄
 >0 ? 
	`c_°∫Àn
(
s
,Örecision) : 0);

1627 
j
 = 0; j < 
∑d
; j++) {

1628 
	`C_SNPRINTF_APPEND_CHAR
(' ');

1632 i‡(
s
 !
NULL
) {

1634 
j
 = 0; (
¥ecisi⁄
 <0 || j <Öªcisi⁄Ë&& 
s
[j] != '\0'; j++) {

1635 
	`C_SNPRINTF_APPEND_CHAR
(
s
[
j
]);

1638 } i‡(
ch
 == 'c') {

1639 
ch
 = 
	`va_¨g
(
≠
, );

1640 
	`C_SNPRINTF_APPEND_CHAR
(
ch
);

1641 } i‡(
ch
 ='d' && 
Àn_mod
 == 0) {

1642 
i
 +
	`c_ôﬂ
(
buf
 + i, 
buf_size
 - i, 
	`va_¨g
(
≠
, ), 10, 
Êags
,

1643 
fõld_width
);

1644 } i‡(
ch
 ='d' && 
Àn_mod
 == 'l') {

1645 
i
 +
	`c_ôﬂ
(
buf
 + i, 
buf_size
 - i, 
	`va_¨g
(
≠
, ), 10, 
Êags
,

1646 
fõld_width
);

1647 #ifde‡
SSIZE_MAX


1648 } i‡(
ch
 ='d' && 
Àn_mod
 == 'z') {

1649 
i
 +
	`c_ôﬂ
(
buf
 + i, 
buf_size
 - i, 
	`va_¨g
(
≠
, 
ssize_t
), 10, 
Êags
,

1650 
fõld_width
);

1652 } i‡(
ch
 ='d' && 
Àn_mod
 == 'q') {

1653 
i
 +
	`c_ôﬂ
(
buf
 + i, 
buf_size
 - i, 
	`va_¨g
(
≠
, 
öt64_t
), 10, 
Êags
,

1654 
fõld_width
);

1655 } i‡((
ch
 ='x' || ch ='u'Ë&& 
Àn_mod
 == 0) {

1656 
i
 +
	`c_ôﬂ
(
buf
 + i, 
buf_size
 - i, 
	`va_¨g
(
≠
, ),

1657 
ch
 ='x' ? 16 : 10, 
Êags
, 
fõld_width
);

1658 } i‡((
ch
 ='x' || ch ='u'Ë&& 
Àn_mod
 == 'l') {

1659 
i
 +
	`c_ôﬂ
(
buf
 + i, 
buf_size
 - i, 
	`va_¨g
(
≠
, ),

1660 
ch
 ='x' ? 16 : 10, 
Êags
, 
fõld_width
);

1661 } i‡((
ch
 ='x' || ch ='u'Ë&& 
Àn_mod
 == 'z') {

1662 
i
 +
	`c_ôﬂ
(
buf
 + i, 
buf_size
 - i, 
	`va_¨g
(
≠
, 
size_t
),

1663 
ch
 ='x' ? 16 : 10, 
Êags
, 
fõld_width
);

1664 } i‡(
ch
 == 'p') {

1665 
num
 = (Ë(
uöçå_t
Ë
	`va_¨g
(
≠
, *);

1666 
	`C_SNPRINTF_APPEND_CHAR
('0');

1667 
	`C_SNPRINTF_APPEND_CHAR
('x');

1668 
i
 +
	`c_ôﬂ
(
buf
 + i, 
buf_size
 - i, 
num
, 16, 
Êags
, 0);

1670 #i‚de‡
NO_LIBC


1675 
	`ab‹t
();

1682 i‡(
buf_size
 > 0) {

1683 
buf
[
i
 < (Ë
buf_size
 ? i : () buf_size - 1] = '\0';

1686  
i
;

1687 
	}
}

1690 
	$c_¢¥ötf
(*
buf
, 
size_t
 
buf_size
, c⁄° *
fmt
, ...Ë
WEAK
;

1691 
	$c_¢¥ötf
(*
buf
, 
size_t
 
buf_size
, c⁄° *
fmt
, ...) {

1692 
ªsu…
;

1693 
va_li°
 
≠
;

1694 
	`va_°¨t
(
≠
, 
fmt
);

1695 
ªsu…
 = 
	`c_v¢¥ötf
(
buf
, 
buf_size
, 
fmt
, 
≠
);

1696 
	`va_íd
(
≠
);

1697  
ªsu…
;

1698 
	}
}

1700 #ifde‡
_WIN32


1701 
	$to_wch¨
(c⁄° *
∑th
, 
wch¨_t
 *
wbuf
, 
size_t
 
wbuf_Àn
) {

1702 
ªt
;

1703 
buf
[
MAX_PATH
 * 2], 
buf2
[MAX_PATH * 2], *
p
;

1705 
	`°∫˝y
(
buf
, 
∑th
, (buf));

1706 
buf
[(buf) - 1] = '\0';

1709 
p
 = 
buf
 + 
	`°æí
(buf) - 1;

1710 
p
 > 
buf
 &&Ö[-1] != ':' && (p[0] == '\\' ||Ö[0] == '/')) *p-- = '\0';

1712 
	`mem£t
(
wbuf
, 0, 
wbuf_Àn
 * (
wch¨_t
));

1713 
ªt
 = 
	`Mu…iByãToWideCh¨
(
CP_UTF8
, 0, 
buf
, -1, 
wbuf
, (Ë
wbuf_Àn
);

1719 
	`WideCh¨ToMu…iByã
(
CP_UTF8
, 0, 
wbuf
, (Ë
wbuf_Àn
, 
buf2
, (buf2),

1720 
NULL
, NULL);

1721 i‡(
	`°rcmp
(
buf
, 
buf2
) != 0) {

1722 
wbuf
[0] = 
L
'\0';

1723 
ªt
 = 0;

1726  
ªt
;

1727 
	}
}

1731 c⁄° *
	$c_°∫°r
(c⁄° *
s
, c⁄° *
föd
, 
size_t
 
¶í
Ë
WEAK
;

1732 c⁄° *
	$c_°∫°r
(c⁄° *
s
, c⁄° *
föd
, 
size_t
 
¶í
) {

1733 
size_t
 
föd_Àngth
 = 
	`°æí
(
föd
);

1734 
size_t
 
i
;

1736 
i
 = 0; i < 
¶í
; i++) {

1737 i‡(
i
 + 
föd_Àngth
 > 
¶í
) {

1738  
NULL
;

1741 i‡(
	`°∫cmp
(&
s
[
i
], 
föd
, 
föd_Àngth
) == 0) {

1742  &
s
[
i
];

1746  
NULL
;

1747 
	}
}

1749 #i‡
CS_ENABLE_STRDUP


1750 *
	$°rdup
(c⁄° *
§c
Ë
WEAK
;

1751 *
	$°rdup
(c⁄° *
§c
) {

1752 
size_t
 
Àn
 = 
	`°æí
(
§c
) + 1;

1753 *
ªt
 = 
	`mÆloc
(
Àn
);

1754 i‡(
ªt
 !
NULL
) {

1755 
	`°r˝y
(
ªt
, 
§c
);

1757  
ªt
;

1758 
	}
}

1761 
	$cs_to_hex
(*
to
, c⁄° *
p
, 
size_t
 
Àn
Ë
WEAK
;

1762 
	$cs_to_hex
(*
to
, c⁄° *
p
, 
size_t
 
Àn
) {

1763 c⁄° *
hex
 = "0123456789abcdef";

1765 ; 
Àn
--; 
p
++) {

1766 *
to
++ = 
hex
[
p
[0] >> 4];

1767 *
to
++ = 
hex
[
p
[0] & 0x0f];

1769 *
to
 = '\0';

1770 
	}
}

1772 
	$fourbô
(
ch
) {

1773 i‡(
ch
 >= '0' && ch <= '9') {

1774  
ch
 - '0';

1775 } i‡(
ch
 >= 'a' && ch <= 'f') {

1776  
ch
 - 'a' + 10;

1777 } i‡(
ch
 >= 'A' && ch <= 'F') {

1778  
ch
 - 'A' + 10;

1781 
	}
}

1783 
	$cs_‰om_hex
(*
to
, c⁄° *
p
, 
size_t
 
Àn
Ë
WEAK
;

1784 
	$cs_‰om_hex
(*
to
, c⁄° *
p
, 
size_t
 
Àn
) {

1785 
size_t
 
i
;

1787 
i
 = 0; i < 
Àn
; i += 2) {

1788 *
to
++ = (
	`fourbô
(
p
[
i
]) << 4) + fourbit(p[i + 1]);

1790 *
to
 = '\0';

1791 
	}
}

1793 #i‡
CS_ENABLE_TO64


1794 
öt64_t
 
	$cs_to64
(c⁄° *
s
Ë
WEAK
;

1795 
öt64_t
 
	$cs_to64
(c⁄° *
s
) {

1796 
öt64_t
 
ªsu…
 = 0;

1797 
öt64_t
 
√g
 = 1;

1798 *
s
 && 
	`is•a˚
(() *s)) s++;

1799 i‡(*
s
 == '-') {

1800 
√g
 = -1;

1801 
s
++;

1803 
	`isdigô
((Ë*
s
)) {

1804 
ªsu…
 *= 10;

1805 
ªsu…
 +(*
s
 - '0');

1806 
s
++;

1808  
ªsu…
 * 
√g
;

1809 
	}
}

1812 
	$°r_utû_lowîˇ£
(c⁄° *
s
) {

1813  
	`tﬁowî
(*(c⁄° *Ë
s
);

1814 
	}
}

1816 
	$mg_nˇ£cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
Àn
Ë
WEAK
;

1817 
	$mg_nˇ£cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
Àn
) {

1818 
diff
 = 0;

1820 i‡(
Àn
 > 0) do {

1821 
diff
 = 
	`°r_utû_lowîˇ£
(
s1
++Ë- så_utû_lowîˇ£(
s2
++);

1822 } 
diff
 =0 && 
s1
[-1] !'\0' && --
Àn
 > 0);

1824  
diff
;

1825 
	}
}

1827 
	$mg_ˇ£cmp
(c⁄° *
s1
, c⁄° *
s2
Ë
WEAK
;

1828 
	$mg_ˇ£cmp
(c⁄° *
s1
, c⁄° *
s2
) {

1829  
	`mg_nˇ£cmp
(
s1
, 
s2
, (
size_t
) ~0);

1830 
	}
}

1832 
	$mg_a•rötf
(**
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...Ë
WEAK
;

1833 
	$mg_a•rötf
(**
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...) {

1834 
ªt
;

1835 
va_li°
 
≠
;

1836 
	`va_°¨t
(
≠
, 
fmt
);

1837 
ªt
 = 
	`mg_av¥ötf
(
buf
, 
size
, 
fmt
, 
≠
);

1838 
	`va_íd
(
≠
);

1839  
ªt
;

1840 
	}
}

1842 
	$mg_av¥ötf
(**
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
≠
Ë
WEAK
;

1843 
	$mg_av¥ötf
(**
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
≠
) {

1844 
va_li°
 
≠_c›y
;

1845 
Àn
;

1847 
	`va_c›y
(
≠_c›y
, 
≠
);

1848 
Àn
 = 
	`v¢¥ötf
(*
buf
, 
size
, 
fmt
, 
≠_c›y
);

1849 
	`va_íd
(
≠_c›y
);

1851 i‡(
Àn
 < 0) {

1855 *
buf
 = 
NULL
;

1856 
Àn
 < 0) {

1857 
	`MG_FREE
(*
buf
);

1858 
size
 *= 2;

1859 i‡((*
buf
 = (*Ë
	`MG_MALLOC
(
size
)Ë=
NULL
) ;

1860 
	`va_c›y
(
≠_c›y
, 
≠
);

1861 
Àn
 = 
	`v¢¥ötf
(*
buf
, 
size
, 
fmt
, 
≠_c›y
);

1862 
	`va_íd
(
≠_c›y
);

1865 } i‡(
Àn
 >(Ë
size
) {

1867 i‡((*
buf
 = (*Ë
	`MG_MALLOC
(
Àn
 + 1)Ë=
NULL
) {

1868 
Àn
 = -1;

1870 
	`va_c›y
(
≠_c›y
, 
≠
);

1871 
Àn
 = 
	`v¢¥ötf
(*
buf
,Üí + 1, 
fmt
, 
≠_c›y
);

1872 
	`va_íd
(
≠_c›y
);

1876  
Àn
;

1877 
	}
}

1880 #ifde‡
MG_MODULE_LINES


1888 #i‚de‡
CS_MONGOOSE_SRC_TUN_H_


1889 
	#CS_MONGOOSE_SRC_TUN_H_


	)

1891 #i‡
MG_ENABLE_TUN


1896 #i‚de‡
MG_TUN_RECONNECT_INTERVAL


1897 
	#MG_TUN_RECONNECT_INTERVAL
 1

	)

1900 
	#MG_TUN_PROTO_NAME
 "mg_tun"

	)

1902 
	#MG_TUN_DATA_FRAME
 0x0

	)

1903 
	#MG_TUN_F_END_STREAM
 0x1

	)

1913 
	smg_tun_‰ame
 {

1914 
uöt8_t
 
	mty≥
;

1915 
uöt8_t
 
	mÊags
;

1916 
uöt32_t
 
	m°ªam_id
;

1917 
mg_°r
 
	mbody
;

1920 
	smg_tun_s¶_›ts
 {

1921 #i‡
MG_ENABLE_SSL


1922 c⁄° *
	ms¶_˚π
;

1923 c⁄° *
	ms¶_key
;

1924 c⁄° *
	ms¶_ˇ_˚π
;

1926 
	mdummy
;

1930 
	smg_tun_˛õ¡
 {

1931 
mg_mgr
 *
	mmgr
;

1932 
mg_iÁ˚
 *
	miÁ˚
;

1933 c⁄° *
	mdi•_uæ
;

1934 
mg_tun_s¶_›ts
 
	ms¶
;

1936 
uöt32_t
 
	mœ°_°ªam_id
;

1938 
mg_c⁄√˘i⁄
 *
	mdi•
;

1939 
mg_c⁄√˘i⁄
 *
	mli°íî
;

1940 
mg_c⁄√˘i⁄
 *
	mªc⁄√˘
;

1943 #ifde‡
__˝lu•lus


1947 
mg_c⁄√˘i⁄
 *
mg_tun_böd_›t
(
mg_mgr
 *
mgr
,

1948 c⁄° *
di•©chî
,

1949 
mg_evít_h™dÀr_t
 
h™dÀr
,

1950 
mg_böd_›ts
 
›ts
);

1952 
mg_tun_∑r£_‰ame
(*
d©a
, 
size_t
 
Àn
, 
mg_tun_‰ame
 *
‰ame
);

1954 
mg_tun_£nd_‰ame
(
mg_c⁄√˘i⁄
 *
ws
, 
uöt32_t
 
°ªam_id
,

1955 
uöt8_t
 
ty≥
, uöt8_à
Êags
, 
mg_°r
 
msg
);

1957 
mg_tun_de°roy_˛õ¡
(
mg_tun_˛õ¡
 *
˛õ¡
);

1959 #ifde‡
__˝lu•lus


1966 #ifde‡
MG_MODULE_LINES


1994 
	#MG_MAX_HOST_LEN
 200

	)

1996 
	#MG_COPY_COMMON_CONNECTION_OPTIONS
(
d°
, 
§c
) \

1997 
	`mem˝y
(
d°
, 
§c
, (*d°));

	)

2000 
	#_MG_ALLOWED_CONNECT_FLAGS_MASK
 \

2001 (
MG_F_USER_1
 | 
MG_F_USER_2
 | 
MG_F_USER_3
 | 
MG_F_USER_4
 | 
MG_F_USER_5
 | \

2002 
MG_F_USER_6
 | 
MG_F_WEBSOCKET_NO_DEFRAG
 | 
MG_F_ENABLE_BROADCAST
)

	)

2004 
	#_MG_CALLBACK_MODIFIABLE_FLAGS_MASK
 \

2005 (
MG_F_USER_1
 | 
MG_F_USER_2
 | 
MG_F_USER_3
 | 
MG_F_USER_4
 | 
MG_F_USER_5
 | \

2006 
MG_F_USER_6
 | 
MG_F_WEBSOCKET_NO_DEFRAG
 | 
MG_F_SEND_AND_CLOSE
 | \

2007 
MG_F_CLOSE_IMMEDIATELY
 | 
MG_F_IS_WEBSOCKET
 | 
MG_F_DELETE_CHUNK
)

	)

2009 #i‚de‡
öçå_t


2010 
	#öçå_t
 

	)

2013 
MG_INTERNAL
 
	$mg_add_c⁄n
(
mg_mgr
 *
mgr
, 
mg_c⁄√˘i⁄
 *
c
) {

2014 
	`DBG
(("%∞%p", 
mgr
, 
c
));

2015 
c
->
mgr
 = mgr;

2016 
c
->
√xt
 = 
mgr
->
a˘ive_c⁄√˘i⁄s
;

2017 
mgr
->
a˘ive_c⁄√˘i⁄s
 = 
c
;

2018 
c
->
¥ev
 = 
NULL
;

2019 i‡(
c
->
√xt
 !
NULL
Ëc->√xt->
¥ev
 = c;

2020 i‡(
c
->
sock
 !
INVALID_SOCKET
) {

2021 
c
->
iÁ˚
->
vèbÀ
->
	`add_c⁄n
(c);

2023 
	}
}

2025 
MG_INTERNAL
 
	$mg_ªmove_c⁄n
(
mg_c⁄√˘i⁄
 *
c⁄n
) {

2026 i‡(
c⁄n
->
¥ev
 =
NULL
Ëc⁄n->
mgr
->
a˘ive_c⁄√˘i⁄s
 = c⁄n->
√xt
;

2027 i‡(
c⁄n
->
¥ev
Ëc⁄n->¥ev->
√xt
 = conn->next;

2028 i‡(
c⁄n
->
√xt
Ëc⁄n->√xt->
¥ev
 = conn->prev;

2029 
c⁄n
->
¥ev
 = c⁄n->
√xt
 = 
NULL
;

2030 
c⁄n
->
iÁ˚
->
vèbÀ
->
	`ªmove_c⁄n
(conn);

2031 
	}
}

2033 
MG_INTERNAL
 
	$mg_ˇŒ
(
mg_c⁄√˘i⁄
 *
nc
,

2034 
mg_evít_h™dÀr_t
 
ev_h™dÀr
, 
ev
, *
ev_d©a
) {

2035 i‡(
ev_h™dÀr
 =
NULL
) {

2040 
ev_h™dÀr
 = 
nc
->
¥Ÿo_h™dÀr
 ?Çc->¥Ÿo_h™dÀ∏:Çc->
h™dÀr
;

2042 i‡(
ev
 !
MG_EV_POLL
) {

2043 
	`DBG
(("%∞%†ev=%dÉv_d©a=%∞Êags=%luÑmbl=%d smbl=%d", 
nc
,

2044 
ev_h™dÀr
 =
nc
->
h™dÀr
 ? "u£r" : "¥Ÿo", 
ev
, 
ev_d©a
,Çc->
Êags
,

2045 (Ë
nc
->
ªcv_mbuf
.
Àn
, (Ënc->
£nd_mbuf
.len));

2048 #i‡!
	`deföed
(
NO_LIBC
Ë&& 
MG_ENABLE_HEXDUMP


2050 i‡(
nc
->
mgr
->
hexdump_fûe
 !
NULL
 && 
ev
 !
MG_EV_POLL
 &&

2051 
ev
 !
MG_EV_SEND
 ) {

2052 i‡(
ev
 =
MG_EV_RECV
) {

2053 
	`mg_hexdump_c⁄√˘i⁄
(
nc
,Çc->
mgr
->
hexdump_fûe
,Çc->
ªcv_mbuf
.
buf
,

2054 *(*Ë
ev_d©a
, 
ev
);

2056 
	`mg_hexdump_c⁄√˘i⁄
(
nc
,Çc->
mgr
->
hexdump_fûe
, 
NULL
, 0, 
ev
);

2061 i‡(
ev_h™dÀr
 !
NULL
) {

2062 
Êags_bef‹e
 = 
nc
->
Êags
;

2063 
size_t
 
ªcv_mbuf_bef‹e
 = 
nc
->
ªcv_mbuf
.
Àn
, 
ªcved
;

2064 
	`ev_h™dÀr
(
nc
, 
ev
, 
ev_d©a
);

2065 
ªcved
 = (
ªcv_mbuf_bef‹e
 - 
nc
->
ªcv_mbuf
.
Àn
);

2067 i‡(
ev_h™dÀr
 =
nc
->
h™dÀr
 &&Çc->
Êags
 !
Êags_bef‹e
) {

2068 
nc
->
Êags
 = (
Êags_bef‹e
 & ~
_MG_CALLBACK_MODIFIABLE_FLAGS_MASK
) |

2069 (
nc
->
Êags
 & 
_MG_CALLBACK_MODIFIABLE_FLAGS_MASK
);

2071 i‡(
ªcved
 > 0 && !(
nc
->
Êags
 & 
MG_F_UDP
)) {

2072 
nc
->
iÁ˚
->
vèbÀ
->
	`ªcved
“c, 
ªcved
);

2075 i‡(
ev
 !
MG_EV_POLL
) {

2076 
	`DBG
(("%∞a·î %†Êags=%luÑmbl=%d smbl=%d", 
nc
,

2077 
ev_h™dÀr
 =
nc
->
h™dÀr
 ? "u£r" : "¥Ÿo",Çc->
Êags
,

2078 (Ë
nc
->
ªcv_mbuf
.
Àn
, (Ënc->
£nd_mbuf
.len));

2080 
	}
}

2082 
	$mg_if_timî
(
mg_c⁄√˘i⁄
 *
c
, 
now
) {

2083 i‡(
c
->
ev_timî_time
 > 0 && 
now
 >= c->ev_timer_time) {

2084 
ﬁd_vÆue
 = 
c
->
ev_timî_time
;

2085 
	`mg_ˇŒ
(
c
, 
NULL
, 
MG_EV_TIMER
, &
now
);

2090 i‡(
c
->
ev_timî_time
 =
ﬁd_vÆue
) {

2091 
c
->
ev_timî_time
 = 0;

2094 
	}
}

2096 
	$mg_if_pﬁl
(
mg_c⁄√˘i⁄
 *
nc
, 
time_t
 
now
) {

2097 i‡(!(
nc
->
Êags
 & 
MG_F_SSL
Ë|| (nc->Êag†& 
MG_F_SSL_HANDSHAKE_DONE
)) {

2098 
	`mg_ˇŒ
(
nc
, 
NULL
, 
MG_EV_POLL
, &
now
);

2100 
	}
}

2102 
	$mg_de°roy_c⁄n
(
mg_c⁄√˘i⁄
 *
c⁄n
, 
de°roy_if
) {

2103 i‡(
de°roy_if
Ë
c⁄n
->
iÁ˚
->
vèbÀ
->
	`de°roy_c⁄n
(conn);

2104 i‡(
c⁄n
->
¥Ÿo_d©a
 !
NULL
 && c⁄n->
¥Ÿo_d©a_de°ru˘‹
 != NULL) {

2105 
c⁄n
->
	`¥Ÿo_d©a_de°ru˘‹
(c⁄n->
¥Ÿo_d©a
);

2107 #i‡
MG_ENABLE_SSL


2108 
	`mg_s¶_if_c⁄n_‰ì
(
c⁄n
);

2110 
	`mbuf_‰ì
(&
c⁄n
->
ªcv_mbuf
);

2111 
	`mbuf_‰ì
(&
c⁄n
->
£nd_mbuf
);

2113 
	`mem£t
(
c⁄n
, 0, (*conn));

2114 
	`MG_FREE
(
c⁄n
);

2115 
	}
}

2117 
	$mg_˛o£_c⁄n
(
mg_c⁄√˘i⁄
 *
c⁄n
) {

2118 
	`DBG
(("%∞%lu %d", 
c⁄n
, c⁄n->
Êags
, c⁄n->
sock
));

2119 
	`mg_ªmove_c⁄n
(
c⁄n
);

2120 
c⁄n
->
iÁ˚
->
vèbÀ
->
	`de°roy_c⁄n
(conn);

2121 
	`mg_ˇŒ
(
c⁄n
, 
NULL
, 
MG_EV_CLOSE
, NULL);

2122 
	`mg_de°roy_c⁄n
(
c⁄n
, 0 );

2123 
	}
}

2125 
	$mg_mgr_öô
(
mg_mgr
 *
m
, *
u£r_d©a
) {

2126 
mg_mgr_öô_›ts
 
›ts
;

2127 
	`mem£t
(&
›ts
, 0, (opts));

2128 
	`mg_mgr_öô_›t
(
m
, 
u£r_d©a
, 
›ts
);

2129 
	}
}

2131 
	$mg_mgr_öô_›t
(
mg_mgr
 *
m
, *
u£r_d©a
,

2132 
mg_mgr_öô_›ts
 
›ts
) {

2133 
	`mem£t
(
m
, 0, (*m));

2134 #i‡
MG_ENABLE_BROADCAST


2135 
m
->
˘l
[0] = m->˘l[1] = 
INVALID_SOCKET
;

2137 
m
->
u£r_d©a
 = user_data;

2139 #ifde‡
_WIN32


2141 
WSADATA
 
d©a
;

2142 
	`WSASèπup
(
	`MAKEWORD
(2, 2), &
d©a
);

2144 #ñi‡
	`deföed
(
__unix__
)

2147 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

2150 #i‡
MG_ENABLE_SSL


2152 
öô_d⁄e
;

2153 i‡(!
öô_d⁄e
) {

2154 
	`mg_s¶_if_öô
();

2155 
öô_d⁄e
++;

2160 
i
;

2161 i‡(
›ts
.
num_iÁ˚s
 == 0) {

2162 
›ts
.
num_iÁ˚s
 = 
mg_num_iÁ˚s
;

2163 
›ts
.
iÁ˚s
 = 
mg_iÁ˚s
;

2165 i‡(
›ts
.
maö_iÁ˚
 !
NULL
) {

2166 
›ts
.
iÁ˚s
[
MG_MAIN_IFACE
] = o±s.
maö_iÁ˚
;

2168 
m
->
num_iÁ˚s
 = 
›ts
.num_ifaces;

2169 
m
->
iÁ˚s
 =

2170 (
mg_iÁ˚
 **Ë
	`MG_MALLOC
((*
m
->
iÁ˚s
Ë* 
›ts
.
num_iÁ˚s
);

2171 
i
 = 0; i < 
mg_num_iÁ˚s
; i++) {

2172 
m
->
iÁ˚s
[
i
] = 
	`mg_if_¸óã_iÁ˚
(
›ts
.ifaces[i], m);

2173 
m
->
iÁ˚s
[
i
]->
vèbÀ
->
	`öô
(m->ifaces[i]);

2176 
	`DBG
(("=================================="));

2177 
	`DBG
(("öô mgr=%p", 
m
));

2178 
	}
}

2180 #i‡
MG_ENABLE_JAVASCRIPT


2181 
v7_îr
 
	$mg_£nd_js
(
v7
 *v7, 
v7_vÆ_t
 *
ªs
) {

2182 
v7_vÆ_t
 
¨g0
 = 
	`v7_¨g
(
v7
, 0);

2183 
v7_vÆ_t
 
¨g1
 = 
	`v7_¨g
(
v7
, 1);

2184 
mg_c⁄√˘i⁄
 *
c
 = (mg_c⁄√˘i⁄ *Ë
	`v7_gë_±r
(
v7
, 
¨g0
);

2185 
size_t
 
Àn
 = 0;

2187 i‡(
	`v7_is_°rög
(
¨g1
)) {

2188 c⁄° *
d©a
 = 
	`v7_gë_°rög
(
v7
, &
¨g1
, &
Àn
);

2189 
	`mg_£nd
(
c
, 
d©a
, 
Àn
);

2192 *
ªs
 = 
	`v7_mk_numbî
(
v7
, 
Àn
);

2194  
V7_OK
;

2195 
	}
}

2197 
v7_îr
 
	$mg_íabÀ_javas¸ùt
(
mg_mgr
 *
m
, 
v7
 *v7,

2198 c⁄° *
öô_fûe_«me
) {

2199 
v7_vÆ_t
 
v
;

2200 
m
->
v7
 = v7;

2201 
	`v7_£t_mëhod
(
v7
, 
	`v7_gë_globÆ
(v7), "mg_£nd", 
mg_£nd_js
);

2202  
	`v7_exec_fûe
(
v7
, 
öô_fûe_«me
, &
v
);

2203 
	}
}

2206 
	$mg_mgr_‰ì
(
mg_mgr
 *
m
) {

2207 
mg_c⁄√˘i⁄
 *
c⁄n
, *
tmp_c⁄n
;

2209 
	`DBG
(("%p", 
m
));

2210 i‡(
m
 =
NULL
) ;

2212 
	`mg_mgr_pﬁl
(
m
, 0);

2214 #i‡
MG_ENABLE_BROADCAST


2215 i‡(
m
->
˘l
[0] !
INVALID_SOCKET
Ë
	`˛o£sockë
(m->ctl[0]);

2216 i‡(
m
->
˘l
[1] !
INVALID_SOCKET
Ë
	`˛o£sockë
(m->ctl[1]);

2217 
m
->
˘l
[0] = m->˘l[1] = 
INVALID_SOCKET
;

2220 
c⁄n
 = 
m
->
a˘ive_c⁄√˘i⁄s
; c⁄¿!
NULL
; c⁄¿
tmp_c⁄n
) {

2221 
tmp_c⁄n
 = 
c⁄n
->
√xt
;

2222 
	`mg_˛o£_c⁄n
(
c⁄n
);

2226 
i
;

2227 
i
 = 0; i < 
m
->
num_iÁ˚s
; i++) {

2228 
m
->
iÁ˚s
[
i
]->
vèbÀ
->
	`‰ì
(m->ifaces[i]);

2229 
	`MG_FREE
(
m
->
iÁ˚s
[
i
]);

2231 
	`MG_FREE
(
m
->
iÁ˚s
);

2233 
	}
}

2235 
time_t
 
	$mg_mgr_pﬁl
(
mg_mgr
 *
m
, 
timeout_ms
) {

2236 
i
;

2237 
time_t
 
now
 = 0;

2239 i‡(
m
->
num_iÁ˚s
 == 0) {

2240 
	`LOG
(
LL_ERROR
, ("cannotÖoll:Ço interfaces"));

2244 
i
 = 0; i < 
m
->
num_iÁ˚s
; i++) {

2245 
now
 = 
m
->
iÁ˚s
[
i
]->
vèbÀ
->
	`pﬁl
(m->iÁ˚s[i], 
timeout_ms
);

2247  
now
;

2248 
	}
}

2250 
	$mg_v¥ötf
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
fmt
, 
va_li°
 
≠
) {

2251 
mem
[
MG_VPRINTF_BUFFER_SIZE
], *
buf
 = mem;

2252 
Àn
;

2254 i‡((
Àn
 = 
	`mg_av¥ötf
(&
buf
, (
mem
), 
fmt
, 
≠
)) > 0) {

2255 
	`mg_£nd
(
nc
, 
buf
, 
Àn
);

2257 i‡(
buf
 !
mem
 && bu‡!
NULL
) {

2258 
	`MG_FREE
(
buf
);

2261  
Àn
;

2262 
	}
}

2264 
	$mg_¥ötf
(
mg_c⁄√˘i⁄
 *
c⁄n
, c⁄° *
fmt
, ...) {

2265 
Àn
;

2266 
va_li°
 
≠
;

2267 
	`va_°¨t
(
≠
, 
fmt
);

2268 
Àn
 = 
	`mg_v¥ötf
(
c⁄n
, 
fmt
, 
≠
);

2269 
	`va_íd
(
≠
);

2270  
Àn
;

2271 
	}
}

2273 #i‡
MG_ENABLE_SYNC_RESOLVER


2275 
	$mg_ªsﬁve2
(c⁄° *
ho°
, 
ö_addr
 *
öa
) {

2276 #i‡
MG_ENABLE_GETADDRINFO


2277 
rv
 = 0;

2278 
addröfo
 
höts
, *
£rvöfo
, *
p
;

2279 
sockaddr_ö
 *
h
 = 
NULL
;

2280 
	`mem£t
(&
höts
, 0,  hints);

2281 
höts
.
ai_Ámûy
 = 
AF_INET
;

2282 
höts
.
ai_sockty≥
 = 
SOCK_STREAM
;

2283 i‡((
rv
 = 
	`gëaddröfo
(
ho°
, 
NULL
, NULL, &
£rvöfo
)) != 0) {

2284 
	`DBG
(("gëaddröfo(%sËÁûed: %s", 
ho°
, 
	`°ªº‹
(
	`mg_gë_î∫o
())));

2287 
p
 = 
£rvöfo
;Ö !
NULL
;Ö =Ö->
ai_√xt
) {

2288 
	`mem˝y
(&
h
, &
p
->
ai_addr
, (
sockaddr_ö
 *));

2289 
	`mem˝y
(
öa
, &
h
->
sö_addr
, (ina));

2291 
	`‰ìaddröfo
(
£rvöfo
);

2294 
ho°ít
 *
he
;

2295 i‡((
he
 = 
	`gëho°by«me
(
ho°
)Ë=
NULL
) {

2296 
	`DBG
(("gëho°by«me(%sËÁûed: %s", 
ho°
, 
	`°ªº‹
(
	`mg_gë_î∫o
())));

2298 
	`mem˝y
(
öa
, 
he
->
h_addr_li°
[0], (*ina));

2303 
	}
}

2305 
	$mg_ªsﬁve
(c⁄° *
ho°
, *
buf
, 
size_t
 
n
) {

2306 
ö_addr
 
ad
;

2307  
	`mg_ªsﬁve2
(
ho°
, &
ad
Ë? 
	`¢¥ötf
(
buf
, 
n
, "%s", 
	`öë_¡ﬂ
(ad)) : 0;

2308 
	}
}

2311 
MG_INTERNAL
 
mg_c⁄√˘i⁄
 *
	$mg_¸óã_c⁄√˘i⁄_ba£
(

2312 
mg_mgr
 *
mgr
, 
mg_evít_h™dÀr_t
 
ˇŒback
,

2313 
mg_add_sock_›ts
 
›ts
) {

2314 
mg_c⁄√˘i⁄
 *
c⁄n
;

2316 i‡((
c⁄n
 = (
mg_c⁄√˘i⁄
 *Ë
	`MG_CALLOC
(1, (*c⁄n))Ë!
NULL
) {

2317 
c⁄n
->
sock
 = 
INVALID_SOCKET
;

2318 
c⁄n
->
h™dÀr
 = 
ˇŒback
;

2319 
c⁄n
->
mgr
 = mgr;

2320 
c⁄n
->
œ°_io_time
 = (
time_t
Ë
	`mg_time
();

2321 
c⁄n
->
iÁ˚
 =

2322 (
›ts
.
iÁ˚
 !
NULL
 ? o±s.iÁ˚ : 
mgr
->
iÁ˚s
[
MG_MAIN_IFACE
]);

2323 
c⁄n
->
Êags
 = 
›ts
.Êag†& 
_MG_ALLOWED_CONNECT_FLAGS_MASK
;

2324 
c⁄n
->
u£r_d©a
 = 
›ts
.user_data;

2330 
c⁄n
->
ªcv_mbuf_limô
 = ~0;

2332 
	`MG_SET_PTRPTR
(
›ts
.
îr‹_°rög
, "failedÅo create connection");

2335  
c⁄n
;

2336 
	}
}

2338 
MG_INTERNAL
 
mg_c⁄√˘i⁄
 *
	$mg_¸óã_c⁄√˘i⁄
(

2339 
mg_mgr
 *
mgr
, 
mg_evít_h™dÀr_t
 
ˇŒback
,

2340 
mg_add_sock_›ts
 
›ts
) {

2341 
mg_c⁄√˘i⁄
 *
c⁄n
 = 
	`mg_¸óã_c⁄√˘i⁄_ba£
(
mgr
, 
ˇŒback
, 
›ts
);

2343 i‡(
c⁄n
 !
NULL
 && !c⁄n->
iÁ˚
->
vèbÀ
->
	`¸óã_c⁄n
(conn)) {

2344 
	`MG_FREE
(
c⁄n
);

2345 
c⁄n
 = 
NULL
;

2347 i‡(
c⁄n
 =
NULL
) {

2348 
	`MG_SET_PTRPTR
(
›ts
.
îr‹_°rög
, "failedÅo init connection");

2351  
c⁄n
;

2352 
	}
}

2367 
MG_INTERNAL
 
	$mg_∑r£_addªss
(c⁄° *
°r
, 
sockë_addªss
 *
ß
,

2368 *
¥Ÿo
, *
ho°
, 
size_t
 
ho°_Àn
) {

2369 
a
, 
b
, 
c
, 
d
, 
p‹t
 = 0;

2370 
ch
, 
Àn
 = 0;

2371 #i‡
MG_ENABLE_IPV6


2372 
buf
[100];

2380 
	`mem£t
(
ß
, 0, (*sa));

2381 
ß
->
sö
.
sö_Ámûy
 = 
AF_INET
;

2383 *
¥Ÿo
 = 
SOCK_STREAM
;

2385 i‡(
	`°∫cmp
(
°r
, "udp://", 6) == 0) {

2386 
°r
 += 6;

2387 *
¥Ÿo
 = 
SOCK_DGRAM
;

2388 } i‡(
	`°∫cmp
(
°r
, "tcp://", 6) == 0) {

2389 
°r
 += 6;

2392 i‡(
	`ssˇnf
(
°r
, "%u.%u.%u.%u:%u%n", &
a
, &
b
, &
c
, &
d
, &
p‹t
, &
Àn
) == 5) {

2394 
ß
->
sö
.
sö_addr
.
s_addr
 =

2395 
	`ht⁄l
(((
uöt32_t
Ë
a
 << 24Ë| ((uöt32_tË
b
 << 16Ë| 
c
 << 8 | 
d
);

2396 
ß
->
sö
.
sö_p‹t
 = 
	`ht⁄s
((
uöt16_t
Ë
p‹t
);

2397 #i‡
MG_ENABLE_IPV6


2398 } i‡(
	`ssˇnf
(
°r
, "[%99[^]]]:%u%n", 
buf
, &
p‹t
, &
Àn
) == 2 &&

2399 
	`öë_±⁄
(
AF_INET6
, 
buf
, &
ß
->
sö6
.
sö6_addr
)) {

2401 
ß
->
sö6
.
sö6_Ámûy
 = 
AF_INET6
;

2402 
ß
->
sö
.
sö_p‹t
 = 
	`ht⁄s
((
uöt16_t
Ë
p‹t
);

2404 #i‡
MG_ENABLE_ASYNC_RESOLVER


2405 } i‡(
	`°æí
(
°r
Ë< 
ho°_Àn
 &&

2406 
	`ssˇnf
(
°r
, "%[^ :]:%u%n", 
ho°
, &
p‹t
, &
Àn
) == 2) {

2407 
ß
->
sö
.
sö_p‹t
 = 
	`ht⁄s
((
uöt16_t
Ë
p‹t
);

2408 i‡(
	`mg_ªsﬁve_‰om_ho°s_fûe
(
ho°
, 
ß
) != 0) {

2415 i‡(
	`mg_nˇ£cmp
(
ho°
, "localhost", 9) != 0) {

2419 #i‡
MG_ENABLE_SYNC_RESOLVER


2420 i‡(!
	`mg_ªsﬁve2
(
ho°
, &
ß
->
sö
.
sö_addr
)) {

2428 } i‡(
	`ssˇnf
(
°r
, ":%u%n", &
p‹t
, &
Àn
) == 1 ||

2429 
	`ssˇnf
(
°r
, "%u%n", &
p‹t
, &
Àn
) == 1) {

2431 
ß
->
sö
.
sö_p‹t
 = 
	`ht⁄s
((
uöt16_t
Ë
p‹t
);

2437 (Ë
ho°
;

2438 (Ë
ho°_Àn
;

2440 
ch
 = 
°r
[
Àn
];

2441  
p‹t
 < 0xffffUL && (
ch
 ='\0' || ch =',' || 
	`is•a˚
(ch)Ë? 
Àn
 : -1;

2442 
	}
}

2444 
mg_c⁄√˘i⁄
 *
	$mg_if_ac˚±_√w_c⁄n
(
mg_c⁄√˘i⁄
 *
lc
) {

2445 
mg_add_sock_›ts
 
›ts
;

2446 
mg_c⁄√˘i⁄
 *
nc
;

2447 
	`mem£t
(&
›ts
, 0, (opts));

2448 
nc
 = 
	`mg_¸óã_c⁄√˘i⁄
(
lc
->
mgr
,Üc->
h™dÀr
, 
›ts
);

2449 i‡(
nc
 =
NULL
)  NULL;

2450 
nc
->
li°íî
 = 
lc
;

2451 
nc
->
¥Ÿo_h™dÀr
 = 
lc
->proto_handler;

2452 
nc
->
u£r_d©a
 = 
lc
->user_data;

2453 
nc
->
ªcv_mbuf_limô
 = 
lc
->recv_mbuf_limit;

2454 
nc
->
iÁ˚
 = 
lc
->iface;

2455 i‡(
lc
->
Êags
 & 
MG_F_SSL
Ë
nc
->flags |= MG_F_SSL;

2456 
	`mg_add_c⁄n
(
nc
->
mgr
,Çc);

2457 
	`DBG
(("%∞%∞%d %d", 
lc
, 
nc
,Çc->
sock
, (Ënc->
Êags
));

2458  
nc
;

2459 
	}
}

2461 
	$mg_if_ac˚±_t˝_cb
(
mg_c⁄√˘i⁄
 *
nc
, 
sockë_addªss
 *
ß
,

2462 
size_t
 
ß_Àn
) {

2463 (Ë
ß_Àn
;

2464 
nc
->
ß
 = *sa;

2465 
	`mg_ˇŒ
(
nc
, 
NULL
, 
MG_EV_ACCEPT
, &nc->
ß
);

2466 
	}
}

2468 
	$mg_£nd
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
buf
, 
Àn
) {

2469 
nc
->
œ°_io_time
 = (
time_t
Ë
	`mg_time
();

2470 i‡(
nc
->
Êags
 & 
MG_F_UDP
) {

2471 
nc
->
iÁ˚
->
vèbÀ
->
	`udp_£nd
“c, 
buf
, 
Àn
);

2473 
nc
->
iÁ˚
->
vèbÀ
->
	`t˝_£nd
“c, 
buf
, 
Àn
);

2475 #i‡!
	`deföed
(
NO_LIBC
Ë&& 
MG_ENABLE_HEXDUMP


2476 i‡(
nc
->
mgr
 &&Çc->mgr->
hexdump_fûe
 !
NULL
) {

2477 
	`mg_hexdump_c⁄√˘i⁄
(
nc
,Çc->
mgr
->
hexdump_fûe
, 
buf
, 
Àn
, 
MG_EV_SEND
);

2480 
	}
}

2482 
	$mg_if_£¡_cb
(
mg_c⁄√˘i⁄
 *
nc
, 
num_£¡
) {

2483 i‡(
num_£¡
 < 0) {

2484 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

2486 
	`mg_ˇŒ
(
nc
, 
NULL
, 
MG_EV_SEND
, &
num_£¡
);

2487 
	}
}

2489 
MG_INTERNAL
 
	$mg_ªcv_comm⁄
(
mg_c⁄√˘i⁄
 *
nc
, *
buf
, 
Àn
,

2490 
own
) {

2491 
	`DBG
(("%∞%d %u", 
nc
, 
Àn
, (Ënc->
ªcv_mbuf
.len));

2492 i‡(
nc
->
Êags
 & 
MG_F_CLOSE_IMMEDIATELY
) {

2493 
	`DBG
(("%∞disˇrded %d byãs", 
nc
, 
Àn
));

2498 i‡(
own
) {

2499 
	`MG_FREE
(
buf
);

2503 
nc
->
œ°_io_time
 = (
time_t
Ë
	`mg_time
();

2504 i‡(!
own
) {

2505 
	`mbuf_≠≥nd
(&
nc
->
ªcv_mbuf
, 
buf
, 
Àn
);

2506 } i‡(
nc
->
ªcv_mbuf
.
Àn
 == 0) {

2508 
	`mbuf_‰ì
(&
nc
->
ªcv_mbuf
);

2509 
nc
->
ªcv_mbuf
.
buf
 = (*) buf;

2510 
nc
->
ªcv_mbuf
.
size
 =Çc->ªcv_mbuf.
Àn
 =Üen;

2512 
	`mbuf_≠≥nd
(&
nc
->
ªcv_mbuf
, 
buf
, 
Àn
);

2513 
	`MG_FREE
(
buf
);

2515 
	`mg_ˇŒ
(
nc
, 
NULL
, 
MG_EV_RECV
, &
Àn
);

2516 
	}
}

2518 
	$mg_if_ªcv_t˝_cb
(
mg_c⁄√˘i⁄
 *
nc
, *
buf
, 
Àn
, 
own
) {

2519 
	`mg_ªcv_comm⁄
(
nc
, 
buf
, 
Àn
, 
own
);

2520 
	}
}

2522 
	$mg_if_ªcv_udp_cb
(
mg_c⁄√˘i⁄
 *
nc
, *
buf
, 
Àn
,

2523 
sockë_addªss
 *
ß
, 
size_t
 
ß_Àn
) {

2524 
	`as£π
(
nc
->
Êags
 & 
MG_F_UDP
);

2525 
	`DBG
(("%∞%u", 
nc
, (Ë
Àn
));

2526 i‡(
nc
->
Êags
 & 
MG_F_LISTENING
) {

2527 
mg_c⁄√˘i⁄
 *
lc
 = 
nc
;

2532 
nc
 = 
	`mg_√xt
(
lc
->
mgr
, 
NULL
);Çc != NULL;Çc = mg_next(lc->mgr,Çc)) {

2533 i‡(
	`memcmp
(&
nc
->
ß
.ß, &ß->ß, 
ß_Àn
Ë=0 &&Çc->
li°íî
 =
lc
) {

2537 i‡(
nc
 =
NULL
) {

2538 
mg_add_sock_›ts
 
›ts
;

2539 
	`mem£t
(&
›ts
, 0, (opts));

2541 
nc
 = 
	`mg_¸óã_c⁄√˘i⁄_ba£
(
lc
->
mgr
,Üc->
h™dÀr
, 
›ts
);

2542 i‡(
nc
 !
NULL
) {

2543 
nc
->
sock
 = 
lc
->sock;

2544 
nc
->
li°íî
 = 
lc
;

2545 
nc
->
ß
 = *sa;

2546 
nc
->
¥Ÿo_h™dÀr
 = 
lc
->proto_handler;

2547 
nc
->
u£r_d©a
 = 
lc
->user_data;

2548 
nc
->
ªcv_mbuf_limô
 = 
lc
->recv_mbuf_limit;

2549 
nc
->
Êags
 = 
MG_F_UDP
;

2561 
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

2562 
	`mg_add_c⁄n
(
lc
->
mgr
, 
nc
);

2563 
	`mg_ˇŒ
(
nc
, 
NULL
, 
MG_EV_ACCEPT
, &nc->
ß
);

2565 
	`DBG
(("OOM"));

2570 i‡(
nc
 !
NULL
) {

2571 
	`mg_ªcv_comm⁄
(
nc
, 
buf
, 
Àn
, 1);

2574 
	`MG_FREE
(
buf
);

2575 
nc
->
iÁ˚
->
vèbÀ
->
	`ªcved
“c, 
Àn
);

2577 
	}
}

2585 
MG_INTERNAL
 
mg_c⁄√˘i⁄
 *
	$mg_do_c⁄√˘
(
mg_c⁄√˘i⁄
 *
nc
,

2586 
¥Ÿo
,

2587 
sockë_addªss
 *
ß
) {

2588 
	`DBG
(("%∞%s://%s:%hu", 
nc
, 
¥Ÿo
 =
SOCK_DGRAM
 ? "udp" : "tcp",

2589 
	`öë_¡ﬂ
(
ß
->
sö
.
sö_addr
), 
	`¡ohs
(ß->sö.
sö_p‹t
)));

2591 
nc
->
Êags
 |
MG_F_CONNECTING
;

2592 i‡(
¥Ÿo
 =
SOCK_DGRAM
) {

2593 
nc
->
iÁ˚
->
vèbÀ
->
	`c⁄√˘_udp
(nc);

2595 
nc
->
iÁ˚
->
vèbÀ
->
	`c⁄√˘_t˝
“c, 
ß
);

2597 
	`mg_add_c⁄n
(
nc
->
mgr
,Çc);

2598  
nc
;

2599 
	}
}

2601 
	$mg_if_c⁄√˘_cb
(
mg_c⁄√˘i⁄
 *
nc
, 
îr
) {

2602 
	`DBG
(("%∞c⁄√˘,Éº=%d", 
nc
, 
îr
));

2603 
nc
->
Êags
 &~
MG_F_CONNECTING
;

2604 i‡(
îr
 != 0) {

2605 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

2607 
	`mg_ˇŒ
(
nc
, 
NULL
, 
MG_EV_CONNECT
, &
îr
);

2608 
	}
}

2610 #i‡
MG_ENABLE_ASYNC_RESOLVER


2617 
	$ªsﬁve_cb
(
mg_dns_mesßge
 *
msg
, *
d©a
,

2618 
mg_ªsﬁve_îr
 
e
) {

2619 
mg_c⁄√˘i⁄
 *
nc
 = (mg_c⁄√˘i⁄ *Ë
d©a
;

2620 
i
;

2621 
Áûuª
 = -1;

2623 
nc
->
Êags
 &~
MG_F_RESOLVING
;

2624 i‡(
msg
 !
NULL
) {

2628 
i
 = 0; i < 
msg
->
num_™swîs
; i++) {

2629 i‡(
msg
->
™swîs
[
i
].
πy≥
 =
MG_DNS_A_RECORD
) {

2634 
	`mg_dns_∑r£_ªc‹d_d©a
(
msg
, &msg->
™swîs
[
i
], &
nc
->
ß
.
sö
.
sö_addr
,

2636 
	`mg_do_c⁄√˘
(
nc
,Çc->
Êags
 & 
MG_F_UDP
 ? 
SOCK_DGRAM
 : 
SOCK_STREAM
,

2637 &
nc
->
ß
);

2643 i‡(
e
 =
MG_RESOLVE_TIMEOUT
) {

2644 
now
 = 
	`mg_time
();

2645 
	`mg_ˇŒ
(
nc
, 
NULL
, 
MG_EV_TIMER
, &
now
);

2651 
	`mg_ˇŒ
(
nc
, 
NULL
, 
MG_EV_CONNECT
, &
Áûuª
);

2652 
	`mg_ˇŒ
(
nc
, 
NULL
, 
MG_EV_CLOSE
, NULL);

2653 
	`mg_de°roy_c⁄n
(
nc
, 1 );

2654 
	}
}

2657 
mg_c⁄√˘i⁄
 *
	$mg_c⁄√˘
(
mg_mgr
 *
mgr
, c⁄° *
addªss
,

2658 
mg_evít_h™dÀr_t
 
ˇŒback
) {

2659 
mg_c⁄√˘_›ts
 
›ts
;

2660 
	`mem£t
(&
›ts
, 0, (opts));

2661  
	`mg_c⁄√˘_›t
(
mgr
, 
addªss
, 
ˇŒback
, 
›ts
);

2662 
	}
}

2664 
mg_c⁄√˘i⁄
 *
	$mg_c⁄√˘_›t
(
mg_mgr
 *
mgr
, c⁄° *
addªss
,

2665 
mg_evít_h™dÀr_t
 
ˇŒback
,

2666 
mg_c⁄√˘_›ts
 
›ts
) {

2667 
mg_c⁄√˘i⁄
 *
nc
 = 
NULL
;

2668 
¥Ÿo
, 
rc
;

2669 
mg_add_sock_›ts
 
add_sock_›ts
;

2670 
ho°
[
MG_MAX_HOST_LEN
];

2672 
	`MG_COPY_COMMON_CONNECTION_OPTIONS
(&
add_sock_›ts
, &
›ts
);

2674 i‡((
nc
 = 
	`mg_¸óã_c⁄√˘i⁄
(
mgr
, 
ˇŒback
, 
add_sock_›ts
)Ë=
NULL
) {

2675  
NULL
;

2678 i‡((
rc
 = 
	`mg_∑r£_addªss
(
addªss
, &
nc
->
ß
, &
¥Ÿo
, 
ho°
, (host))) <

2681 
	`MG_SET_PTRPTR
(
›ts
.
îr‹_°rög
, "cannotÖarseáddress");

2682 
	`mg_de°roy_c⁄n
(
nc
, 1 );

2683  
NULL
;

2686 
nc
->
Êags
 |
›ts
.Êag†& 
_MG_ALLOWED_CONNECT_FLAGS_MASK
;

2687 
nc
->
Êags
 |(
¥Ÿo
 =
SOCK_DGRAM
Ë? 
MG_F_UDP
 : 0;

2688 
nc
->
u£r_d©a
 = 
›ts
.user_data;

2690 #i‡
MG_ENABLE_SSL


2691 
	`DBG
(("%∞%†%s,%s,%s", 
nc
, 
addªss
, (
›ts
.
s¶_˚π
 ? opts.ssl_cert : "-"),

2692 (
›ts
.
s¶_key
 ? opts.ssl_key : "-"),

2693 (
›ts
.
s¶_ˇ_˚π
 ? opts.ssl_ca_cert : "-")));

2695 i‡(
›ts
.
s¶_˚π
 !
NULL
 || o±s.
s¶_ˇ_˚π
 != NULL ||

2696 
›ts
.
s¶_psk_idítôy
 !
NULL
) {

2697 c⁄° *
îr_msg
 = 
NULL
;

2698 
mg_s¶_if_c⁄n_∑øms
 
∑øms
;

2699 i‡(
nc
->
Êags
 & 
MG_F_UDP
) {

2700 
	`MG_SET_PTRPTR
(
›ts
.
îr‹_°rög
, "SSL for UDP isÇot supported");

2701 
	`mg_de°roy_c⁄n
(
nc
, 1 );

2702  
NULL
;

2704 
	`mem£t
(&
∑øms
, 0, (params));

2705 
∑øms
.
˚π
 = 
›ts
.
s¶_˚π
;

2706 
∑øms
.
key
 = 
›ts
.
s¶_key
;

2707 
∑øms
.
ˇ_˚π
 = 
›ts
.
s¶_ˇ_˚π
;

2708 
∑øms
.
cùhî_suôes
 = 
›ts
.
s¶_cùhî_suôes
;

2709 
∑øms
.
psk_idítôy
 = 
›ts
.
s¶_psk_idítôy
;

2710 
∑øms
.
psk_key
 = 
›ts
.
s¶_psk_key
;

2711 i‡(
›ts
.
s¶_ˇ_˚π
 !
NULL
) {

2712 i‡(
›ts
.
s¶_£rvî_«me
 !
NULL
) {

2713 i‡(
	`°rcmp
(
›ts
.
s¶_£rvî_«me
, "*") != 0) {

2714 
∑øms
.
£rvî_«me
 = 
›ts
.
s¶_£rvî_«me
;

2716 } i‡(
rc
 == 0) {

2717 
∑øms
.
£rvî_«me
 = 
ho°
;

2720 i‡(
	`mg_s¶_if_c⁄n_öô
(
nc
, &
∑øms
, &
îr_msg
Ë!
MG_SSL_OK
) {

2721 
	`MG_SET_PTRPTR
(
›ts
.
îr‹_°rög
, 
îr_msg
);

2722 
	`mg_de°roy_c⁄n
(
nc
, 1 );

2723  
NULL
;

2725 
nc
->
Êags
 |
MG_F_SSL
;

2729 i‡(
rc
 == 0) {

2730 #i‡
MG_ENABLE_ASYNC_RESOLVER


2735 
mg_c⁄√˘i⁄
 *
dns_c⁄n
 = 
NULL
;

2736 
mg_ªsﬁve_async_›ts
 
o
;

2737 
	`mem£t
(&
o
, 0, (o));

2738 
o
.
dns_c⁄n
 = &dns_conn;

2739 i‡(
	`mg_ªsﬁve_async_›t
(
nc
->
mgr
, 
ho°
, 
MG_DNS_A_RECORD
, 
ªsﬁve_cb
,Çc,

2740 
o
) != 0) {

2741 
	`MG_SET_PTRPTR
(
›ts
.
îr‹_°rög
, "cannot schedule DNSÜookup");

2742 
	`mg_de°roy_c⁄n
(
nc
, 1 );

2743  
NULL
;

2745 
nc
->
¥iv_2
 = 
dns_c⁄n
;

2746 
nc
->
Êags
 |
MG_F_RESOLVING
;

2747  
nc
;

2749 
	`MG_SET_PTRPTR
(
›ts
.
îr‹_°rög
, "Resolver is disabled");

2750 
	`mg_de°roy_c⁄n
(
nc
, 1 );

2751  
NULL
;

2755  
	`mg_do_c⁄√˘
(
nc
, 
¥Ÿo
, &nc->
ß
);

2757 
	}
}

2759 
mg_c⁄√˘i⁄
 *
	$mg_böd
(
mg_mgr
 *
§v
, c⁄° *
addªss
,

2760 
mg_evít_h™dÀr_t
 
evít_h™dÀr
) {

2761 
mg_böd_›ts
 
›ts
;

2762 
	`mem£t
(&
›ts
, 0, (opts));

2763  
	`mg_böd_›t
(
§v
, 
addªss
, 
evít_h™dÀr
, 
›ts
);

2764 
	}
}

2766 
mg_c⁄√˘i⁄
 *
	$mg_böd_›t
(
mg_mgr
 *
mgr
, c⁄° *
addªss
,

2767 
mg_evít_h™dÀr_t
 
ˇŒback
,

2768 
mg_böd_›ts
 
›ts
) {

2769 
sockë_addªss
 
ß
;

2770 
mg_c⁄√˘i⁄
 *
nc
 = 
NULL
;

2771 
¥Ÿo
, 
rc
;

2772 
mg_add_sock_›ts
 
add_sock_›ts
;

2773 
ho°
[
MG_MAX_HOST_LEN
];

2775 
	`MG_COPY_COMMON_CONNECTION_OPTIONS
(&
add_sock_›ts
, &
›ts
);

2777 #i‡
MG_ENABLE_TUN


2778 i‡(
	`mg_°∫cmp
(
	`mg_mk_°r
(
addªss
), mg_mk_str("ws://"), 5) == 0 ||

2779 
	`mg_°∫cmp
(
	`mg_mk_°r
(
addªss
), mg_mk_str("wss://"), 6) == 0) {

2780  
	`mg_tun_böd_›t
(
mgr
, 
addªss
, 
ˇŒback
, 
›ts
);

2784 i‡(
	`mg_∑r£_addªss
(
addªss
, &
ß
, &
¥Ÿo
, 
ho°
, (host)) <= 0) {

2785 
	`MG_SET_PTRPTR
(
›ts
.
îr‹_°rög
, "cannotÖarseáddress");

2786  
NULL
;

2789 
nc
 = 
	`mg_¸óã_c⁄√˘i⁄
(
mgr
, 
ˇŒback
, 
add_sock_›ts
);

2790 i‡(
nc
 =
NULL
) {

2791  
NULL
;

2794 
nc
->
ß
 = sa;

2795 
nc
->
Êags
 |
MG_F_LISTENING
;

2796 i‡(
¥Ÿo
 =
SOCK_DGRAM
Ë
nc
->
Êags
 |
MG_F_UDP
;

2798 #i‡
MG_ENABLE_SSL


2799 
	`DBG
(("%∞%†%s,%s,%s", 
nc
, 
addªss
, (
›ts
.
s¶_˚π
 ? opts.ssl_cert : "-"),

2800 (
›ts
.
s¶_key
 ? opts.ssl_key : "-"),

2801 (
›ts
.
s¶_ˇ_˚π
 ? opts.ssl_ca_cert : "-")));

2803 i‡(
›ts
.
s¶_˚π
 !
NULL
 || o±s.
s¶_ˇ_˚π
 != NULL) {

2804 c⁄° *
îr_msg
 = 
NULL
;

2805 
mg_s¶_if_c⁄n_∑øms
 
∑øms
;

2806 i‡(
nc
->
Êags
 & 
MG_F_UDP
) {

2807 
	`MG_SET_PTRPTR
(
›ts
.
îr‹_°rög
, "SSL for UDP isÇot supported");

2808 
	`mg_de°roy_c⁄n
(
nc
, 1 );

2809  
NULL
;

2811 
	`mem£t
(&
∑øms
, 0, (params));

2812 
∑øms
.
˚π
 = 
›ts
.
s¶_˚π
;

2813 
∑øms
.
key
 = 
›ts
.
s¶_key
;

2814 
∑øms
.
ˇ_˚π
 = 
›ts
.
s¶_ˇ_˚π
;

2815 
∑øms
.
cùhî_suôes
 = 
›ts
.
s¶_cùhî_suôes
;

2816 i‡(
	`mg_s¶_if_c⁄n_öô
(
nc
, &
∑øms
, &
îr_msg
Ë!
MG_SSL_OK
) {

2817 
	`MG_SET_PTRPTR
(
›ts
.
îr‹_°rög
, 
îr_msg
);

2818 
	`mg_de°roy_c⁄n
(
nc
, 1 );

2819  
NULL
;

2821 
nc
->
Êags
 |
MG_F_SSL
;

2825 i‡(
nc
->
Êags
 & 
MG_F_UDP
) {

2826 
rc
 = 
nc
->
iÁ˚
->
vèbÀ
->
	`li°í_udp
“c, &nc->
ß
);

2828 
rc
 = 
nc
->
iÁ˚
->
vèbÀ
->
	`li°í_t˝
“c, &nc->
ß
);

2830 i‡(
rc
 != 0) {

2831 
	`DBG
(("FaûedÅÿ›íÜi°íî: %d", 
rc
));

2832 
	`MG_SET_PTRPTR
(
›ts
.
îr‹_°rög
, "failedÅo openÜistener");

2833 
	`mg_de°roy_c⁄n
(
nc
, 1 );

2834  
NULL
;

2836 
	`mg_add_c⁄n
(
nc
->
mgr
,Çc);

2838  
nc
;

2839 
	}
}

2841 
mg_c⁄√˘i⁄
 *
	$mg_√xt
(
mg_mgr
 *
s
, 
mg_c⁄√˘i⁄
 *
c⁄n
) {

2842  
c⁄n
 =
NULL
 ? 
s
->
a˘ive_c⁄√˘i⁄s
 : c⁄n->
√xt
;

2843 
	}
}

2845 #i‡
MG_ENABLE_BROADCAST


2846 
	$mg_brﬂdˇ°
(
mg_mgr
 *
mgr
, 
mg_evít_h™dÀr_t
 
cb
, *
d©a
,

2847 
size_t
 
Àn
) {

2848 
˘l_msg
 ctl_msg;

2857 i‡(
mgr
->
˘l
[0] !
INVALID_SOCKET
 && 
d©a
 !
NULL
 &&

2858 
Àn
 < (
˘l_msg
.
mesßge
)) {

2859 
size_t
 
dummy
;

2861 
˘l_msg
.
ˇŒback
 = 
cb
;

2862 
	`mem˝y
(
˘l_msg
.
mesßge
, 
d©a
, 
Àn
);

2863 
dummy
 = 
	`MG_SEND_FUNC
(
mgr
->
˘l
[0], (*Ë&
˘l_msg
,

2864 
	`off£tof
(
˘l_msg
, 
mesßge
Ë+ 
Àn
, 0);

2865 
dummy
 = 
	`MG_RECV_FUNC
(
mgr
->
˘l
[0], (*Ë&
Àn
, 1, 0);

2866 (Ë
dummy
;

2868 
	}
}

2871 
	$isbyã
(
n
) {

2872  
n
 >= 0 &&Ç <= 255;

2873 
	}
}

2875 
	$∑r£_√t
(c⁄° *
•ec
, 
uöt32_t
 *
√t
, uöt32_à*
mask
) {

2876 
n
, 
a
, 
b
, 
c
, 
d
, 
¶ash
 = 32, 
Àn
 = 0;

2878 i‡((
	`ssˇnf
(
•ec
, "%d.%d.%d.%d/%d%n", &
a
, &
b
, &
c
, &
d
, &
¶ash
, &
n
) == 5 ||

2879 
	`ssˇnf
(
•ec
, "%d.%d.%d.%d%n", &
a
, &
b
, &
c
, &
d
, &
n
) == 4) &&

2880 
	`isbyã
(
a
Ë&& isbyã(
b
Ë&& isbyã(
c
Ë&& isbyã(
d
Ë&& 
¶ash
 >= 0 &&

2881 
¶ash
 < 33) {

2882 
Àn
 = 
n
;

2883 *
√t
 =

2884 ((
uöt32_t
Ë
a
 << 24Ë| ((uöt32_tË
b
 << 16Ë| ((uöt32_tË
c
 << 8Ë| 
d
;

2885 *
mask
 = 
¶ash
 ? 0xffffffffU << (32 - slash) : 0;

2888  
Àn
;

2889 
	}
}

2891 
	$mg_check_ù_a˛
(c⁄° *
a˛
, 
uöt32_t
 
ªmŸe_ù
) {

2892 
Ælowed
, 
Êag
;

2893 
uöt32_t
 
√t
, 
mask
;

2894 
mg_°r
 
vec
;

2897 
Ælowed
 = (
a˛
 =
NULL
 || *acl == '\0') ? '+' : '-';

2899 (
a˛
 = 
	`mg_√xt_comma_li°_íåy
◊˛, &
vec
, 
NULL
)) != NULL) {

2900 
Êag
 = 
vec
.
p
[0];

2901 i‡((
Êag
 != '+' && flag != '-') ||

2902 
	`∑r£_√t
(&
vec
.
p
[1], &
√t
, &
mask
) == 0) {

2906 i‡(
√t
 =(
ªmŸe_ù
 & 
mask
)) {

2907 
Ælowed
 = 
Êag
;

2911 
	`DBG
(("%08x %c", 
ªmŸe_ù
, 
Ælowed
));

2912  
Ælowed
 == '+';

2913 
	}
}

2916 
	$mg_f‹w¨d
(
mg_c⁄√˘i⁄
 *
‰om
, mg_c⁄√˘i⁄ *
to
) {

2917 
	`mg_£nd
(
to
, 
‰om
->
ªcv_mbuf
.
buf
, from->ªcv_mbuf.
Àn
);

2918 
	`mbuf_ªmove
(&
‰om
->
ªcv_mbuf
, from->ªcv_mbuf.
Àn
);

2919 
	}
}

2921 
	$mg_£t_timî
(
mg_c⁄√˘i⁄
 *
c
, 
time°amp
) {

2922 
ªsu…
 = 
c
->
ev_timî_time
;

2923 
c
->
ev_timî_time
 = 
time°amp
;

2929 
	`DBG
(("%∞%∞%d -> %lu", 
c
, c->
¥iv_2
, c->
Êags
 & 
MG_F_RESOLVING
,

2930 (Ë
time°amp
));

2931 i‡((
c
->
Êags
 & 
MG_F_RESOLVING
Ë&& c->
¥iv_2
 !
NULL
) {

2932 ((
mg_c⁄√˘i⁄
 *Ë
c
->
¥iv_2
)->
ev_timî_time
 = 
time°amp
;

2934  
ªsu…
;

2935 
	}
}

2937 
	$mg_sock_£t
(
mg_c⁄√˘i⁄
 *
nc
, 
sock_t
 
sock
) {

2938 i‡(
sock
 !
INVALID_SOCKET
) {

2939 
nc
->
iÁ˚
->
vèbÀ
->
	`sock_£t
“c, 
sock
);

2941 
	}
}

2943 
	$mg_if_gë_c⁄n_addr
(
mg_c⁄√˘i⁄
 *
nc
, 
ªmŸe
,

2944 
sockë_addªss
 *
ß
) {

2945 
nc
->
iÁ˚
->
vèbÀ
->
	`gë_c⁄n_addr
“c, 
ªmŸe
, 
ß
);

2946 
	}
}

2948 
mg_c⁄√˘i⁄
 *
	$mg_add_sock_›t
(
mg_mgr
 *
s
, 
sock_t
 
sock
,

2949 
mg_evít_h™dÀr_t
 
ˇŒback
,

2950 
mg_add_sock_›ts
 
›ts
) {

2951 
mg_c⁄√˘i⁄
 *
nc
 = 
	`mg_¸óã_c⁄√˘i⁄_ba£
(
s
, 
ˇŒback
, 
›ts
);

2952 i‡(
nc
 !
NULL
) {

2953 
	`mg_sock_£t
(
nc
, 
sock
);

2954 
	`mg_add_c⁄n
(
nc
->
mgr
,Çc);

2956  
nc
;

2957 
	}
}

2959 
mg_c⁄√˘i⁄
 *
	$mg_add_sock
(
mg_mgr
 *
s
, 
sock_t
 
sock
,

2960 
mg_evít_h™dÀr_t
 
ˇŒback
) {

2961 
mg_add_sock_›ts
 
›ts
;

2962 
	`mem£t
(&
›ts
, 0, (opts));

2963  
	`mg_add_sock_›t
(
s
, 
sock
, 
ˇŒback
, 
›ts
);

2964 
	}
}

2966 
	$mg_time
() {

2967  
	`cs_time
();

2968 
	}
}

2969 #ifde‡
MG_MODULE_LINES


2977 #i‚de‡
CS_MONGOOSE_SRC_NET_IF_SOCKET_H_


2978 
	#CS_MONGOOSE_SRC_NET_IF_SOCKET_H_


	)

2982 #ifde‡
__˝lu•lus


2986 #i‚de‡
MG_ENABLE_NET_IF_SOCKET


2987 
	#MG_ENABLE_NET_IF_SOCKET
 
MG_NET_IF
 =
MG_NET_IF_SOCKET


	)

2990 
mg_iÁ˚_vèbÀ
 
mg_sockë_iÁ˚_vèbÀ
;

2992 #ifde‡
__˝lu•lus


2997 #ifde‡
MG_MODULE_LINES


3005 #i‚de‡
CS_MONGOOSE_SRC_NET_IF_TUN_H_


3006 
	#CS_MONGOOSE_SRC_NET_IF_TUN_H_


	)

3008 #i‡
MG_ENABLE_TUN


3012 
	gmg_tun_˛õ¡
;

3014 #ifde‡
__˝lu•lus


3018 
mg_iÁ˚_vèbÀ
 
mg_tun_iÁ˚_vèbÀ
;

3020 
mg_c⁄√˘i⁄
 *
mg_tun_if_föd_c⁄n
(
mg_tun_˛õ¡
 *
˛õ¡
,

3021 
uöt32_t
 
°ªam_id
);

3023 #ifde‡
__˝lu•lus


3030 #ifde‡
MG_MODULE_LINES


3038 
mg_iÁ˚_vèbÀ
 
mg_deÁu…_iÁ˚_vèbÀ
;

3040 #i‡
MG_ENABLE_TUN


3041 
mg_iÁ˚_vèbÀ
 *
	gmg_iÁ˚s
[] = {&
mg_deÁu…_iÁ˚_vèbÀ
,

3042 &
mg_tun_iÁ˚_vèbÀ
};

3044 
mg_iÁ˚_vèbÀ
 *
	gmg_iÁ˚s
[] = {&
mg_deÁu…_iÁ˚_vèbÀ
};

3047 
	gmg_num_iÁ˚s
 = (Ë((
mg_iÁ˚s
) / (mg_ifaces[0]));

3049 
mg_iÁ˚
 *
	$mg_if_¸óã_iÁ˚
(
mg_iÁ˚_vèbÀ
 *
vèbÀ
,

3050 
mg_mgr
 *
mgr
) {

3051 
mg_iÁ˚
 *
iÁ˚
 = (mg_iÁ˚ *Ë
	`MG_CALLOC
(1, (*iface));

3052 
iÁ˚
->
mgr
 = mgr;

3053 
iÁ˚
->
d©a
 = 
NULL
;

3054 
iÁ˚
->
vèbÀ
 = vtable;

3055  
iÁ˚
;

3056 
	}
}

3058 
mg_iÁ˚
 *
	$mg_föd_iÁ˚
(
mg_mgr
 *
mgr
,

3059 
mg_iÁ˚_vèbÀ
 *
vèbÀ
,

3060 
mg_iÁ˚
 *
‰om
) {

3061 
i
 = 0;

3062 i‡(
‰om
 !
NULL
) {

3063 
i
 = 0; i < 
mgr
->
num_iÁ˚s
; i++) {

3064 i‡(
mgr
->
iÁ˚s
[
i
] =
‰om
) {

3065 
i
++;

3071 ; 
i
 < 
mgr
->
num_iÁ˚s
; i++) {

3072 i‡(
mgr
->
iÁ˚s
[
i
]->
vèbÀ
 == vtable) {

3073  
mgr
->
iÁ˚s
[
i
];

3076  
NULL
;

3077 
	}
}

3078 #ifde‡
MG_MODULE_LINES


3086 #i‡
MG_ENABLE_NET_IF_SOCKET


3092 
	#MG_TCP_RECV_BUFFER_SIZE
 1024

	)

3093 
	#MG_UDP_RECV_BUFFER_SIZE
 1500

	)

3095 
sock_t
 
mg_›í_li°íög_sockë
(
sockë_addªss
 *
ß
, 
ty≥
,

3096 
¥Ÿo
);

3097 #i‡
MG_ENABLE_SSL


3098 
mg_s¶_begö
(
mg_c⁄√˘i⁄
 *
nc
);

3101 
	$mg_£t_n⁄_blockög_mode
(
sock_t
 
sock
) {

3102 #ifde‡
_WIN32


3103 
⁄
 = 1;

3104 
	`io˘lsockë
(
sock
, 
FIONBIO
, &
⁄
);

3106 
Êags
 = 
	`f˙é
(
sock
, 
F_GETFL
, 0);

3107 
	`f˙é
(
sock
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
);

3109 
	}
}

3111 
	$mg_is_îr‹
(
n
) {

3112 
îr
 = 
	`mg_gë_î∫o
();

3113  (
n
 < 0 && 
îr
 !
EINPROGRESS
 &&Éº !
EWOULDBLOCK


3114 #i‚de‡
WINCE


3115 && 
îr
 !
EAGAIN
 &&Éº !
EINTR


3117 #ifde‡
_WIN32


3118 && 
	`WSAGëLa°Eº‹
(Ë!
WSAEINTR
 &&

3119 
	`WSAGëLa°Eº‹
(Ë!
WSAEWOULDBLOCK


3122 
	}
}

3124 
	$mg_sockë_if_c⁄√˘_t˝
(
mg_c⁄√˘i⁄
 *
nc
,

3125 c⁄° 
sockë_addªss
 *
ß
) {

3126 
rc
, 
¥Ÿo
 = 0;

3127 
nc
->
sock
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 
¥Ÿo
);

3128 i‡(
nc
->
sock
 =
INVALID_SOCKET
) {

3129 
nc
->
îr
 = 
	`mg_gë_î∫o
() ? mg_get_errno() : 1;

3132 #i‡!
	`deföed
(
MG_ESP8266
)

3133 
	`mg_£t_n⁄_blockög_mode
(
nc
->
sock
);

3135 
rc
 = 
	`c⁄√˘
(
nc
->
sock
, &
ß
->ß, (ß->
sö
));

3136 
nc
->
îr
 = 
	`mg_is_îr‹
(
rc
Ë? 
	`mg_gë_î∫o
() : 0;

3137 
	`DBG
(("%∞sock %dÑ¯%dÉºnÿ%dÉº %d", 
nc
,Çc->
sock
, 
rc
, 
	`mg_gë_î∫o
(),

3138 
nc
->
îr
));

3139 
	}
}

3141 
	$mg_sockë_if_c⁄√˘_udp
(
mg_c⁄√˘i⁄
 *
nc
) {

3142 
nc
->
sock
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

3143 i‡(
nc
->
sock
 =
INVALID_SOCKET
) {

3144 
nc
->
îr
 = 
	`mg_gë_î∫o
() ? mg_get_errno() : 1;

3147 i‡(
nc
->
Êags
 & 
MG_F_ENABLE_BROADCAST
) {

3148 
›tvÆ
 = 1;

3149 
	`£tsock›t
(
nc
->
sock
, 
SOL_SOCKET
, 
SO_BROADCAST
, (c⁄° *Ë&
›tvÆ
,

3150 (
›tvÆ
));

3152 
nc
->
îr
 = 0;

3153 
	}
}

3155 
	$mg_sockë_if_li°í_t˝
(
mg_c⁄√˘i⁄
 *
nc
,

3156 
sockë_addªss
 *
ß
) {

3157 
¥Ÿo
 = 0;

3158 
sock_t
 
sock
 = 
	`mg_›í_li°íög_sockë
(
ß
, 
SOCK_STREAM
, 
¥Ÿo
);

3159 i‡(
sock
 =
INVALID_SOCKET
) {

3160  (
	`mg_gë_î∫o
() ? mg_get_errno() : 1);

3162 
	`mg_sock_£t
(
nc
, 
sock
);

3164 
	}
}

3166 
	$mg_sockë_if_li°í_udp
(
mg_c⁄√˘i⁄
 *
nc
,

3167 
sockë_addªss
 *
ß
) {

3168 
sock_t
 
sock
 = 
	`mg_›í_li°íög_sockë
(
ß
, 
SOCK_DGRAM
, 0);

3169 i‡(
sock
 =
INVALID_SOCKET
Ë (
	`mg_gë_î∫o
() ? mg_get_errno() : 1);

3170 
	`mg_sock_£t
(
nc
, 
sock
);

3172 
	}
}

3174 
	$mg_sockë_if_t˝_£nd
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
buf
,

3175 
size_t
 
Àn
) {

3176 
	`mbuf_≠≥nd
(&
nc
->
£nd_mbuf
, 
buf
, 
Àn
);

3177 
	}
}

3179 
	$mg_sockë_if_udp_£nd
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
buf
,

3180 
size_t
 
Àn
) {

3181 
	`mbuf_≠≥nd
(&
nc
->
£nd_mbuf
, 
buf
, 
Àn
);

3182 
	}
}

3184 
	$mg_sockë_if_ªcved
(
mg_c⁄√˘i⁄
 *
nc
, 
size_t
 
Àn
) {

3185 (Ë
nc
;

3186 (Ë
Àn
;

3187 
	}
}

3189 
	$mg_sockë_if_¸óã_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

3190 (Ë
nc
;

3192 
	}
}

3194 
	$mg_sockë_if_de°roy_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

3195 i‡(
nc
->
sock
 =
INVALID_SOCKET
) ;

3196 i‡(!(
nc
->
Êags
 & 
MG_F_UDP
)) {

3197 
	`˛o£sockë
(
nc
->
sock
);

3200 i‡(
nc
->
li°íî
 =
NULL
Ë
	`˛o£sockë
“c->
sock
);

3202 
nc
->
sock
 = 
INVALID_SOCKET
;

3203 
	}
}

3205 
	$mg_ac˚±_c⁄n
(
mg_c⁄√˘i⁄
 *
lc
) {

3206 
mg_c⁄√˘i⁄
 *
nc
;

3207 
sockë_addªss
 
ß
;

3208 
sockÀn_t
 
ß_Àn
 = (
ß
);

3210 
sock_t
 
sock
 = 
	`ac˚±
(
lc
->sock, &
ß
.ß, &
ß_Àn
);

3211 i‡(
sock
 =
INVALID_SOCKET
) {

3212 i‡(
	`mg_is_îr‹
(-1)Ë
	`DBG
(("%p: faûedÅÿac˚±: %d", 
lc
, 
	`mg_gë_î∫o
()));

3215 
nc
 = 
	`mg_if_ac˚±_√w_c⁄n
(
lc
);

3216 i‡(
nc
 =
NULL
) {

3217 
	`˛o£sockë
(
sock
);

3220 
	`DBG
(("%∞c⁄¿‰om %s:%d", 
nc
, 
	`öë_¡ﬂ
(
ß
.
sö
.
sö_addr
),

3221 
	`¡ohs
(
ß
.
sö
.
sö_p‹t
)));

3222 
	`mg_sock_£t
(
nc
, 
sock
);

3223 #i‡
MG_ENABLE_SSL


3224 i‡(
lc
->
Êags
 & 
MG_F_SSL
) {

3225 i‡(
	`mg_s¶_if_c⁄n_ac˚±
(
nc
, 
lc
Ë!
MG_SSL_OK
Ë
	`mg_˛o£_c⁄n
(nc);

3229 
	`mg_if_ac˚±_t˝_cb
(
nc
, &
ß
, 
ß_Àn
);

3232 
	}
}

3235 
sock_t
 
	$mg_›í_li°íög_sockë
(
sockë_addªss
 *
ß
, 
ty≥
,

3236 
¥Ÿo
) {

3237 
sockÀn_t
 
ß_Àn
 =

3238 (
ß
->ß.
ß_Ámûy
 =
AF_INET
Ë? (ß->
sö
Ë: (ß->
sö6
);

3239 
sock_t
 
sock
 = 
INVALID_SOCKET
;

3240 #i‡!
MG_LWIP


3241 
⁄
 = 1;

3243 i‡((
sock
 = 
	`sockë
(
ß
->ß.
ß_Ámûy
, 
ty≥
, 
¥Ÿo
)Ë!
INVALID_SOCKET
 &&

3244 #i‡!
MG_LWIP


3245 #i‡
	`deföed
(
_WIN32
Ë&& deföed(
SO_EXCLUSIVEADDRUSE
Ë&& !deföed(
WINCE
)

3247 !
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_EXCLUSIVEADDRUSE
, (*Ë&
⁄
,

3248 (
⁄
)) &&

3251 #i‡!
	`deföed
(
_WIN32
Ë|| !deföed(
SO_EXCLUSIVEADDRUSE
)

3261 !
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*Ë&
⁄
, (on)) &&

3264 !
	`böd
(
sock
, &
ß
->ß, 
ß_Àn
) &&

3265 (
ty≥
 =
SOCK_DGRAM
 || 
	`li°í
(
sock
, 
SOMAXCONN
) == 0)) {

3266 #i‡!
MG_LWIP


3267 
	`mg_£t_n⁄_blockög_mode
(
sock
);

3269 (Ë
	`gësock«me
(
sock
, &
ß
->ß, &
ß_Àn
);

3272 } i‡(
sock
 !
INVALID_SOCKET
) {

3273 
	`˛o£sockë
(
sock
);

3274 
sock
 = 
INVALID_SOCKET
;

3277  
sock
;

3278 
	}
}

3280 
	$mg_wrôe_to_sockë
(
mg_c⁄√˘i⁄
 *
nc
) {

3281 
mbuf
 *
io
 = &
nc
->
£nd_mbuf
;

3282 
n
 = 0;

3284 #i‡
MG_LWIP


3286 i‡(
io
->
Àn
 == 0) ;

3289 
	`as£π
(
io
->
Àn
 > 0);

3291 i‡(
nc
->
Êags
 & 
MG_F_UDP
) {

3292 
n
 =

3293 
	`£ndto
(
nc
->
sock
, 
io
->
buf
, io->
Àn
, 0, &nc->
ß
.ß, “c->ß.
sö
));

3294 
	`DBG
(("%∞%d %d %d %s:%hu", 
nc
,Çc->
sock
, 
n
, 
	`mg_gë_î∫o
(),

3295 
	`öë_¡ﬂ
(
nc
->
ß
.
sö
.
sö_addr
), 
	`¡ohs
“c->ß.sö.
sö_p‹t
)));

3296 i‡(
n
 > 0) {

3297 
	`mbuf_ªmove
(
io
, 
n
);

3298 
	`mg_if_£¡_cb
(
nc
, 
n
);

3303 #i‡
MG_ENABLE_SSL


3304 i‡(
nc
->
Êags
 & 
MG_F_SSL
) {

3305 i‡(
nc
->
Êags
 & 
MG_F_SSL_HANDSHAKE_DONE
) {

3306 
n
 = 
	`mg_s¶_if_wrôe
(
nc
, 
io
->
buf
, io->
Àn
);

3307 
	`DBG
(("%∞%d byã†-> %d (SSL)", 
nc
, 
n
,Çc->
sock
));

3308 i‡(
n
 < 0) {

3309 i‡(
n
 !
MG_SSL_WANT_READ
 &&Ç !
MG_SSL_WANT_WRITE
) {

3310 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

3315 
nc
->
Êags
 &~(
MG_F_WANT_READ
 | 
MG_F_WANT_WRITE
);

3318 
	`mg_s¶_begö
(
nc
);

3327 
n
 = (Ë
	`MG_SEND_FUNC
(
nc
->
sock
, 
io
->
buf
, io->
Àn
, 0);

3329 
	`DBG
(("%∞%d byã†-> %d", 
nc
, 
n
,Çc->
sock
));

3330 i‡(
n
 < 0 && 
	`mg_is_îr‹
(n)) {

3332 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

3337 i‡(
n
 > 0) {

3338 
	`mbuf_ªmove
(
io
, 
n
);

3339 
	`mg_if_£¡_cb
(
nc
, 
n
);

3341 
	}
}

3343 
MG_INTERNAL
 
size_t
 
	$ªcv_avaû_size
(
mg_c⁄√˘i⁄
 *
c⁄n
, 
size_t
 
max
) {

3344 
size_t
 
avaû
;

3345 i‡(
c⁄n
->
ªcv_mbuf_limô
 < c⁄n->
ªcv_mbuf
.
Àn
)  0;

3346 
avaû
 = 
c⁄n
->
ªcv_mbuf_limô
 - c⁄n->
ªcv_mbuf
.
Àn
;

3347  
avaû
 > 
max
 ? max :ávail;

3348 
	}
}

3350 
	$mg_h™dÀ_t˝_ªad
(
mg_c⁄√˘i⁄
 *
c⁄n
) {

3351 
n
 = 0;

3352 *
buf
 = (*Ë
	`MG_MALLOC
(
MG_TCP_RECV_BUFFER_SIZE
);

3354 i‡(
buf
 =
NULL
) {

3355 
	`DBG
(("OOM"));

3359 #i‡
MG_ENABLE_SSL


3360 i‡(
c⁄n
->
Êags
 & 
MG_F_SSL
) {

3361 i‡(
c⁄n
->
Êags
 & 
MG_F_SSL_HANDSHAKE_DONE
) {

3365 (
n
 = 
	`mg_s¶_if_ªad
(
c⁄n
, 
buf
, 
MG_TCP_RECV_BUFFER_SIZE
)) > 0) {

3366 
	`DBG
(("%∞%d byã†<- %d (SSL)", 
c⁄n
, 
n
, c⁄n->
sock
));

3367 
	`mg_if_ªcv_t˝_cb
(
c⁄n
, 
buf
, 
n
, 1 );

3368 
buf
 = 
NULL
;

3369 i‡(
c⁄n
->
Êags
 & 
MG_F_CLOSE_IMMEDIATELY
) ;

3371 
buf
 = (*Ë
	`MG_MALLOC
(
MG_TCP_RECV_BUFFER_SIZE
);

3372 i‡(
buf
 =
NULL
) ;

3374 
	`MG_FREE
(
buf
);

3375 i‡(
n
 < 0 &&Ç !
MG_SSL_WANT_READ
Ë
c⁄n
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

3377 
	`MG_FREE
(
buf
);

3378 
	`mg_s¶_begö
(
c⁄n
);

3384 
n
 = (Ë
	`MG_RECV_FUNC
(
c⁄n
->
sock
, 
buf
,

3385 
	`ªcv_avaû_size
(
c⁄n
, 
MG_TCP_RECV_BUFFER_SIZE
), 0);

3388 
	`DBG
(("%∞%d byã†(PLAINË<- %d", 
c⁄n
, 
n
, c⁄n->
sock
));

3389 i‡(
n
 > 0) {

3390 
	`mg_if_ªcv_t˝_cb
(
c⁄n
, 
buf
, 
n
, 1 );

3392 
	`MG_FREE
(
buf
);

3394 i‡(
n
 == 0) {

3396 
c⁄n
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

3397 } i‡(
	`mg_is_îr‹
(
n
)) {

3398 
c⁄n
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

3401 
	}
}

3403 
	$mg_ªcv‰om
(
mg_c⁄√˘i⁄
 *
nc
, 
sockë_addªss
 *
ß
,

3404 
sockÀn_t
 *
ß_Àn
, **
buf
) {

3405 
n
;

3406 *
buf
 = (*Ë
	`MG_MALLOC
(
MG_UDP_RECV_BUFFER_SIZE
);

3407 i‡(*
buf
 =
NULL
) {

3408 
	`DBG
(("Out of memory"));

3409  -
ENOMEM
;

3411 
n
 = 
	`ªcv‰om
(
nc
->
sock
, *
buf
, 
MG_UDP_RECV_BUFFER_SIZE
, 0, &
ß
->ß, 
ß_Àn
);

3414 i‡(
n
 <= 0) {

3415 
	`DBG
(("%∞ªcv‰om: %s", 
nc
, 
	`°ªº‹
(
	`mg_gë_î∫o
())));

3416 
	`MG_FREE
(*
buf
);

3418  
n
;

3419 
	}
}

3421 
	$mg_h™dÀ_udp_ªad
(
mg_c⁄√˘i⁄
 *
nc
) {

3422 *
buf
 = 
NULL
;

3423 
sockë_addªss
 
ß
;

3424 
sockÀn_t
 
ß_Àn
 = (
ß
);

3425 
n
 = 
	`mg_ªcv‰om
(
nc
, &
ß
, &
ß_Àn
, &
buf
);

3426 
	`DBG
(("%∞%d byã†‰om %s:%d", 
nc
, 
n
, 
	`öë_¡ﬂ
“c->
ß
.
sö
.
sö_addr
),

3427 
	`¡ohs
(
nc
->
ß
.
sö
.
sö_p‹t
)));

3428 
	`mg_if_ªcv_udp_cb
(
nc
, 
buf
, 
n
, &
ß
, 
ß_Àn
);

3429 
	}
}

3431 #i‡
MG_ENABLE_SSL


3432 
	$mg_s¶_begö
(
mg_c⁄√˘i⁄
 *
nc
) {

3433 
£rvî_side
 = (
nc
->
li°íî
 !
NULL
);

3434 
mg_s¶_if_ªsu…
 
ªs
 = 
	`mg_s¶_if_h™dshake
(
nc
);

3435 
	`DBG
(("%∞%dÑe†%d", 
nc
, 
£rvî_side
, 
ªs
));

3437 i‡(
ªs
 =
MG_SSL_OK
) {

3438 
nc
->
Êags
 |
MG_F_SSL_HANDSHAKE_DONE
;

3439 
nc
->
Êags
 &~(
MG_F_WANT_READ
 | 
MG_F_WANT_WRITE
);

3441 i‡(
£rvî_side
) {

3442 
sockë_addªss
 
ß
;

3443 
sockÀn_t
 
ß_Àn
 = (
ß
);

3444 (Ë
	`gë≥î«me
(
nc
->
sock
, &
ß
.ß, &
ß_Àn
);

3445 
	`mg_if_ac˚±_t˝_cb
(
nc
, &
ß
, 
ß_Àn
);

3447 
	`mg_if_c⁄√˘_cb
(
nc
, 0);

3449 } i‡(
ªs
 !
MG_SSL_WANT_READ
 &&Ñe†!
MG_SSL_WANT_WRITE
) {

3450 i‡(!
£rvî_side
) {

3451 
	`mg_if_c⁄√˘_cb
(
nc
, 
ªs
);

3453 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

3455 
	}
}

3458 
	#_MG_F_FD_CAN_READ
 1

	)

3459 
	#_MG_F_FD_CAN_WRITE
 1 << 1

	)

3460 
	#_MG_F_FD_ERROR
 1 << 2

	)

3462 
	$mg_mgr_h™dÀ_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
, 
fd_Êags
, 
now
) {

3463 
w‹th_loggög
 =

3464 
fd_Êags
 !0 || (
nc
->
Êags
 & (
MG_F_WANT_READ
 | 
MG_F_WANT_WRITE
));

3465 i‡(
w‹th_loggög
) {

3466 
	`DBG
(("%∞fd=%d fd_Êags=%dÇc_Êags=%luÑmbl=%d smbl=%d", 
nc
,Çc->
sock
,

3467 
fd_Êags
, 
nc
->
Êags
, (Ënc->
ªcv_mbuf
.
Àn
,

3468 (Ë
nc
->
£nd_mbuf
.
Àn
));

3471 i‡(
nc
->
Êags
 & 
MG_F_CONNECTING
) {

3472 i‡(
fd_Êags
 != 0) {

3473 
îr
 = 0;

3474 #i‡!
	`deföed
(
MG_ESP8266
)

3475 i‡(!(
nc
->
Êags
 & 
MG_F_UDP
)) {

3476 
sockÀn_t
 
Àn
 = (
îr
);

3477 
ªt
 =

3478 
	`gësock›t
(
nc
->
sock
, 
SOL_SOCKET
, 
SO_ERROR
, (*Ë&
îr
, &
Àn
);

3479 i‡(
ªt
 != 0) {

3480 
îr
 = 1;

3481 } i‡(
îr
 =
EAGAIN
 ||Éº =
EWOULDBLOCK
) {

3482 
îr
 = 0;

3489 
îr
 = 
nc
->err;

3491 #i‡
MG_ENABLE_SSL


3492 i‡((
nc
->
Êags
 & 
MG_F_SSL
Ë&& 
îr
 == 0) {

3493 
	`mg_s¶_begö
(
nc
);

3495 
	`mg_if_c⁄√˘_cb
(
nc
, 
îr
);

3498 
	`mg_if_c⁄√˘_cb
(
nc
, 
îr
);

3500 } i‡(
nc
->
îr
 != 0) {

3501 
	`mg_if_c⁄√˘_cb
(
nc
,Çc->
îr
);

3505 i‡(
fd_Êags
 & 
_MG_F_FD_CAN_READ
) {

3506 i‡(
nc
->
Êags
 & 
MG_F_UDP
) {

3507 
	`mg_h™dÀ_udp_ªad
(
nc
);

3509 i‡(
nc
->
Êags
 & 
MG_F_LISTENING
) {

3515 
	`mg_ac˚±_c⁄n
(
nc
);

3517 
	`mg_h™dÀ_t˝_ªad
(
nc
);

3522 i‡(!(
nc
->
Êags
 & 
MG_F_CLOSE_IMMEDIATELY
)) {

3523 i‡((
fd_Êags
 & 
_MG_F_FD_CAN_WRITE
Ë&& 
nc
->
£nd_mbuf
.
Àn
 > 0) {

3524 
	`mg_wrôe_to_sockë
(
nc
);

3526 
	`mg_if_pﬁl
(
nc
, (
time_t
Ë
now
);

3527 
	`mg_if_timî
(
nc
, 
now
);

3530 i‡(
w‹th_loggög
) {

3531 
	`DBG
(("%∞a·î fd=%dÇc_Êags=%luÑmbl=%d smbl=%d", 
nc
,Çc->
sock
,Çc->
Êags
,

3532 (Ë
nc
->
ªcv_mbuf
.
Àn
, (Ënc->
£nd_mbuf
.len));

3534 
	}
}

3536 #i‡
MG_ENABLE_BROADCAST


3537 
	$mg_mgr_h™dÀ_˘l_sock
(
mg_mgr
 *
mgr
) {

3538 
˘l_msg
 ctl_msg;

3539 
Àn
 =

3540 (Ë
	`MG_RECV_FUNC
(
mgr
->
˘l
[1], (*Ë&
˘l_msg
, (ctl_msg), 0);

3541 
size_t
 
dummy
 = 
	`MG_SEND_FUNC
(
mgr
->
˘l
[1], 
˘l_msg
.
mesßge
, 1, 0);

3542 
	`DBG
(("ªad %d from cé sockë", 
Àn
));

3543 (Ë
dummy
;

3544 i‡(
Àn
 >(Ë(
˘l_msg
.
ˇŒback
Ë&& cé_msg.ˇŒback !
NULL
) {

3545 
mg_c⁄√˘i⁄
 *
nc
;

3546 
nc
 = 
	`mg_√xt
(
mgr
, 
NULL
);Çc != NULL;Çc = mg_next(mgr,Çc)) {

3547 
˘l_msg
.
	`ˇŒback
(
nc
, 
MG_EV_POLL
, cé_msg.
mesßge
);

3550 
	}
}

3554 
	$mg_sockë_if_sock_£t
(
mg_c⁄√˘i⁄
 *
nc
, 
sock_t
 
sock
) {

3555 
	`mg_£t_n⁄_blockög_mode
(
sock
);

3556 
	`mg_£t_˛o£_⁄_exec
(
sock
);

3557 
nc
->
sock
 = sock;

3558 
	`DBG
(("%∞%d", 
nc
, 
sock
));

3559 
	}
}

3561 
	$mg_sockë_if_öô
(
mg_iÁ˚
 *
iÁ˚
) {

3562 (Ë
iÁ˚
;

3563 
	`DBG
(("%∞usög sñe˘()", 
iÁ˚
->
mgr
));

3564 #i‡
MG_ENABLE_BROADCAST


3566 
	`mg_sockë∑ú
(
iÁ˚
->
mgr
->
˘l
, 
SOCK_DGRAM
);

3567 } 
iÁ˚
->
mgr
->
˘l
[0] =
INVALID_SOCKET
);

3569 
	}
}

3571 
	$mg_sockë_if_‰ì
(
mg_iÁ˚
 *
iÁ˚
) {

3572 (Ë
iÁ˚
;

3573 
	}
}

3575 
	$mg_sockë_if_add_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

3576 (Ë
nc
;

3577 
	}
}

3579 
	$mg_sockë_if_ªmove_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

3580 (Ë
nc
;

3581 
	}
}

3583 
	$mg_add_to_£t
(
sock_t
 
sock
, 
fd_£t
 *
£t
, sock_à*
max_fd
) {

3584 i‡(
sock
 !
INVALID_SOCKET


3585 #ifde‡
__unix__


3586 && 
sock
 < (
sock_t
Ë
FD_SETSIZE


3589 
	`FD_SET
(
sock
, 
£t
);

3590 i‡(*
max_fd
 =
INVALID_SOCKET
 || 
sock
 > *max_fd) {

3591 *
max_fd
 = 
sock
;

3594 
	}
}

3596 
time_t
 
	$mg_sockë_if_pﬁl
(
mg_iÁ˚
 *
iÁ˚
, 
timeout_ms
) {

3597 
mg_mgr
 *
mgr
 = 
iÁ˚
->mgr;

3598 
now
 = 
	`mg_time
();

3599 
mö_timî
;

3600 
mg_c⁄√˘i⁄
 *
nc
, *
tmp
;

3601 
timevÆ
 
tv
;

3602 
fd_£t
 
ªad_£t
, 
wrôe_£t
, 
îr_£t
;

3603 
sock_t
 
max_fd
 = 
INVALID_SOCKET
;

3604 
num_fds
, 
num_ev
, 
num_timîs
 = 0;

3605 #ifde‡
__unix__


3606 
åy_dup
 = 1;

3609 
	`FD_ZERO
(&
ªad_£t
);

3610 
	`FD_ZERO
(&
wrôe_£t
);

3611 
	`FD_ZERO
(&
îr_£t
);

3612 #i‡
MG_ENABLE_BROADCAST


3613 
	`mg_add_to_£t
(
mgr
->
˘l
[1], &
ªad_£t
, &
max_fd
);

3620 
mö_timî
 = 0;

3621 
nc
 = 
mgr
->
a˘ive_c⁄√˘i⁄s
, 
num_fds
 = 0;Ç¯!
NULL
;Ç¯
tmp
) {

3622 
tmp
 = 
nc
->
√xt
;

3624 i‡(
nc
->
sock
 !
INVALID_SOCKET
) {

3625 
num_fds
++;

3627 #ifde‡
__unix__


3629 i‡(
nc
->
sock
 >(
sock_t
Ë
FD_SETSIZE
 && 
åy_dup
) {

3630 
√w_sock
 = 
	`dup
(
nc
->
sock
);

3631 i‡(
√w_sock
 >0 &&Çew_sock < (
sock_t
Ë
FD_SETSIZE
) {

3632 
	`˛o£sockë
(
nc
->
sock
);

3633 
	`DBG
(("√w sock %d -> %d", 
nc
->
sock
, 
√w_sock
));

3634 
nc
->
sock
 = 
√w_sock
;

3636 
åy_dup
 = 0;

3641 i‡(!(
nc
->
Êags
 & 
MG_F_WANT_WRITE
) &&

3642 
nc
->
ªcv_mbuf
.
Àn
 <Çc->
ªcv_mbuf_limô
 &&

3643 (!(
nc
->
Êags
 & 
MG_F_UDP
Ë||Çc->
li°íî
 =
NULL
)) {

3644 
	`mg_add_to_£t
(
nc
->
sock
, &
ªad_£t
, &
max_fd
);

3647 i‡(((
nc
->
Êags
 & 
MG_F_CONNECTING
Ë&& !“c->Êag†& 
MG_F_WANT_READ
)) ||

3648 (
nc
->
£nd_mbuf
.
Àn
 > 0 && !“c->
Êags
 & 
MG_F_CONNECTING
))) {

3649 
	`mg_add_to_£t
(
nc
->
sock
, &
wrôe_£t
, &
max_fd
);

3650 
	`mg_add_to_£t
(
nc
->
sock
, &
îr_£t
, &
max_fd
);

3654 i‡(
nc
->
ev_timî_time
 > 0) {

3655 i‡(
num_timîs
 =0 || 
nc
->
ev_timî_time
 < 
mö_timî
) {

3656 
mö_timî
 = 
nc
->
ev_timî_time
;

3658 
num_timîs
++;

3666 i‡(
num_timîs
 > 0) {

3667 
timî_timeout_ms
 = (
mö_timî
 - 
	`mg_time
()) * 1000 + 1 ;

3668 i‡(
timî_timeout_ms
 < 
timeout_ms
) {

3669 
timeout_ms
 = (Ë
timî_timeout_ms
;

3672 i‡(
timeout_ms
 < 0)Åimeout_ms = 0;

3674 
tv
.
tv_£c
 = 
timeout_ms
 / 1000;

3675 
tv
.
tv_u£c
 = (
timeout_ms
 % 1000) * 1000;

3677 
num_ev
 = 
	`£À˘
((Ë
max_fd
 + 1, &
ªad_£t
, &
wrôe_£t
, &
îr_£t
, &
tv
);

3679 
now
 = 
	`mg_time
();

3681 
	`DBG
(("£À˘ @ %ldÇum_ev=%d o‡%d,Åimeout=%d", (Ë
now
, 
num_ev
, 
num_fds
,

3682 
timeout_ms
));

3685 #i‡
MG_ENABLE_BROADCAST


3686 i‡(
num_ev
 > 0 && 
mgr
->
˘l
[1] !
INVALID_SOCKET
 &&

3687 
	`FD_ISSET
(
mgr
->
˘l
[1], &
ªad_£t
)) {

3688 
	`mg_mgr_h™dÀ_˘l_sock
(
mgr
);

3692 
nc
 = 
mgr
->
a˘ive_c⁄√˘i⁄s
;Ç¯!
NULL
;Ç¯
tmp
) {

3693 
fd_Êags
 = 0;

3694 i‡(
nc
->
sock
 !
INVALID_SOCKET
) {

3695 i‡(
num_ev
 > 0) {

3696 
fd_Êags
 = (
	`FD_ISSET
(
nc
->
sock
, &
ªad_£t
) &&

3697 (!(
nc
->
Êags
 & 
MG_F_UDP
Ë||Çc->
li°íî
 =
NULL
)

3698 ? 
_MG_F_FD_CAN_READ


3700 (
	`FD_ISSET
(
nc
->
sock
, &
wrôe_£t
Ë? 
_MG_F_FD_CAN_WRITE
 : 0) |

3701 (
	`FD_ISSET
(
nc
->
sock
, &
îr_£t
Ë? 
_MG_F_FD_ERROR
 : 0);

3703 #i‡
MG_LWIP


3705 i‡((
nc
->
Êags
 & 
MG_F_UDP
Ë&&Çc->
li°íî
 =
NULL
) {

3706 
fd_Êags
 |
_MG_F_FD_CAN_WRITE
;

3710 
tmp
 = 
nc
->
√xt
;

3711 
	`mg_mgr_h™dÀ_c⁄n
(
nc
, 
fd_Êags
, 
now
);

3714 
nc
 = 
mgr
->
a˘ive_c⁄√˘i⁄s
;Ç¯!
NULL
;Ç¯
tmp
) {

3715 
tmp
 = 
nc
->
√xt
;

3716 i‡((
nc
->
Êags
 & 
MG_F_CLOSE_IMMEDIATELY
) ||

3717 (
nc
->
£nd_mbuf
.
Àn
 =0 && (nc->
Êags
 & 
MG_F_SEND_AND_CLOSE
))) {

3718 
	`mg_˛o£_c⁄n
(
nc
);

3722  (
time_t
Ë
now
;

3723 
	}
}

3725 #i‡
MG_ENABLE_BROADCAST


3726 
	$mg_sockë∑ú
(
sock_t
 
•
[2], 
sock_ty≥
) {

3727 
sockë_addªss
 
ß
;

3728 
sock_t
 
sock
;

3729 
sockÀn_t
 
Àn
 = (
ß
.
sö
);

3730 
ªt
 = 0;

3732 
sock
 = 
•
[0] = sp[1] = 
INVALID_SOCKET
;

3734 (Ë
	`mem£t
(&
ß
, 0, (sa));

3735 
ß
.
sö
.
sö_Ámûy
 = 
AF_INET
;

3736 
ß
.
sö
.
sö_p‹t
 = 
	`ht⁄s
(0);

3737 
ß
.
sö
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(0x7f000001);

3739 i‡((
sock
 = 
	`sockë
(
AF_INET
, 
sock_ty≥
, 0)Ë=
INVALID_SOCKET
) {

3740 } i‡(
	`böd
(
sock
, &
ß
.ß, 
Àn
) != 0) {

3741 } i‡(
sock_ty≥
 =
SOCK_STREAM
 && 
	`li°í
(
sock
, 1) != 0) {

3742 } i‡(
	`gësock«me
(
sock
, &
ß
.ß, &
Àn
) != 0) {

3743 } i‡((
•
[0] = 
	`sockë
(
AF_INET
, 
sock_ty≥
, 0)Ë=
INVALID_SOCKET
) {

3744 } i‡(
	`c⁄√˘
(
•
[0], &
ß
.ß, 
Àn
) != 0) {

3745 } i‡(
sock_ty≥
 =
SOCK_DGRAM
 &&

3746 (
	`gësock«me
(
•
[0], &
ß
.ß, &
Àn
) != 0 ||

3747 
	`c⁄√˘
(
sock
, &
ß
.ß, 
Àn
) != 0)) {

3748 } i‡((
•
[1] = (
sock_ty≥
 =
SOCK_DGRAM
 ? 
sock


3749 : 
	`ac˚±
(
sock
, &
ß
.ß, &
Àn
))) ==

3750 
INVALID_SOCKET
) {

3752 
	`mg_£t_˛o£_⁄_exec
(
•
[0]);

3753 
	`mg_£t_˛o£_⁄_exec
(
•
[1]);

3754 i‡(
sock_ty≥
 =
SOCK_STREAM
Ë
	`˛o£sockë
(
sock
);

3755 
ªt
 = 1;

3758 i‡(!
ªt
) {

3759 i‡(
•
[0] !
INVALID_SOCKET
Ë
	`˛o£sockë
(sp[0]);

3760 i‡(
•
[1] !
INVALID_SOCKET
Ë
	`˛o£sockë
(sp[1]);

3761 i‡(
sock
 !
INVALID_SOCKET
Ë
	`˛o£sockë
(sock);

3762 
sock
 = 
•
[0] = sp[1] = 
INVALID_SOCKET
;

3765  
ªt
;

3766 
	}
}

3769 
	$mg_sock_gë_addr
(
sock_t
 
sock
, 
ªmŸe
,

3770 
sockë_addªss
 *
ß
) {

3771 
sockÀn_t
 
¶í
 = (*
ß
);

3772 
	`mem£t
(
ß
, 0, 
¶í
);

3773 i‡(
ªmŸe
) {

3774 
	`gë≥î«me
(
sock
, &
ß
->ß, &
¶í
);

3776 
	`gësock«me
(
sock
, &
ß
->ß, &
¶í
);

3778 
	}
}

3780 
	$mg_sock_to_°r
(
sock_t
 
sock
, *
buf
, 
size_t
 
Àn
, 
Êags
) {

3781 
sockë_addªss
 
ß
;

3782 
	`mg_sock_gë_addr
(
sock
, 
Êags
 & 
MG_SOCK_STRINGIFY_REMOTE
, &
ß
);

3783 
	`mg_sock_addr_to_°r
(&
ß
, 
buf
, 
Àn
, 
Êags
);

3784 
	}
}

3786 
	$mg_sockë_if_gë_c⁄n_addr
(
mg_c⁄√˘i⁄
 *
nc
, 
ªmŸe
,

3787 
sockë_addªss
 *
ß
) {

3788 
	`mg_sock_gë_addr
(
nc
->
sock
, 
ªmŸe
, 
ß
);

3789 
	}
}

3792 
	#MG_SOCKET_IFACE_VTABLE
 \

3794 
mg_sockë_if_öô
, \

3795 
mg_sockë_if_‰ì
, \

3796 
mg_sockë_if_add_c⁄n
, \

3797 
mg_sockë_if_ªmove_c⁄n
, \

3798 
mg_sockë_if_pﬁl
, \

3799 
mg_sockë_if_li°í_t˝
, \

3800 
mg_sockë_if_li°í_udp
, \

3801 
mg_sockë_if_c⁄√˘_t˝
, \

3802 
mg_sockë_if_c⁄√˘_udp
, \

3803 
mg_sockë_if_t˝_£nd
, \

3804 
mg_sockë_if_udp_£nd
, \

3805 
mg_sockë_if_ªcved
, \

3806 
mg_sockë_if_¸óã_c⁄n
, \

3807 
mg_sockë_if_de°roy_c⁄n
, \

3808 
mg_sockë_if_sock_£t
, \

3809 
mg_sockë_if_gë_c⁄n_addr
, \

3810 }

	)

3813 
mg_iÁ˚_vèbÀ
 
	gmg_sockë_iÁ˚_vèbÀ
 = 
MG_SOCKET_IFACE_VTABLE
;

3814 #i‡
MG_NET_IF
 =
MG_NET_IF_SOCKET


3815 
mg_iÁ˚_vèbÀ
 
	gmg_deÁu…_iÁ˚_vèbÀ
 = 
MG_SOCKET_IFACE_VTABLE
;

3819 #ifde‡
MG_MODULE_LINES


3827 #i‡
MG_ENABLE_TUN


3836 
	#MG_TCP_RECV_BUFFER_SIZE
 1024

	)

3837 
	#MG_UDP_RECV_BUFFER_SIZE
 1500

	)

3839 
	$mg_tun_if_c⁄√˘_t˝
(
mg_c⁄√˘i⁄
 *
nc
,

3840 c⁄° 
sockë_addªss
 *
ß
) {

3841 (Ë
nc
;

3842 (Ë
ß
;

3843 
	}
}

3845 
	$mg_tun_if_c⁄√˘_udp
(
mg_c⁄√˘i⁄
 *
nc
) {

3846 (Ë
nc
;

3847 
	}
}

3849 
	$mg_tun_if_li°í_t˝
(
mg_c⁄√˘i⁄
 *
nc
, 
sockë_addªss
 *
ß
) {

3850 (Ë
nc
;

3851 (Ë
ß
;

3853 
	}
}

3855 
	$mg_tun_if_li°í_udp
(
mg_c⁄√˘i⁄
 *
nc
, 
sockë_addªss
 *
ß
) {

3856 (Ë
nc
;

3857 (Ë
ß
;

3859 
	}
}

3861 
	$mg_tun_if_t˝_£nd
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
buf
, 
size_t
 
Àn
) {

3862 
mg_tun_˛õ¡
 *
˛õ¡
 = (mg_tun_˛õ¡ *Ë
nc
->
iÁ˚
->
d©a
;

3863 
uöt32_t
 
°ªam_id
 = (uöt32_t)(
uöçå_t
Ë
nc
->
mgr_d©a
;

3864 
mg_°r
 
msg
 = {(*Ë
buf
, 
Àn
};

3865 #i‡
MG_ENABLE_HEXDUMP


3866 
hex
[512];

3867 
	`mg_hexdump
(
buf
, 
Àn
, 
hex
, (hex));

3868 
	`LOG
(
LL_DEBUG
, ("£ndögÅÿ°ªam %zu:\n%s", 
°ªam_id
, 
hex
));

3871 
	`mg_tun_£nd_‰ame
(
˛õ¡
->
di•
, 
°ªam_id
, 
MG_TUN_DATA_FRAME
, 0, 
msg
);

3872 
	}
}

3874 
	$mg_tun_if_udp_£nd
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
buf
, 
size_t
 
Àn
) {

3875 (Ë
nc
;

3876 (Ë
buf
;

3877 (Ë
Àn
;

3878 
	}
}

3880 
	$mg_tun_if_ªcved
(
mg_c⁄√˘i⁄
 *
nc
, 
size_t
 
Àn
) {

3881 (Ë
nc
;

3882 (Ë
Àn
;

3883 
	}
}

3885 
	$mg_tun_if_¸óã_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

3886 (Ë
nc
;

3888 
	}
}

3890 
	$mg_tun_if_de°roy_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

3891 
mg_tun_˛õ¡
 *
˛õ¡
 = (mg_tun_˛õ¡ *Ë
nc
->
iÁ˚
->
d©a
;

3893 i‡(
nc
->
Êags
 & 
MG_F_LISTENING
) {

3894 
	`mg_tun_de°roy_˛õ¡
(
˛õ¡
);

3895 } i‡(
˛õ¡
->
di•
) {

3896 
uöt32_t
 
°ªam_id
 = (uöt32_t)(
uöçå_t
Ë
nc
->
mgr_d©a
;

3897 
mg_°r
 
msg
 = {
NULL
, 0};

3899 
	`LOG
(
LL_DEBUG
, ("˛osög %zu:", 
°ªam_id
));

3900 
	`mg_tun_£nd_‰ame
(
˛õ¡
->
di•
, 
°ªam_id
, 
MG_TUN_DATA_FRAME
,

3901 
MG_TUN_F_END_STREAM
, 
msg
);

3903 
	}
}

3906 
	$mg_tun_if_sock_£t
(
mg_c⁄√˘i⁄
 *
nc
, 
sock_t
 
sock
) {

3907 (Ë
nc
;

3908 (Ë
sock
;

3909 
	}
}

3911 
	$mg_tun_if_öô
(
mg_iÁ˚
 *
iÁ˚
) {

3912 (Ë
iÁ˚
;

3913 
	}
}

3915 
	$mg_tun_if_‰ì
(
mg_iÁ˚
 *
iÁ˚
) {

3916 (Ë
iÁ˚
;

3917 
	}
}

3919 
	$mg_tun_if_add_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

3920 
nc
->
sock
 = 
INVALID_SOCKET
;

3921 
	}
}

3923 
	$mg_tun_if_ªmove_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

3924 (Ë
nc
;

3925 
	}
}

3927 
time_t
 
	$mg_tun_if_pﬁl
(
mg_iÁ˚
 *
iÁ˚
, 
timeout_ms
) {

3928 (Ë
iÁ˚
;

3929 (Ë
timeout_ms
;

3930  (
time_t
Ë
	`cs_time
();

3931 
	}
}

3933 
	$mg_tun_if_gë_c⁄n_addr
(
mg_c⁄√˘i⁄
 *
nc
, 
ªmŸe
,

3934 
sockë_addªss
 *
ß
) {

3935 (Ë
nc
;

3936 (Ë
ªmŸe
;

3937 (Ë
ß
;

3938 
	}
}

3940 
mg_c⁄√˘i⁄
 *
	$mg_tun_if_föd_c⁄n
(
mg_tun_˛õ¡
 *
˛õ¡
,

3941 
uöt32_t
 
°ªam_id
) {

3942 
mg_c⁄√˘i⁄
 *
nc
 = 
NULL
;

3944 
nc
 = 
˛õ¡
->
mgr
->
a˘ive_c⁄√˘i⁄s
;Ç¯!
NULL
;Ç¯nc->
√xt
) {

3945 i‡(
nc
->
iÁ˚
 !
˛õ¡
->iÁ˚ || (nc->
Êags
 & 
MG_F_LISTENING
)) {

3948 i‡(
°ªam_id
 =(
uöt32_t
)(
uöçå_t
Ë
nc
->
mgr_d©a
) {

3949  
nc
;

3953 i‡(
°ªam_id
 > 
˛õ¡
->
œ°_°ªam_id
) {

3955 
	`LOG
(
LL_DEBUG
, ("√w såóm 0x%lx,ác˚±ög", 
°ªam_id
));

3956 
nc
 = 
	`mg_if_ac˚±_√w_c⁄n
(
˛õ¡
->
li°íî
);

3957 
nc
->
mgr_d©a
 = (*Ë(
uöçå_t
Ë
°ªam_id
;

3958 
˛õ¡
->
œ°_°ªam_id
 = 
°ªam_id
;

3960 
	`LOG
(
LL_DEBUG
, ("Ign‹ög såóm 0x%lx (œ°_°ªam_id 0x%lx)", 
°ªam_id
,

3961 
˛õ¡
->
œ°_°ªam_id
));

3964  
nc
;

3965 
	}
}

3968 
	#MG_TUN_IFACE_VTABLE
 \

3970 
mg_tun_if_öô
, \

3971 
mg_tun_if_‰ì
, \

3972 
mg_tun_if_add_c⁄n
, \

3973 
mg_tun_if_ªmove_c⁄n
, \

3974 
mg_tun_if_pﬁl
, \

3975 
mg_tun_if_li°í_t˝
, \

3976 
mg_tun_if_li°í_udp
, \

3977 
mg_tun_if_c⁄√˘_t˝
, \

3978 
mg_tun_if_c⁄√˘_udp
, \

3979 
mg_tun_if_t˝_£nd
, \

3980 
mg_tun_if_udp_£nd
, \

3981 
mg_tun_if_ªcved
, \

3982 
mg_tun_if_¸óã_c⁄n
, \

3983 
mg_tun_if_de°roy_c⁄n
, \

3984 
mg_tun_if_sock_£t
, \

3985 
mg_tun_if_gë_c⁄n_addr
, \

3986 }

	)

3989 
mg_iÁ˚_vèbÀ
 
	gmg_tun_iÁ˚_vèbÀ
 = 
MG_TUN_IFACE_VTABLE
;

3992 #ifde‡
MG_MODULE_LINES


4000 #i‡
MG_ENABLE_SSL
 && 
MG_SSL_IF
 =
MG_SSL_IF_OPENSSL


4002 #ifde‡
__APPLE__


4003 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wdeprecated-declarations"

4006 
	~<›ís¶/s¶.h
>

4008 
	smg_s¶_if_˘x
 {

4009 
SSL
 *
	ms¶
;

4010 
SSL_CTX
 *
	ms¶_˘x
;

4011 
mbuf
 
	mpsk
;

4012 
size_t
 
	midítôy_Àn
;

4015 
	$mg_s¶_if_öô
() {

4016 
	`SSL_libøry_öô
();

4017 
	}
}

4019 
mg_s¶_if_ªsu…
 
	$mg_s¶_if_c⁄n_ac˚±
(
mg_c⁄√˘i⁄
 *
nc
,

4020 
mg_c⁄√˘i⁄
 *
lc
) {

4021 
mg_s¶_if_˘x
 *
˘x
 =

4022 (
mg_s¶_if_˘x
 *Ë
	`MG_CALLOC
(1, (*
˘x
));

4023 
mg_s¶_if_˘x
 *
lc_˘x
 = (mg_s¶_if_˘x *Ë
lc
->
s¶_if_d©a
;

4024 
nc
->
s¶_if_d©a
 = 
˘x
;

4025 i‡(
˘x
 =
NULL
 || 
lc_˘x
 =NULLË 
MG_SSL_ERROR
;

4026 
˘x
->
s¶_˘x
 = 
lc_˘x
->ssl_ctx;

4027 i‡((
˘x
->
s¶
 = 
	`SSL_√w
(˘x->
s¶_˘x
)Ë=
NULL
) {

4028  
MG_SSL_ERROR
;

4030  
MG_SSL_OK
;

4031 
	}
}

4033 
mg_s¶_if_ªsu…
 
mg_u£_˚π
(
SSL_CTX
 *
˘x
, c⁄° *
˚π
,

4034 c⁄° *
key
, c⁄° **
îr_msg
);

4035 
mg_s¶_if_ªsu…
 
mg_u£_ˇ_˚π
(
SSL_CTX
 *
˘x
, c⁄° *
˚π
);

4036 
mg_s¶_if_ªsu…
 
mg_£t_cùhî_li°
(
SSL_CTX
 *
˘x
, c⁄° *
˛
);

4037 
mg_s¶_if_ªsu…
 
mg_s¶_if_os¶_£t_psk
(
mg_s¶_if_˘x
 *
˘x
,

4038 c⁄° *
idítôy
,

4039 c⁄° *
key_°r
);

4042 
mg_s¶_if_ªsu…
 
	$mg_s¶_if_c⁄n_öô
(

4043 
mg_c⁄√˘i⁄
 *
nc
, c⁄° 
mg_s¶_if_c⁄n_∑øms
 *
∑øms
,

4044 c⁄° **
îr_msg
) {

4045 
mg_s¶_if_˘x
 *
˘x
 =

4046 (
mg_s¶_if_˘x
 *Ë
	`MG_CALLOC
(1, (*
˘x
));

4047 
	`DBG
(("%∞%s,%s,%s", 
nc
, (
∑øms
->
˚π
 ?Öarams->cert : ""),

4048 (
∑øms
->
key
 ?Öarams->key : ""),

4049 (
∑øms
->
ˇ_˚π
 ?Öarams->ca_cert : "")));

4050 i‡(
˘x
 =
NULL
) {

4051 
	`MG_SET_PTRPTR
(
îr_msg
, "Out of memory");

4052  
MG_SSL_ERROR
;

4054 
nc
->
s¶_if_d©a
 = 
˘x
;

4055 i‡(
nc
->
Êags
 & 
MG_F_LISTENING
) {

4056 
˘x
->
s¶_˘x
 = 
	`SSL_CTX_√w
(
	`SSLv23_£rvî_mëhod
());

4058 
˘x
->
s¶_˘x
 = 
	`SSL_CTX_√w
(
	`SSLv23_˛õ¡_mëhod
());

4060 i‡(
˘x
->
s¶_˘x
 =
NULL
) {

4061 
	`MG_SET_PTRPTR
(
îr_msg
, "FailedÅo create SSL context");

4062  
MG_SSL_ERROR
;

4065 i‡(
∑øms
->
˚π
 !
NULL
 &&

4066 
	`mg_u£_˚π
(
˘x
->
s¶_˘x
, 
∑øms
->
˚π
,Ö¨ams->
key
, 
îr_msg
) !=

4067 
MG_SSL_OK
) {

4068  
MG_SSL_ERROR
;

4071 i‡(
∑øms
->
ˇ_˚π
 !
NULL
 &&

4072 
	`mg_u£_ˇ_˚π
(
˘x
->
s¶_˘x
, 
∑øms
->
ˇ_˚π
Ë!
MG_SSL_OK
) {

4073 
	`MG_SET_PTRPTR
(
îr_msg
, "Invalid SSL CA cert");

4074  
MG_SSL_ERROR
;

4077 i‡(
∑øms
->
£rvî_«me
 !
NULL
) {

4078 #ifde‡
KR_VERSION


4079 
	`SSL_CTX_kr_£t_vîify_«me
(
˘x
->
s¶_˘x
, 
∑øms
->
£rvî_«me
);

4085 i‡(
	`mg_£t_cùhî_li°
(
˘x
->
s¶_˘x
, 
∑øms
->
cùhî_suôes
Ë!
MG_SSL_OK
) {

4086 
	`MG_SET_PTRPTR
(
îr_msg
, "Invalid cipher suiteÜist");

4087  
MG_SSL_ERROR
;

4090 
	`mbuf_öô
(&
˘x
->
psk
, 0);

4091 i‡(
	`mg_s¶_if_os¶_£t_psk
(
˘x
, 
∑øms
->
psk_idítôy
,Ö¨ams->
psk_key
) !=

4092 
MG_SSL_OK
) {

4093 
	`MG_SET_PTRPTR
(
îr_msg
, "Invalid PSK settings");

4094  
MG_SSL_ERROR
;

4097 i‡(!(
nc
->
Êags
 & 
MG_F_LISTENING
) &&

4098 (
˘x
->
s¶
 = 
	`SSL_√w
(˘x->
s¶_˘x
)Ë=
NULL
) {

4099 
	`MG_SET_PTRPTR
(
îr_msg
, "FailedÅo create SSL session");

4100  
MG_SSL_ERROR
;

4103 
nc
->
Êags
 |
MG_F_SSL
;

4105  
MG_SSL_OK
;

4106 
	}
}

4108 
mg_s¶_if_ªsu…
 
	$mg_s¶_if_s¶_îr
(
mg_c⁄√˘i⁄
 *
nc
,

4109 
ªs
) {

4110 
mg_s¶_if_˘x
 *
˘x
 = (mg_s¶_if_˘x *Ë
nc
->
s¶_if_d©a
;

4111 
îr
 = 
	`SSL_gë_îr‹
(
˘x
->
s¶
, 
ªs
);

4112 i‡(
îr
 =
SSL_ERROR_WANT_READ
Ë 
MG_SSL_WANT_READ
;

4113 i‡(
îr
 =
SSL_ERROR_WANT_WRITE
Ë 
MG_SSL_WANT_WRITE
;

4114 
	`DBG
(("%∞%∞SSLÉº‹: %d %d", 
nc
, 
˘x
->
s¶_˘x
, 
ªs
, 
îr
));

4115 
nc
->
îr
 =Érr;

4116  
MG_SSL_ERROR
;

4117 
	}
}

4119 
mg_s¶_if_ªsu…
 
	$mg_s¶_if_h™dshake
(
mg_c⁄√˘i⁄
 *
nc
) {

4120 
mg_s¶_if_˘x
 *
˘x
 = (mg_s¶_if_˘x *Ë
nc
->
s¶_if_d©a
;

4121 
£rvî_side
 = (
nc
->
li°íî
 !
NULL
);

4122 
ªs
;

4124 i‡(
	`SSL_gë_fd
(
˘x
->
s¶
) < 0) {

4125 i‡(
	`SSL_£t_fd
(
˘x
->
s¶
, 
nc
->
sock
Ë!1Ë 
MG_SSL_ERROR
;

4127 
ªs
 = 
£rvî_side
 ? 
	`SSL_ac˚±
(
˘x
->
s¶
Ë: 
	`SSL_c⁄√˘
(ctx->ssl);

4128 i‡(
ªs
 !1Ë 
	`mg_s¶_if_s¶_îr
(
nc
,Ñes);

4129  
MG_SSL_OK
;

4130 
	}
}

4132 
	$mg_s¶_if_ªad
(
mg_c⁄√˘i⁄
 *
nc
, *
buf
, 
size_t
 
buf_size
) {

4133 
mg_s¶_if_˘x
 *
˘x
 = (mg_s¶_if_˘x *Ë
nc
->
s¶_if_d©a
;

4134 
n
 = 
	`SSL_ªad
(
˘x
->
s¶
, 
buf
, 
buf_size
);

4135 
	`DBG
(("%∞%d -> %d", 
nc
, (Ë
buf_size
, 
n
));

4136 i‡(
n
 < 0Ë 
	`mg_s¶_if_s¶_îr
(
nc
,Ç);

4137 i‡(
n
 =0Ë
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

4138  
n
;

4139 
	}
}

4141 
	$mg_s¶_if_wrôe
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
d©a
, 
size_t
 
Àn
) {

4142 
mg_s¶_if_˘x
 *
˘x
 = (mg_s¶_if_˘x *Ë
nc
->
s¶_if_d©a
;

4143 
n
 = 
	`SSL_wrôe
(
˘x
->
s¶
, 
d©a
, 
Àn
);

4144 
	`DBG
(("%∞%d -> %d", 
nc
, (Ë
Àn
, 
n
));

4145 i‡(
n
 <0Ë 
	`mg_s¶_if_s¶_îr
(
nc
,Ç);

4146  
n
;

4147 
	}
}

4149 
	$mg_s¶_if_c⁄n_‰ì
(
mg_c⁄√˘i⁄
 *
nc
) {

4150 
mg_s¶_if_˘x
 *
˘x
 = (mg_s¶_if_˘x *Ë
nc
->
s¶_if_d©a
;

4151 i‡(
˘x
 =
NULL
) ;

4152 
nc
->
s¶_if_d©a
 = 
NULL
;

4153 i‡(
˘x
->
s¶
 !
NULL
Ë
	`SSL_‰ì
(ctx->ssl);

4154 i‡(
˘x
->
s¶_˘x
 !
NULL
 && 
nc
->
li°íî
 =NULLË
	`SSL_CTX_‰ì
(ctx->ssl_ctx);

4155 
	`mbuf_‰ì
(&
˘x
->
psk
);

4156 
	`mem£t
(
˘x
, 0, (*ctx));

4157 
	`MG_FREE
(
˘x
);

4158 
	}
}

4164 c⁄° 
	gmg_s_cùhî_li°
[] =

4165 #i‡
deföed
(
MG_SSL_CRYPTO_MODERN
)

4175 #ñi‡
deföed
(
MG_SSL_CRYPTO_OLD
)

4207 #i‡!
MG_DISABLE_PFS
 && !
deföed
(
KR_VERSION
)

4208 c⁄° 
	gmg_s_deÁu…_dh_∑øms
[] =

4220 
mg_s¶_if_ªsu…
 
	$mg_u£_ˇ_˚π
(
SSL_CTX
 *
˘x
, c⁄° *
˚π
) {

4221 i‡(
˚π
 =
NULL
 || 
	`°rcmp
(cert, "*") == 0) {

4222  
MG_SSL_OK
;

4224 
	`SSL_CTX_£t_vîify
(
˘x
, 
SSL_VERIFY_PEER
 | 
SSL_VERIFY_FAIL_IF_NO_PEER_CERT
, 0);

4225  
	`SSL_CTX_lﬂd_vîify_loˇti⁄s
(
˘x
, 
˚π
, 
NULL
Ë=1 ? 
MG_SSL_OK


4226 : 
MG_SSL_ERROR
;

4227 
	}
}

4229 
mg_s¶_if_ªsu…
 
	$mg_u£_˚π
(
SSL_CTX
 *
˘x
, c⁄° *
˚π
,

4230 c⁄° *
key
,

4231 c⁄° **
îr_msg
) {

4232 i‡(
key
 =
NULL
Ëkey = 
˚π
;

4233 i‡(
˚π
 =
NULL
 || cît[0] ='\0' || 
key
 == NULL || key[0] == '\0') {

4234  
MG_SSL_OK
;

4235 } i‡(
	`SSL_CTX_u£_˚πifiˇã_fûe
(
˘x
, 
˚π
, 1) == 0) {

4236 
	`MG_SET_PTRPTR
(
îr_msg
, "Invalid SSL cert");

4237  
MG_SSL_ERROR
;

4238 } i‡(
	`SSL_CTX_u£_Priv©eKey_fûe
(
˘x
, 
key
, 1) == 0) {

4239 
	`MG_SET_PTRPTR
(
îr_msg
, "Invalid SSL key");

4240  
MG_SSL_ERROR
;

4241 } i‡(
	`SSL_CTX_u£_˚πifiˇã_chaö_fûe
(
˘x
, 
˚π
) == 0) {

4242 
	`MG_SET_PTRPTR
(
îr_msg
, "Invalid CA bundle");

4243  
MG_SSL_ERROR
;

4245 
	`SSL_CTX_£t_mode
(
˘x
, 
SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER
);

4246 #i‡!
MG_DISABLE_PFS
 && !
	`deföed
(
KR_VERSION
)

4247 
BIO
 *
bio
 = 
NULL
;

4248 
DH
 *
dh
 = 
NULL
;

4251 
bio
 = 
	`BIO_√w_fûe
(
˚π
, "r");

4252 i‡(
bio
 !
NULL
) {

4253 
dh
 = 
	`PEM_ªad_bio_DH∑øms
(
bio
, 
NULL
, NULL, NULL);

4254 
	`BIO_‰ì
(
bio
);

4260 i‡(
dh
 =
NULL
) {

4261 
bio
 = 
	`BIO_√w_mem_buf
((*Ë
mg_s_deÁu…_dh_∑øms
, -1);

4262 
dh
 = 
	`PEM_ªad_bio_DH∑øms
(
bio
, 
NULL
, NULL, NULL);

4263 
	`BIO_‰ì
(
bio
);

4265 i‡(
dh
 !
NULL
) {

4266 
	`SSL_CTX_£t_tmp_dh
(
˘x
, 
dh
);

4267 
	`SSL_CTX_£t_›ti⁄s
(
˘x
, 
SSL_OP_SINGLE_DH_USE
);

4268 
	`DH_‰ì
(
dh
);

4270 #i‡
OPENSSL_VERSION_NUMBER
 > 0x10002000L

4271 
	`SSL_CTX_£t_ecdh_auto
(
˘x
, 1);

4275  
MG_SSL_OK
;

4276 
	}
}

4278 
mg_s¶_if_ªsu…
 
	$mg_£t_cùhî_li°
(
SSL_CTX
 *
˘x
, c⁄° *
˛
) {

4279  (
	`SSL_CTX_£t_cùhî_li°
(
˘x
, 
˛
 ? c»: 
mg_s_cùhî_li°
) == 1

4280 ? 
MG_SSL_OK


4281 : 
MG_SSL_ERROR
);

4282 
	}
}

4284 #i‚de‡
KR_VERSION


4285 
	$mg_s¶_if_os¶_psk_cb
(
SSL
 *
s¶
, c⁄° *
höt
,

4286 *
idítôy
,

4287 
max_idítôy_Àn
,

4288 *
psk
,

4289 
max_psk_Àn
) {

4290 
mg_s¶_if_˘x
 *
˘x
 =

4291 (
mg_s¶_if_˘x
 *Ë
s¶
->
˘x
->
msg_ˇŒback_¨g
;

4292 
size_t
 
key_Àn
 = 
˘x
->
psk
.
Àn
 - ctx->
idítôy_Àn
 - 1;

4293 
	`DBG
(("höt: '%s'", (
höt
 ? hint : "")));

4294 i‡(
˘x
->
idítôy_Àn
 + 1 > 
max_idítôy_Àn
) {

4295 
	`DBG
(("identityÅooÜong"));

4298 i‡(
key_Àn
 > 
max_psk_Àn
) {

4299 
	`DBG
(("keyÅooÜong"));

4302 
	`mem˝y
(
idítôy
, 
˘x
->
psk
.
buf
, ctx->
idítôy_Àn
 + 1);

4303 
	`mem˝y
(
psk
, 
˘x
->psk.
buf
 + ctx->
idítôy_Àn
 + 1, 
key_Àn
);

4304 (Ë
s¶
;

4305  
key_Àn
;

4306 
	}
}

4308 
mg_s¶_if_ªsu…
 
	$mg_s¶_if_os¶_£t_psk
(
mg_s¶_if_˘x
 *
˘x
,

4309 c⁄° *
idítôy
,

4310 c⁄° *
key_°r
) {

4311 
key
[32];

4312 
size_t
 
key_Àn
;

4313 
size_t
 
i
 = 0;

4314 i‡(
idítôy
 =
NULL
 && 
key_°r
 =NULLË 
MG_SSL_OK
;

4315 i‡(
idítôy
 =
NULL
 || 
key_°r
 =NULLË 
MG_SSL_ERROR
;

4316 
key_Àn
 = 
	`°æí
(
key_°r
);

4317 i‡(
key_Àn
 !32 && key_À¿!64Ë 
MG_SSL_ERROR
;

4318 
	`mem£t
(
key
, 0, (key));

4319 
key_Àn
 = 0;

4320 
i
 = 0; 
key_°r
[i] != '\0'; i++) {

4321 
c
;

4322 
hc
 = 
	`tﬁowî
((Ë
key_°r
[
i
]);

4323 i‡(
hc
 >= '0' && hc <= '9') {

4324 
c
 = 
hc
 - '0';

4325 } i‡(
hc
 >= 'a' && hc <= 'f') {

4326 
c
 = 
hc
 - 'a' + 0xa;

4328  
MG_SSL_ERROR
;

4330 
key_Àn
 = 
i
 / 2;

4331 
key
[
key_Àn
] <<= 4;

4332 
key
[
key_Àn
] |
c
;

4334 
key_Àn
++;

4335 
	`DBG
(("idítôy = '%s', key = (%u)", 
idítôy
, (Ë
key_Àn
));

4336 
˘x
->
idítôy_Àn
 = 
	`°æí
(
idítôy
);

4337 
	`mbuf_≠≥nd
(&
˘x
->
psk
, 
idítôy
, ctx->
idítôy_Àn
 + 1);

4338 
	`mbuf_≠≥nd
(&
˘x
->
psk
, 
key
, 
key_Àn
);

4339 
	`SSL_CTX_£t_psk_˛õ¡_ˇŒback
(
˘x
->
s¶_˘x
, 
mg_s¶_if_os¶_psk_cb
);

4341 
˘x
->
s¶_˘x
->
msg_ˇŒback_¨g
 = ctx;

4342  
MG_SSL_OK
;

4343 
	}
}

4345 
mg_s¶_if_ªsu…
 
	$mg_s¶_if_os¶_£t_psk
(
mg_s¶_if_˘x
 *
˘x
,

4346 c⁄° *
idítôy
,

4347 c⁄° *
key_°r
) {

4348 (Ë
˘x
;

4349 (Ë
idítôy
;

4350 (Ë
key_°r
;

4352  
MG_SSL_ERROR
;

4353 
	}
}

4356 c⁄° *
	$mg_£t_s¶
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
˚π
,

4357 c⁄° *
ˇ_˚π
) {

4358 c⁄° *
îr_msg
 = 
NULL
;

4359 
mg_s¶_if_c⁄n_∑øms
 
∑øms
;

4360 
	`mem£t
(&
∑øms
, 0, (params));

4361 
∑øms
.
˚π
 = cert;

4362 
∑øms
.
ˇ_˚π
 = ca_cert;

4363 i‡(
	`mg_s¶_if_c⁄n_öô
(
nc
, &
∑øms
, &
îr_msg
Ë!
MG_SSL_OK
) {

4364  
îr_msg
;

4366  
NULL
;

4367 
	}
}

4370 #ifde‡
MG_MODULE_LINES


4378 #i‡
MG_ENABLE_SSL
 && 
MG_SSL_IF
 =
MG_SSL_IF_MBEDTLS


4380 
	~<mbedés/debug.h
>

4381 
	~<mbedés/e˝.h
>

4382 
	~<mbedés/∂©f‹m.h
>

4383 
	~<mbedés/s¶.h
>

4384 
	~<mbedés/x509_¸t.h
>

4386 
	$mg_s¶_mbed_log
(*
˘x
, 
Àvñ
, c⁄° *
fûe
, 
löe
,

4387 c⁄° *
°r
) {

4388 
cs_log_Àvñ
 
cs_Àvñ
;

4389 
Àvñ
) {

4391 
cs_Àvñ
 = 
LL_ERROR
;

4395 
cs_Àvñ
 = 
LL_DEBUG
;

4398 
cs_Àvñ
 = 
LL_VERBOSE_DEBUG
;

4401 
	`LOG
(
cs_Àvñ
, ("%∞%.*s", 
˘x
, (Ë(
	`°æí
(
°r
) - 1), str));

4402 (Ë
fûe
;

4403 (Ë
löe
;

4404 
	}
}

4406 
	smg_s¶_if_˘x
 {

4407 
mbedés_s¶_c⁄fig
 *
	mc⁄f
;

4408 
mbedés_s¶_c⁄ãxt
 *
	ms¶
;

4409 
mbedés_x509_¸t
 *
	m˚π
;

4410 
mbedés_pk_c⁄ãxt
 *
	mkey
;

4411 
mbedés_x509_¸t
 *
	mˇ_˚π
;

4412 
mbuf
 
	mcùhî_suôes
;

4416 
mg_s¶_if_mbed_øndom
(*
˘x
, *
buf
, 
size_t
 
Àn
);

4418 
	$mg_s¶_if_öô
() {

4419 
	}
}

4421 
mg_s¶_if_ªsu…
 
	$mg_s¶_if_c⁄n_ac˚±
(
mg_c⁄√˘i⁄
 *
nc
,

4422 
mg_c⁄√˘i⁄
 *
lc
) {

4423 
mg_s¶_if_˘x
 *
˘x
 =

4424 (
mg_s¶_if_˘x
 *Ë
	`MG_CALLOC
(1, (*
˘x
));

4425 
mg_s¶_if_˘x
 *
lc_˘x
 = (mg_s¶_if_˘x *Ë
lc
->
s¶_if_d©a
;

4426 
nc
->
s¶_if_d©a
 = 
˘x
;

4427 i‡(
˘x
 =
NULL
 || 
lc_˘x
 =NULLË 
MG_SSL_ERROR
;

4428 
˘x
->
s¶
 = (
mbedés_s¶_c⁄ãxt
 *Ë
	`MG_CALLOC
(1, (*ctx->ssl));

4429 i‡(
	`mbedés_s¶_£tup
(
˘x
->
s¶
, 
lc_˘x
->
c⁄f
) != 0) {

4430  
MG_SSL_ERROR
;

4432  
MG_SSL_OK
;

4433 
	}
}

4435 
mg_s¶_if_ªsu…
 
mg_u£_˚π
(
mg_s¶_if_˘x
 *
˘x
,

4436 c⁄° *
˚π
, c⁄° *
key
,

4437 c⁄° **
îr_msg
);

4438 
mg_s¶_if_ªsu…
 
mg_u£_ˇ_˚π
(
mg_s¶_if_˘x
 *
˘x
,

4439 c⁄° *
˚π
);

4440 
mg_s¶_if_ªsu…
 
mg_£t_cùhî_li°
(
mg_s¶_if_˘x
 *
˘x
,

4441 c⁄° *
cùhîs
);

4442 
mg_s¶_if_ªsu…
 
mg_s¶_if_mbed_£t_psk
(
mg_s¶_if_˘x
 *
˘x
,

4443 c⁄° *
idítôy
,

4444 c⁄° *
key
);

4446 
mg_s¶_if_ªsu…
 
	$mg_s¶_if_c⁄n_öô
(

4447 
mg_c⁄√˘i⁄
 *
nc
, c⁄° 
mg_s¶_if_c⁄n_∑øms
 *
∑øms
,

4448 c⁄° **
îr_msg
) {

4449 
mg_s¶_if_˘x
 *
˘x
 =

4450 (
mg_s¶_if_˘x
 *Ë
	`MG_CALLOC
(1, (*
˘x
));

4451 
	`DBG
(("%∞%s,%s,%s", 
nc
, (
∑øms
->
˚π
 ?Öarams->cert : ""),

4452 (
∑øms
->
key
 ?Öarams->key : ""),

4453 (
∑øms
->
ˇ_˚π
 ?Öarams->ca_cert : "")));

4455 i‡(
˘x
 =
NULL
) {

4456 
	`MG_SET_PTRPTR
(
îr_msg
, "Out of memory");

4457  
MG_SSL_ERROR
;

4459 
nc
->
s¶_if_d©a
 = 
˘x
;

4460 
˘x
->
c⁄f
 = (
mbedés_s¶_c⁄fig
 *Ë
	`MG_CALLOC
(1, (*ctx->conf));

4461 
	`mbuf_öô
(&
˘x
->
cùhî_suôes
, 0);

4462 
	`mbedés_s¶_c⁄fig_öô
(
˘x
->
c⁄f
);

4463 
	`mbedés_s¶_c⁄f_dbg
(
˘x
->
c⁄f
, 
mg_s¶_mbed_log
, 
nc
);

4464 i‡(
	`mbedés_s¶_c⁄fig_deÁu…s
(

4465 
˘x
->
c⁄f
, (
nc
->
Êags
 & 
MG_F_LISTENING
 ? 
MBEDTLS_SSL_IS_SERVER


4466 : 
MBEDTLS_SSL_IS_CLIENT
),

4467 
MBEDTLS_SSL_TRANSPORT_STREAM
, 
MBEDTLS_SSL_PRESET_DEFAULT
) != 0) {

4468 
	`MG_SET_PTRPTR
(
îr_msg
, "FailedÅo init SSL config");

4469  
MG_SSL_ERROR
;

4473 
	`mbedés_s¶_c⁄f_mö_vîsi⁄
(
˘x
->
c⁄f
, 
MBEDTLS_SSL_MAJOR_VERSION_3
,

4474 
MBEDTLS_SSL_MINOR_VERSION_3
);

4475 
	`mbedés_s¶_c⁄f_∫g
(
˘x
->
c⁄f
, 
mg_s¶_if_mbed_øndom
, 
nc
);

4477 i‡(
∑øms
->
˚π
 !
NULL
 &&

4478 
	`mg_u£_˚π
(
˘x
, 
∑øms
->
˚π
,Ö¨ams->
key
, 
îr_msg
Ë!
MG_SSL_OK
) {

4479  
MG_SSL_ERROR
;

4482 i‡(
∑øms
->
ˇ_˚π
 !
NULL
 &&

4483 
	`mg_u£_ˇ_˚π
(
˘x
, 
∑øms
->
ˇ_˚π
Ë!
MG_SSL_OK
) {

4484 
	`MG_SET_PTRPTR
(
îr_msg
, "Invalid SSL CA cert");

4485  
MG_SSL_ERROR
;

4488 i‡(
	`mg_£t_cùhî_li°
(
˘x
, 
∑øms
->
cùhî_suôes
Ë!
MG_SSL_OK
) {

4489 
	`MG_SET_PTRPTR
(
îr_msg
, "Invalid cipher suiteÜist");

4490  
MG_SSL_ERROR
;

4493 i‡(
	`mg_s¶_if_mbed_£t_psk
(
˘x
, 
∑øms
->
psk_idítôy
,Ö¨ams->
psk_key
) !=

4494 
MG_SSL_OK
) {

4495 
	`MG_SET_PTRPTR
(
îr_msg
, "Invalid PSK settings");

4496  
MG_SSL_ERROR
;

4499 i‡(!(
nc
->
Êags
 & 
MG_F_LISTENING
)) {

4500 
˘x
->
s¶
 = (
mbedés_s¶_c⁄ãxt
 *Ë
	`MG_CALLOC
(1, (*ctx->ssl));

4501 
	`mbedés_s¶_öô
(
˘x
->
s¶
);

4502 i‡(
	`mbedés_s¶_£tup
(
˘x
->
s¶
, ctx->
c⁄f
) != 0) {

4503 
	`MG_SET_PTRPTR
(
îr_msg
, "FailedÅo create SSL session");

4504  
MG_SSL_ERROR
;

4506 i‡(
∑øms
->
£rvî_«me
 !
NULL
 &&

4507 
	`mbedés_s¶_£t_ho°«me
(
˘x
->
s¶
, 
∑øms
->
£rvî_«me
) != 0) {

4508  
MG_SSL_ERROR
;

4512 #ifde‡
MG_SSL_IF_MBEDTLS_MAX_FRAG_LEN


4513 i‡(
	`mbedés_s¶_c⁄f_max_‰ag_Àn
(
˘x
->
c⁄f
,

4514 #i‡
MG_SSL_IF_MBEDTLS_MAX_FRAG_LEN
 == 512

4515 
MBEDTLS_SSL_MAX_FRAG_LEN_512


4516 #ñi‡
MG_SSL_IF_MBEDTLS_MAX_FRAG_LEN
 == 1024

4517 
MBEDTLS_SSL_MAX_FRAG_LEN_1024


4518 #ñi‡
MG_SSL_IF_MBEDTLS_MAX_FRAG_LEN
 == 2048

4519 
MBEDTLS_SSL_MAX_FRAG_LEN_2048


4520 #ñi‡
MG_SSL_IF_MBEDTLS_MAX_FRAG_LEN
 == 4096

4521 
MBEDTLS_SSL_MAX_FRAG_LEN_4096


4523 #îr‹ 
InvÆid
 
MG_SSL_IF_MBEDTLS_MAX_FRAG_LEN


4526  
MG_SSL_ERROR
;

4530 
nc
->
Êags
 |
MG_F_SSL
;

4532  
MG_SSL_OK
;

4533 
	}
}

4535 #i‡
MG_NET_IF
 =
MG_NET_IF_LWIP_LOW_LEVEL


4536 
s¶_sockë_£nd
(*
˘x
, c⁄° *
buf
, 
size_t
 
Àn
);

4537 
s¶_sockë_ªcv
(*
˘x
, *
buf
, 
size_t
 
Àn
);

4539 
	$s¶_sockë_£nd
(*
˘x
, c⁄° *
buf
, 
size_t
 
Àn
) {

4540 
mg_c⁄√˘i⁄
 *
nc
 = (mg_c⁄√˘i⁄ *Ë
˘x
;

4541 
n
 = (Ë
	`MG_SEND_FUNC
(
nc
->
sock
, 
buf
, 
Àn
, 0);

4542 
	`LOG
(
LL_DEBUG
, ("%∞%d -> %d", 
nc
, (Ë
Àn
, 
n
));

4543 i‡(
n
 >= 0) Ç;

4544 
n
 = 
	`mg_gë_î∫o
();

4545  ((
n
 =
EAGAIN
 ||Ç =
EINPROGRESS
Ë? 
MBEDTLS_ERR_SSL_WANT_WRITE
 : -1);

4546 
	}
}

4548 
	$s¶_sockë_ªcv
(*
˘x
, *
buf
, 
size_t
 
Àn
) {

4549 
mg_c⁄√˘i⁄
 *
nc
 = (mg_c⁄√˘i⁄ *Ë
˘x
;

4550 
n
 = (Ë
	`MG_RECV_FUNC
(
nc
->
sock
, 
buf
, 
Àn
, 0);

4551 
	`LOG
(
LL_DEBUG
, ("%∞%d <- %d", 
nc
, (Ë
Àn
, 
n
));

4552 i‡(
n
 >= 0) Ç;

4553 
n
 = 
	`mg_gë_î∫o
();

4554  ((
n
 =
EAGAIN
 ||Ç =
EINPROGRESS
Ë? 
MBEDTLS_ERR_SSL_WANT_READ
 : -1);

4555 
	}
}

4558 
mg_s¶_if_ªsu…
 
	$mg_s¶_if_mbed_îr
(
mg_c⁄√˘i⁄
 *
nc
,

4559 
ªt
) {

4560 i‡(
ªt
 =
MBEDTLS_ERR_SSL_WANT_READ
Ë 
MG_SSL_WANT_READ
;

4561 i‡(
ªt
 =
MBEDTLS_ERR_SSL_WANT_WRITE
Ë 
MG_SSL_WANT_WRITE
;

4562 i‡(
ªt
 !=

4563 
MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY
) {

4564 
	`LOG
(
LL_ERROR
, ("%∞SSLÉº‹: %d", 
nc
, 
ªt
));

4566 
nc
->
îr
 = 
ªt
;

4567 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

4568  
MG_SSL_ERROR
;

4569 
	}
}

4571 
	$mg_s¶_if_mbed_‰ì_˚πs_™d_keys
(
mg_s¶_if_˘x
 *
˘x
) {

4572 i‡(
˘x
->
˚π
 !
NULL
) {

4573 
	`mbedés_x509_¸t_‰ì
(
˘x
->
˚π
);

4574 
	`MG_FREE
(
˘x
->
˚π
);

4575 
˘x
->
˚π
 = 
NULL
;

4576 
	`mbedés_pk_‰ì
(
˘x
->
key
);

4577 
	`MG_FREE
(
˘x
->
key
);

4578 
˘x
->
key
 = 
NULL
;

4580 i‡(
˘x
->
ˇ_˚π
 !
NULL
) {

4581 
	`mbedés_s¶_c⁄f_ˇ_chaö
(
˘x
->
c⁄f
, 
NULL
, NULL);

4582 
	`mbedés_x509_¸t_‰ì
(
˘x
->
ˇ_˚π
);

4583 
	`MG_FREE
(
˘x
->
ˇ_˚π
);

4584 
˘x
->
ˇ_˚π
 = 
NULL
;

4586 
	}
}

4588 
mg_s¶_if_ªsu…
 
	$mg_s¶_if_h™dshake
(
mg_c⁄√˘i⁄
 *
nc
) {

4589 
mg_s¶_if_˘x
 *
˘x
 = (mg_s¶_if_˘x *Ë
nc
->
s¶_if_d©a
;

4590 
îr
;

4592 i‡(
˘x
->
s¶
->
p_bio
 =
NULL
) {

4593 
	`mbedés_s¶_£t_bio
(
˘x
->
s¶
, 
nc
, 
s¶_sockë_£nd
, 
s¶_sockë_ªcv
, 
NULL
);

4595 
îr
 = 
	`mbedés_s¶_h™dshake
(
˘x
->
s¶
);

4596 i‡(
îr
 !0Ë 
	`mg_s¶_if_mbed_îr
(
nc
,Érr);

4597 #ifde‡
MG_SSL_IF_MBEDTLS_FREE_CERTS


4602 
	`mbedés_x509_¸t_‰ì
(
˘x
->
s¶
->
£ssi⁄
->
≥î_˚π
);

4603 
	`mbedés_‰ì
(
˘x
->
s¶
->
£ssi⁄
->
≥î_˚π
);

4604 
˘x
->
s¶
->
£ssi⁄
->
≥î_˚π
 = 
NULL
;

4606 i‡(
nc
->
li°íî
 =
NULL
) {

4607 i‡(
˘x
->
c⁄f
->
key_˚π
 !
NULL
) {

4609 
	`MG_FREE
(
˘x
->
c⁄f
->
key_˚π
);

4610 
˘x
->
c⁄f
->
key_˚π
 = 
NULL
;

4612 
	`mbedés_s¶_c⁄f_ˇ_chaö
(
˘x
->
c⁄f
, 
NULL
, NULL);

4613 
	`mg_s¶_if_mbed_‰ì_˚πs_™d_keys
(
˘x
);

4616  
MG_SSL_OK
;

4617 
	}
}

4619 
	$mg_s¶_if_ªad
(
mg_c⁄√˘i⁄
 *
nc
, *
buf
, 
size_t
 
buf_size
) {

4620 
mg_s¶_if_˘x
 *
˘x
 = (mg_s¶_if_˘x *Ë
nc
->
s¶_if_d©a
;

4621 
n
 = 
	`mbedés_s¶_ªad
(
˘x
->
s¶
, (*Ë
buf
, 
buf_size
);

4622 
	`DBG
(("%∞%d -> %d", 
nc
, (Ë
buf_size
, 
n
));

4623 i‡(
n
 < 0Ë 
	`mg_s¶_if_mbed_îr
(
nc
,Ç);

4624 i‡(
n
 =0Ë
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

4625  
n
;

4626 
	}
}

4628 
	$mg_s¶_if_wrôe
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
d©a
, 
size_t
 
Àn
) {

4629 
mg_s¶_if_˘x
 *
˘x
 = (mg_s¶_if_˘x *Ë
nc
->
s¶_if_d©a
;

4630 
n
 = 
	`mbedés_s¶_wrôe
(
˘x
->
s¶
, (c⁄° *Ë
d©a
, 
Àn
);

4631 
	`DBG
(("%∞%d -> %d", 
nc
, (Ë
Àn
, 
n
));

4632 i‡(
n
 < 0Ë 
	`mg_s¶_if_mbed_îr
(
nc
,Ç);

4633  
n
;

4634 
	}
}

4636 
	$mg_s¶_if_c⁄n_‰ì
(
mg_c⁄√˘i⁄
 *
nc
) {

4637 
mg_s¶_if_˘x
 *
˘x
 = (mg_s¶_if_˘x *Ë
nc
->
s¶_if_d©a
;

4638 i‡(
˘x
 =
NULL
) ;

4639 
nc
->
s¶_if_d©a
 = 
NULL
;

4640 i‡(
˘x
->
s¶
 !
NULL
) {

4641 
	`mbedés_s¶_‰ì
(
˘x
->
s¶
);

4642 
	`MG_FREE
(
˘x
->
s¶
);

4644 
	`mg_s¶_if_mbed_‰ì_˚πs_™d_keys
(
˘x
);

4645 i‡(
˘x
->
c⁄f
 !
NULL
) {

4646 
	`mbedés_s¶_c⁄fig_‰ì
(
˘x
->
c⁄f
);

4647 
	`MG_FREE
(
˘x
->
c⁄f
);

4649 
	`mbuf_‰ì
(&
˘x
->
cùhî_suôes
);

4650 
	`mem£t
(
˘x
, 0, (*ctx));

4651 
	`MG_FREE
(
˘x
);

4652 
	}
}

4654 
mg_s¶_if_ªsu…
 
	$mg_u£_ˇ_˚π
(
mg_s¶_if_˘x
 *
˘x
,

4655 c⁄° *
ˇ_˚π
) {

4656 i‡(
ˇ_˚π
 =
NULL
 || 
	`°rcmp
(ca_cert, "*") == 0) {

4657  
MG_SSL_OK
;

4659 
˘x
->
ˇ_˚π
 = (
mbedés_x509_¸t
 *Ë
	`MG_CALLOC
(1, (*ctx->ca_cert));

4660 
	`mbedés_x509_¸t_öô
(
˘x
->
ˇ_˚π
);

4661 i‡(
	`mbedés_x509_¸t_∑r£_fûe
(
˘x
->
ˇ_˚π
, ca_cert) != 0) {

4662  
MG_SSL_ERROR
;

4664 
	`mbedés_s¶_c⁄f_ˇ_chaö
(
˘x
->
c⁄f
, ctx->
ˇ_˚π
, 
NULL
);

4665 
	`mbedés_s¶_c⁄f_authmode
(
˘x
->
c⁄f
, 
MBEDTLS_SSL_VERIFY_REQUIRED
);

4666  
MG_SSL_OK
;

4667 
	}
}

4669 
mg_s¶_if_ªsu…
 
	$mg_u£_˚π
(
mg_s¶_if_˘x
 *
˘x
,

4670 c⁄° *
˚π
, c⁄° *
key
,

4671 c⁄° **
îr_msg
) {

4672 i‡(
key
 =
NULL
Ëkey = 
˚π
;

4673 i‡(
˚π
 =
NULL
 || cît[0] ='\0' || 
key
 == NULL || key[0] == '\0') {

4674  
MG_SSL_OK
;

4676 
˘x
->
˚π
 = (
mbedés_x509_¸t
 *Ë
	`MG_CALLOC
(1, (*ctx->cert));

4677 
	`mbedés_x509_¸t_öô
(
˘x
->
˚π
);

4678 
˘x
->
key
 = (
mbedés_pk_c⁄ãxt
 *Ë
	`MG_CALLOC
(1, (*ctx->key));

4679 
	`mbedés_pk_öô
(
˘x
->
key
);

4680 i‡(
	`mbedés_x509_¸t_∑r£_fûe
(
˘x
->
˚π
, cert) != 0) {

4681 
	`MG_SET_PTRPTR
(
îr_msg
, "Invalid SSL cert");

4682  
MG_SSL_ERROR
;

4684 i‡(
	`mbedés_pk_∑r£_keyfûe
(
˘x
->
key
, key, 
NULL
) != 0) {

4685 
	`MG_SET_PTRPTR
(
îr_msg
, "Invalid SSL key");

4686  
MG_SSL_ERROR
;

4688 i‡(
	`mbedés_s¶_c⁄f_own_˚π
(
˘x
->
c⁄f
, ctx->
˚π
, ctx->
key
) != 0) {

4689 
	`MG_SET_PTRPTR
(
îr_msg
, "Invalid SSL key or cert");

4690  
MG_SSL_ERROR
;

4692  
MG_SSL_OK
;

4693 
	}
}

4695 c⁄° 
	gmg_s_cùhî_li°
[] = {

4696 
MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
,

4697 
MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
,

4698 
MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
,

4699 
MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
,

4700 
MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
,

4701 
MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256
,

4702 
MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA
,

4703 
MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256
,

4704 
MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256
,

4705 
MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA
,

4706 
MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256
,

4707 
MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256
,

4708 
MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA
, 0};

4716 
mg_s¶_if_ªsu…
 
	$mg_£t_cùhî_li°
(
mg_s¶_if_˘x
 *
˘x
,

4717 c⁄° *
cùhîs
) {

4718 i‡(
cùhîs
 !
NULL
) {

4719 
l
, 
id
;

4720 c⁄° *
s
 = 
cùhîs
, *
e
;

4721 
tmp
[50];

4722 
s
 !
NULL
) {

4723 
e
 = 
	`°rchr
(
s
, ':');

4724 
l
 = (
e
 !
NULL
 ? (ê- 
s
Ë: (Ë
	`°æí
(s));

4725 
	`°∫˝y
(
tmp
, 
s
, 
l
);

4726 
tmp
[
l
] = '\0';

4727 
id
 = 
	`mbedés_s¶_gë_cùhîsuôe_id
(
tmp
);

4728 
	`DBG
(("%†-> %04x", 
tmp
, 
id
));

4729 i‡(
id
 != 0) {

4730 
	`mbuf_≠≥nd
(&
˘x
->
cùhî_suôes
, &
id
, (id));

4732 
s
 = (
e
 !
NULL
 ?É + 1 : NULL);

4734 i‡(
˘x
->
cùhî_suôes
.
Àn
 =0Ë 
MG_SSL_ERROR
;

4735 
id
 = 0;

4736 
	`mbuf_≠≥nd
(&
˘x
->
cùhî_suôes
, &
id
, (id));

4737 
	`mbuf_åim
(&
˘x
->
cùhî_suôes
);

4738 
	`mbedés_s¶_c⁄f_cùhîsuôes
(
˘x
->
c⁄f
,

4739 (c⁄° *Ë
˘x
->
cùhî_suôes
.
buf
);

4741 
	`mbedés_s¶_c⁄f_cùhîsuôes
(
˘x
->
c⁄f
, 
mg_s_cùhî_li°
);

4743  
MG_SSL_OK
;

4744 
	}
}

4746 
mg_s¶_if_ªsu…
 
	$mg_s¶_if_mbed_£t_psk
(
mg_s¶_if_˘x
 *
˘x
,

4747 c⁄° *
idítôy
,

4748 c⁄° *
key_°r
) {

4749 
key
[32];

4750 
size_t
 
key_Àn
;

4751 i‡(
idítôy
 =
NULL
 && 
key_°r
 =NULLË 
MG_SSL_OK
;

4752 i‡(
idítôy
 =
NULL
 || 
key_°r
 =NULLË 
MG_SSL_ERROR
;

4753 
key_Àn
 = 
	`°æí
(
key_°r
);

4754 i‡(
key_Àn
 !32 && key_À¿!64Ë 
MG_SSL_ERROR
;

4755 
size_t
 
i
 = 0;

4756 
	`mem£t
(
key
, 0, (key));

4757 
key_Àn
 = 0;

4758 
i
 = 0; 
key_°r
[i] != '\0'; i++) {

4759 
c
;

4760 
hc
 = 
	`tﬁowî
((Ë
key_°r
[
i
]);

4761 i‡(
hc
 >= '0' && hc <= '9') {

4762 
c
 = 
hc
 - '0';

4763 } i‡(
hc
 >= 'a' && hc <= 'f') {

4764 
c
 = 
hc
 - 'a' + 0xa;

4766  
MG_SSL_ERROR
;

4768 
key_Àn
 = 
i
 / 2;

4769 
key
[
key_Àn
] <<= 4;

4770 
key
[
key_Àn
] |
c
;

4772 
key_Àn
++;

4773 
	`DBG
(("idítôy = '%s', key = (%u)", 
idítôy
, (Ë
key_Àn
));

4775 i‡(
	`mbedés_s¶_c⁄f_psk
(
˘x
->
c⁄f
, (c⁄° *Ë
key
, 
key_Àn
,

4776 (c⁄° *Ë
idítôy
,

4777 
	`°æí
(
idítôy
)) != 0) {

4778  
MG_SSL_ERROR
;

4780  
MG_SSL_OK
;

4781 
	}
}

4783 c⁄° *
	$mg_£t_s¶
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
˚π
,

4784 c⁄° *
ˇ_˚π
) {

4785 c⁄° *
îr_msg
 = 
NULL
;

4786 
mg_s¶_if_c⁄n_∑øms
 
∑øms
;

4787 
	`mem£t
(&
∑øms
, 0, (params));

4788 
∑øms
.
˚π
 = cert;

4789 
∑øms
.
ˇ_˚π
 = ca_cert;

4790 i‡(
	`mg_s¶_if_c⁄n_öô
(
nc
, &
∑øms
, &
îr_msg
Ë!
MG_SSL_OK
) {

4791  
îr_msg
;

4793  
NULL
;

4794 
	}
}

4797 #ifde‡
MG_SSL_MBED_DUMMY_RANDOM


4798 
	$mg_s¶_if_mbed_øndom
(*
˘x
, *
buf
, 
size_t
 
Àn
) {

4799 (Ë
˘x
;

4800 
Àn
--Ë*
buf
++ = 
	`ønd
();

4802 
	}
}

4806 #ifde‡
MG_MODULE_LINES


4822 
	$∑r£_uri_comp⁄ít
(c⁄° **
p
, c⁄° *
íd
, 
£p
,

4823 
mg_°r
 *
ªs
) {

4824 
ªs
->
p
 = *p;

4825 ; *
p
 < 
íd
; (*p)++) {

4826 i‡(**
p
 =
£p
) {

4830 
ªs
->
Àn
 = (*
p
) -Ñes->p;

4831 i‡(*
p
 < 
íd
) (*p)++;

4832 
	}
}

4834 
	$mg_∑r£_uri
(
mg_°r
 
uri
, mg_°∏*
scheme
,

4835 
mg_°r
 *
u£r_öfo
, mg_°∏*
ho°
,

4836 *
p‹t
, 
mg_°r
 *
∑th
, mg_°∏*
quîy
,

4837 
mg_°r
 *
‰agmít
) {

4838 
mg_°r
 
rscheme
 = {0, 0}, 
ru£r_öfo
 = {0, 0}, 
rho°
 = {0, 0},

4839 
Ω©h
 = {0, 0}, 
rquîy
 = {0, 0}, 
r‰agmít
 = {0, 0};

4840 
Ω‹t
 = 0;

4842 
P_START
,

4843 
P_SCHEME_OR_PORT
,

4844 
P_USER_INFO
,

4845 
P_HOST
,

4846 
P_PORT
,

4847 
P_REST


4848 } 
°©e
 = 
P_START
;

4850 c⁄° *
p
 = 
uri
.p, *
íd
 =Ö + uri.
Àn
;

4851 
p
 < 
íd
) {

4852 
°©e
) {

4853 
P_START
:

4860 ; 
p
 < 
íd
;Ö++) {

4861 i‡(*
p
 == ':') {

4862 
°©e
 = 
P_SCHEME_OR_PORT
;

4864 } i‡(*
p
 == '/') {

4865 
°©e
 = 
P_REST
;

4869 i‡(
°©e
 =
P_START
 || sèã =
P_REST
) {

4870 
rho°
.
p
 = 
uri
.p;

4871 
rho°
.
Àn
 = 
p
 - 
uri
.p;

4874 
P_SCHEME_OR_PORT
:

4875 i‡(
íd
 - 
p
 >3 && 
	`°∫cmp
(p, "://", 3) == 0) {

4876 
rscheme
.
p
 = 
uri
.p;

4877 
rscheme
.
Àn
 = 
p
 - 
uri
.p;

4878 
°©e
 = 
P_USER_INFO
;

4879 
p
 += 2;

4881 
rho°
.
p
 = 
uri
.p;

4882 
rho°
.
Àn
 = 
p
 - 
uri
.p;

4883 
°©e
 = 
P_PORT
;

4886 
P_USER_INFO
:

4887 
p
++;

4888 
ru£r_öfo
.
p
 =Ö;

4889 ; 
p
 < 
íd
;Ö++) {

4890 i‡(*
p
 == '@') {

4891 
°©e
 = 
P_HOST
;

4893 } i‡(*
p
 == '/') {

4897 i‡(
p
 =
íd
 || *p == '/') {

4899 
°©e
 = 
P_HOST
;

4900 
p
 = 
ru£r_öfo
.p;

4902 
ru£r_öfo
.
Àn
 = 
p
 -Ñuser_info.p;

4904 
P_HOST
:

4905 i‡(*
p
 == '@')Ö++;

4906 
rho°
.
p
 =Ö;

4907 ; 
p
 < 
íd
;Ö++) {

4908 i‡(*
p
 == ':') {

4909 
°©e
 = 
P_PORT
;

4911 } i‡(*
p
 == '/') {

4912 
°©e
 = 
P_REST
;

4916 
rho°
.
Àn
 = 
p
 -Ñhost.p;

4918 
P_PORT
:

4919 
p
++;

4920 ; 
p
 < 
íd
;Ö++) {

4921 i‡(*
p
 == '/') {

4922 
°©e
 = 
P_REST
;

4925 
Ω‹t
 *= 10;

4926 
Ω‹t
 +*
p
 - '0';

4929 
P_REST
:

4931 
	`∑r£_uri_comp⁄ít
(&
p
, 
íd
, '?', &
Ω©h
);

4932 
	`∑r£_uri_comp⁄ít
(&
p
, 
íd
, '#', &
rquîy
);

4933 
	`∑r£_uri_comp⁄ít
(&
p
, 
íd
, '\0', &
r‰agmít
);

4938 i‡(
scheme
 !0Ë*schemê
rscheme
;

4939 i‡(
u£r_öfo
 !0Ë*u£r_öfÿ
ru£r_öfo
;

4940 i‡(
ho°
 !0Ë*ho° = 
rho°
;

4941 i‡(
p‹t
 !0Ë*p‹à
Ω‹t
;

4942 i‡(
∑th
 !0Ë*∑th = 
Ω©h
;

4943 i‡(
quîy
 !0Ë*quîy = 
rquîy
;

4944 i‡(
‰agmít
 !0Ë*‰agmíà
r‰agmít
;

4947 
	}
}

4950 
	$mg_n‹mÆize_uri_∑th
(c⁄° 
mg_°r
 *
ö
, mg_°∏*
out
) {

4951 c⁄° *
s
 = 
ö
->
p
, *
£
 = s + in->
Àn
;

4952 *
˝
 = (*Ë
out
->
p
, *
d
;

4954 i‡(
ö
->
Àn
 =0 || *
s
 != '/') {

4955 
out
->
Àn
 = 0;

4959 
d
 = 
˝
;

4961 
s
 < 
£
) {

4962 c⁄° *
√xt
 = 
s
;

4963 
mg_°r
 
comp⁄ít
;

4964 
	`∑r£_uri_comp⁄ít
(&
√xt
, 
£
, '/', &
comp⁄ít
);

4965 i‡(
	`mg_vcmp
(&
comp⁄ít
, ".") == 0) {

4967 } i‡(
	`mg_vcmp
(&
comp⁄ít
, "..") == 0) {

4969 i‡(
d
 > 
˝
 + 1 && *(d - 1) == '/') d--;

4970 
d
 > 
˝
 && *(d - 1) != '/') d--;

4972 
	`memmove
(
d
, 
s
, 
√xt
 - s);

4973 
d
 +
√xt
 - 
s
;

4975 
s
 = 
√xt
;

4977 i‡(
d
 =
˝
) *d++ = '/';

4979 
out
->
p
 = 
˝
;

4980 
out
->
Àn
 = 
d
 - 
˝
;

4982 
	}
}

4983 #ifde‡
MG_MODULE_LINES


4991 #i‡
MG_ENABLE_HTTP


4998 c⁄° *
	gmg_vîsi⁄_hódî
 = "M⁄goo£/" 
MG_VERSION
;

5000 
	emg_hâp_¥Ÿo_d©a_ty≥
 { 
	mDATA_NONE
, 
	mDATA_FILE
, 
	mDATA_PUT
 };

5002 
	smg_hâp_¥Ÿo_d©a_fûe
 {

5003 
FILE
 *
	mÂ
;

5004 
öt64_t
 
	m˛
;

5005 
öt64_t
 
	m£¡
;

5006 
	mkì∑live
;

5007 
mg_hâp_¥Ÿo_d©a_ty≥
 
	mty≥
;

5010 #i‡
MG_ENABLE_HTTP_CGI


5011 
	smg_hâp_¥Ÿo_d©a_cgi
 {

5012 
mg_c⁄√˘i⁄
 *
	mcgi_nc
;

5016 
	smg_hâp_¥Ÿo_d©a_chuncked
 {

5017 
öt64_t
 
	mbody_Àn
;

5020 
	smg_hâp_ídpoöt
 {

5021 
mg_hâp_ídpoöt
 *
	m√xt
;

5022 c⁄° *
	m«me
;

5023 
size_t
 
	m«me_Àn
;

5024 
mg_evít_h™dÀr_t
 
	mh™dÀr
;

5027 
	emg_hâp_mu…ù¨t_°ªam_°©e
 {

5028 
	mMPS_BEGIN
,

5029 
	mMPS_WAITING_FOR_BOUNDARY
,

5030 
	mMPS_WAITING_FOR_CHUNK
,

5031 
	mMPS_GOT_CHUNK
,

5032 
	mMPS_GOT_BOUNDARY
,

5033 
	mMPS_FINALIZE
,

5034 
	mMPS_FINISHED


5037 
	smg_hâp_mu…ù¨t_°ªam
 {

5038 c⁄° *
	mbound¨y
;

5039 
	mbound¨y_Àn
;

5040 c⁄° *
	mv¨_«me
;

5041 c⁄° *
	mfûe_«me
;

5042 *
	mu£r_d©a
;

5043 
	m¥ev_io_Àn
;

5044 
mg_hâp_mu…ù¨t_°ªam_°©e
 
	m°©e
;

5045 
	m¥o˚ssög_∑π
;

5048 
	smg_ªvî£_¥oxy_d©a
 {

5049 
mg_c⁄√˘i⁄
 *
	mlöked_c⁄n
;

5052 
	smg_hâp_¥Ÿo_d©a
 {

5053 #i‡
MG_ENABLE_FILESYSTEM


5054 
mg_hâp_¥Ÿo_d©a_fûe
 
	mfûe
;

5056 #i‡
MG_ENABLE_HTTP_CGI


5057 
mg_hâp_¥Ÿo_d©a_cgi
 
	mcgi
;

5059 #i‡
MG_ENABLE_HTTP_STREAMING_MULTIPART


5060 
mg_hâp_mu…ù¨t_°ªam
 
	mmp_°ªam
;

5062 
mg_hâp_¥Ÿo_d©a_chuncked
 
	mchunk
;

5063 
mg_hâp_ídpoöt
 *
	mídpoöts
;

5064 
mg_evít_h™dÀr_t
 
	mídpoöt_h™dÀr
;

5065 
mg_ªvî£_¥oxy_d©a
 
	mªvî£_¥oxy_d©a
;

5068 
mg_hâp_c⁄n_de°ru˘‹
(*
¥Ÿo_d©a
);

5069 
mg_c⁄√˘i⁄
 *
mg_c⁄√˘_hâp_ba£
(

5070 
mg_mgr
 *
mgr
, 
mg_evít_h™dÀr_t
 
ev_h™dÀr
,

5071 
mg_c⁄√˘_›ts
 
›ts
, c⁄° *
schema
, c⁄° *
schema_s¶
,

5072 c⁄° *
uæ
, c⁄° **
∑th
, **
u£r
, **
∑ss
, **
addr
);

5074 
mg_hâp_¥Ÿo_d©a
 *
	$mg_hâp_gë_¥Ÿo_d©a
(

5075 
mg_c⁄√˘i⁄
 *
c
) {

5076 i‡(
c
->
¥Ÿo_d©a
 =
NULL
) {

5077 
c
->
¥Ÿo_d©a
 = 
	`MG_CALLOC
(1, (
mg_hâp_¥Ÿo_d©a
));

5078 
c
->
¥Ÿo_d©a_de°ru˘‹
 = 
mg_hâp_c⁄n_de°ru˘‹
;

5081  (
mg_hâp_¥Ÿo_d©a
 *Ë
c
->
¥Ÿo_d©a
;

5082 
	}
}

5084 #i‡
MG_ENABLE_HTTP_STREAMING_MULTIPART


5085 
	$mg_hâp_‰ì_¥Ÿo_d©a_mp_°ªam
(

5086 
mg_hâp_mu…ù¨t_°ªam
 *
mp
) {

5087 
	`‰ì
((*Ë
mp
->
bound¨y
);

5088 
	`‰ì
((*Ë
mp
->
v¨_«me
);

5089 
	`‰ì
((*Ë
mp
->
fûe_«me
);

5090 
	`mem£t
(
mp
, 0, (*mp));

5091 
	}
}

5094 #i‡
MG_ENABLE_FILESYSTEM


5095 
	$mg_hâp_‰ì_¥Ÿo_d©a_fûe
(
mg_hâp_¥Ÿo_d©a_fûe
 *
d
) {

5096 i‡(
d
 !
NULL
) {

5097 i‡(
d
->
Â
 !
NULL
) {

5098 
	`f˛o£
(
d
->
Â
);

5100 
	`mem£t
(
d
, 0, (
mg_hâp_¥Ÿo_d©a_fûe
));

5102 
	}
}

5105 
	$mg_hâp_‰ì_¥Ÿo_d©a_ídpoöts
(
mg_hâp_ídpoöt
 **
ï
) {

5106 
mg_hâp_ídpoöt
 *
cuºít
 = *
ï
;

5108 
cuºít
 !
NULL
) {

5109 
mg_hâp_ídpoöt
 *
tmp
 = 
cuºít
->
√xt
;

5110 
	`‰ì
((*Ë
cuºít
->
«me
);

5111 
	`‰ì
(
cuºít
);

5112 
cuºít
 = 
tmp
;

5115 
ï
 = 
NULL
;

5116 
	}
}

5118 
	$mg_hâp_‰ì_ªvî£_¥oxy_d©a
(
mg_ªvî£_¥oxy_d©a
 *
Ωd
) {

5119 i‡(
Ωd
->
löked_c⁄n
 !
NULL
) {

5125 
mg_hâp_¥Ÿo_d©a
 *
pd
 = 
	`mg_hâp_gë_¥Ÿo_d©a
(
Ωd
->
löked_c⁄n
);

5126 i‡(
pd
->
ªvî£_¥oxy_d©a
.
löked_c⁄n
 !
NULL
) {

5127 
pd
->
ªvî£_¥oxy_d©a
.
löked_c⁄n
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

5128 
pd
->
ªvî£_¥oxy_d©a
.
löked_c⁄n
 = 
NULL
;

5130 
Ωd
->
löked_c⁄n
 = 
NULL
;

5132 
	}
}

5134 
	$mg_hâp_c⁄n_de°ru˘‹
(*
¥Ÿo_d©a
) {

5135 
mg_hâp_¥Ÿo_d©a
 *
pd
 = (mg_hâp_¥Ÿo_d©®*Ë
¥Ÿo_d©a
;

5136 #i‡
MG_ENABLE_FILESYSTEM


5137 
	`mg_hâp_‰ì_¥Ÿo_d©a_fûe
(&
pd
->
fûe
);

5139 #i‡
MG_ENABLE_HTTP_CGI


5140 
	`mg_hâp_‰ì_¥Ÿo_d©a_cgi
(&
pd
->
cgi
);

5142 #i‡
MG_ENABLE_HTTP_STREAMING_MULTIPART


5143 
	`mg_hâp_‰ì_¥Ÿo_d©a_mp_°ªam
(&
pd
->
mp_°ªam
);

5145 
	`mg_hâp_‰ì_¥Ÿo_d©a_ídpoöts
(&
pd
->
ídpoöts
);

5146 
	`mg_hâp_‰ì_ªvî£_¥oxy_d©a
(&
pd
->
ªvî£_¥oxy_d©a
);

5147 
	`‰ì
(
¥Ÿo_d©a
);

5148 
	}
}

5150 #i‡
MG_ENABLE_FILESYSTEM


5152 
	#MIME_ENTRY
(
_ext
, 
_ty≥
) \

5153 { 
_ext
, (_extË- 1, 
_ty≥
 }

	)

5155 c⁄° *
	mexãnsi⁄
;

5156 
size_t
 
	mext_Àn
;

5157 c⁄° *
	mmime_ty≥
;

5158 } 
	gmg_°©ic_buûtö_mime_ty≥s
[] = {

5159 
MIME_ENTRY
("html", "text/html"),

5160 
MIME_ENTRY
("html", "text/html"),

5161 
MIME_ENTRY
("htm", "text/html"),

5162 
MIME_ENTRY
("shtm", "text/html"),

5163 
MIME_ENTRY
("shtml", "text/html"),

5164 
MIME_ENTRY
("css", "text/css"),

5165 
MIME_ENTRY
("js", "application/x-javascript"),

5166 
MIME_ENTRY
("ico", "image/x-icon"),

5167 
MIME_ENTRY
("gif", "image/gif"),

5168 
MIME_ENTRY
("jpg", "image/jpeg"),

5169 
MIME_ENTRY
("jpeg", "image/jpeg"),

5170 
MIME_ENTRY
("png", "image/png"),

5171 
MIME_ENTRY
("svg", "image/svg+xml"),

5172 
MIME_ENTRY
("txt", "text/plain"),

5173 
MIME_ENTRY
("torrent", "application/x-bittorrent"),

5174 
MIME_ENTRY
("wav", "audio/x-wav"),

5175 
MIME_ENTRY
("mp3", "audio/x-mp3"),

5176 
MIME_ENTRY
("mid", "audio/mid"),

5177 
MIME_ENTRY
("m3u", "audio/x-mpegurl"),

5178 
MIME_ENTRY
("ogg", "application/ogg"),

5179 
MIME_ENTRY
("ram", "audio/x-pn-realaudio"),

5180 
MIME_ENTRY
("xml", "text/xml"),

5181 
MIME_ENTRY
("ttf", "application/x-font-ttf"),

5182 
MIME_ENTRY
("json", "application/json"),

5183 
MIME_ENTRY
("xslt", "application/xml"),

5184 
MIME_ENTRY
("xsl", "application/xml"),

5185 
MIME_ENTRY
("ra", "audio/x-pn-realaudio"),

5186 
MIME_ENTRY
("doc", "application/msword"),

5187 
MIME_ENTRY
("exe", "application/octet-stream"),

5188 
MIME_ENTRY
("zip", "application/x-zip-compressed"),

5189 
MIME_ENTRY
("xls", "application/excel"),

5190 
MIME_ENTRY
("tgz", "application/x-tar-gz"),

5191 
MIME_ENTRY
("tar", "application/x-tar"),

5192 
MIME_ENTRY
("gz", "application/x-gunzip"),

5193 
MIME_ENTRY
("arj", "application/x-arj-compressed"),

5194 
MIME_ENTRY
("rar", "application/x-rar-compressed"),

5195 
MIME_ENTRY
("rtf", "application/rtf"),

5196 
MIME_ENTRY
("pdf", "application/pdf"),

5197 
MIME_ENTRY
("swf", "application/x-shockwave-flash"),

5198 
MIME_ENTRY
("mpg", "video/mpeg"),

5199 
MIME_ENTRY
("webm", "video/webm"),

5200 
MIME_ENTRY
("mpeg", "video/mpeg"),

5201 
MIME_ENTRY
("mov", "video/quicktime"),

5202 
MIME_ENTRY
("mp4", "video/mp4"),

5203 
MIME_ENTRY
("m4v", "video/x-m4v"),

5204 
MIME_ENTRY
("asf", "video/x-ms-asf"),

5205 
MIME_ENTRY
("avi", "video/x-msvideo"),

5206 
MIME_ENTRY
("bmp", "image/bmp"),

5207 {
NULL
, 0, NULL}};

5209 
mg_°r
 
	$mg_gë_mime_ty≥
(c⁄° *
∑th
, c⁄° *
dÊt
,

5210 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
) {

5211 c⁄° *
ext
, *
ovîrides
;

5212 
size_t
 
i
, 
∑th_Àn
;

5213 
mg_°r
 
r
, 
k
, 
v
;

5215 
∑th_Àn
 = 
	`°æí
(
∑th
);

5217 
ovîrides
 = 
›ts
->
cu°om_mime_ty≥s
;

5218 (
ovîrides
 = 
	`mg_√xt_comma_li°_íåy
(ovîrides, &
k
, &
v
)Ë!
NULL
) {

5219 
ext
 = 
∑th
 + (
∑th_Àn
 - 
k
.
Àn
);

5220 i‡(
∑th_Àn
 > 
k
.
Àn
 && 
	`mg_vˇ£cmp
(&k, 
ext
) == 0) {

5221  
v
;

5225 
i
 = 0; 
mg_°©ic_buûtö_mime_ty≥s
[i].
exãnsi⁄
 !
NULL
; i++) {

5226 
ext
 = 
∑th
 + (
∑th_Àn
 - 
mg_°©ic_buûtö_mime_ty≥s
[
i
].
ext_Àn
);

5227 i‡(
∑th_Àn
 > 
mg_°©ic_buûtö_mime_ty≥s
[
i
].
ext_Àn
 && 
ext
[-1] == '.' &&

5228 
	`mg_ˇ£cmp
(
ext
, 
mg_°©ic_buûtö_mime_ty≥s
[
i
].
exãnsi⁄
) == 0) {

5229 
r
.
p
 = 
mg_°©ic_buûtö_mime_ty≥s
[
i
].
mime_ty≥
;

5230 
r
.
Àn
 = 
	`°æí
‘.
p
);

5231  
r
;

5235 
r
.
p
 = 
dÊt
;

5236 
r
.
Àn
 = 
	`°æí
‘.
p
);

5237  
r
;

5238 
	}
}

5247 
	$mg_hâp_gë_ªque°_Àn
(c⁄° *
s
, 
buf_Àn
) {

5248 c⁄° *
buf
 = (*Ë
s
;

5249 
i
;

5251 
i
 = 0; i < 
buf_Àn
; i++) {

5252 i‡(!
	`i•röt
(
buf
[
i
]) && buf[i] != '\r' && buf[i] != '\n' && buf[i] < 128) {

5254 } i‡(
buf
[
i
] ='\n' && i + 1 < 
buf_Àn
 && buf[i + 1] == '\n') {

5255  
i
 + 2;

5256 } i‡(
buf
[
i
] ='\n' && i + 2 < 
buf_Àn
 && buf[i + 1] == '\r' &&

5257 
buf
[
i
 + 2] == '\n') {

5258  
i
 + 3;

5263 
	}
}

5265 c⁄° *
	$mg_hâp_∑r£_hódîs
(c⁄° *
s
, c⁄° *
íd
,

5266 
Àn
, 
hâp_mesßge
 *
ªq
) {

5267 
i
 = 0;

5268 
i
 < (Ë
	`ARRAY_SIZE
(
ªq
->
hódî_«mes
) - 1) {

5269 
mg_°r
 *
k
 = &
ªq
->
hódî_«mes
[
i
], *
v
 = &ªq->
hódî_vÆues
[i];

5271 
s
 = 
	`mg_skù
(s, 
íd
, ": ", 
k
);

5272 
s
 = 
	`mg_skù
(s, 
íd
, "\r\n", 
v
);

5274 
v
->
Àn
 > 0 && v->
p
[v->len - 1] == ' ') {

5275 
v
->
Àn
--;

5283 i‡(
k
->
Àn
 !0 && 
v
->len == 0) {

5287 i‡(
k
->
Àn
 =0 || 
v
->len == 0) {

5288 
k
->
p
 = 
v
->∞
NULL
;

5289 
k
->
Àn
 = 
v
->len = 0;

5293 i‡(!
	`mg_nˇ£cmp
(
k
->
p
, "Content-Length", 14)) {

5294 
ªq
->
body
.
Àn
 = (
size_t
Ë
	`to64
(
v
->
p
);

5295 
ªq
->
mesßge
.
Àn
 =Üí +Ñeq->
body
.len;

5298 
i
++;

5301  
s
;

5302 
	}
}

5304 
	$mg_∑r£_hâp
(c⁄° *
s
, 
n
, 
hâp_mesßge
 *
hm
, 
is_ªq
) {

5305 c⁄° *
íd
, *
qs
;

5306 
Àn
 = 
	`mg_hâp_gë_ªque°_Àn
(
s
, 
n
);

5308 i‡(
Àn
 <= 0) Üen;

5310 
	`mem£t
(
hm
, 0, (*hm));

5311 
hm
->
mesßge
.
p
 = 
s
;

5312 
hm
->
body
.
p
 = 
s
 + 
Àn
;

5313 
hm
->
mesßge
.
Àn
 = hm->
body
.À¿(
size_t
) ~0;

5314 
íd
 = 
s
 + 
Àn
;

5317 
s
 < 
íd
 && 
	`is•a˚
(*(*) s)) s++;

5319 i‡(
is_ªq
) {

5321 
s
 = 
	`mg_skù
(s, 
íd
, " ", &
hm
->
mëhod
);

5322 
s
 = 
	`mg_skù
(s, 
íd
, " ", &
hm
->
uri
);

5323 
s
 = 
	`mg_skù
(s, 
íd
, "\r\n", &
hm
->
¥Ÿo
);

5324 i‡(
hm
->
uri
.
p
 <hm->
mëhod
.∞|| hm->
¥Ÿo
.p <= hm->uri.p)  -1;

5327 i‡((
qs
 = (*Ë
	`memchr
(
hm
->
uri
.
p
, '?', hm->uri.
Àn
)Ë!
NULL
) {

5328 
hm
->
quîy_°rög
.
p
 = 
qs
 + 1;

5329 
hm
->
quîy_°rög
.
Àn
 = &hm->
uri
.
p
[hm->uri.Àn] - (
qs
 + 1);

5330 
hm
->
uri
.
Àn
 = 
qs
 - hm->uri.
p
;

5333 
s
 = 
	`mg_skù
(s, 
íd
, " ", &
hm
->
¥Ÿo
);

5334 i‡(
íd
 - 
s
 < 4 || s[3] != ' ')  -1;

5335 
hm
->
ª•_code
 = 
	`©oi
(
s
);

5336 i‡(
hm
->
ª•_code
 < 100 || hm->resp_code >= 600)  -1;

5337 
s
 += 4;

5338 
s
 = 
	`mg_skù
(s, 
íd
, "\r\n", &
hm
->
ª•_°©us_msg
);

5341 
s
 = 
	`mg_hâp_∑r£_hódîs
(s, 
íd
, 
Àn
, 
hm
);

5358 i‡(
hm
->
body
.
Àn
 =(
size_t
Ë~0 && 
is_ªq
 &&

5359 
	`mg_vˇ£cmp
(&
hm
->
mëhod
, "PUT") != 0 &&

5360 
	`mg_vˇ£cmp
(&
hm
->
mëhod
, "POST") != 0) {

5361 
hm
->
body
.
Àn
 = 0;

5362 
hm
->
mesßge
.
Àn
 =Üen;

5365  
Àn
;

5366 
	}
}

5368 
mg_°r
 *
	$mg_gë_hâp_hódî
(
hâp_mesßge
 *
hm
, c⁄° *
«me
) {

5369 
size_t
 
i
, 
Àn
 = 
	`°æí
(
«me
);

5371 
i
 = 0; 
hm
->
hódî_«mes
[i].
Àn
 > 0; i++) {

5372 
mg_°r
 *
h
 = &
hm
->
hódî_«mes
[
i
], *
v
 = &hm->
hódî_vÆues
[i];

5373 i‡(
h
->
p
 !
NULL
 && h->
Àn
 =À¿&& !
	`mg_nˇ£cmp
(h->p, 
«me
,Üen))

5374  
v
;

5377  
NULL
;

5378 
	}
}

5380 #i‡
MG_ENABLE_FILESYSTEM


5381 
	$mg_hâp_å™s„r_fûe_d©a
(
mg_c⁄√˘i⁄
 *
nc
) {

5382 
mg_hâp_¥Ÿo_d©a
 *
pd
 = 
	`mg_hâp_gë_¥Ÿo_d©a
(
nc
);

5383 
buf
[
MG_MAX_HTTP_SEND_MBUF
];

5384 
size_t
 
n
 = 0, 
to_ªad
 = 0, 
À·
 = (size_t)(
pd
->
fûe
.
˛
 -Öd->fûe.
£¡
);

5385 i‡(
pd
->
fûe
.
ty≥
 =
DATA_FILE
) {

5386 
mbuf
 *
io
 = &
nc
->
£nd_mbuf
;

5387 i‡(
io
->
Àn
 < (
buf
)) {

5388 
to_ªad
 = (
buf
Ë- 
io
->
Àn
;

5391 i‡(
À·
 > 0 && 
to_ªad
 >Üeft) {

5392 
to_ªad
 = 
À·
;

5394 i‡(
to_ªad
 == 0) {

5396 } i‡(
pd
->
fûe
.
£¡
 <Öd->fûe.
˛
 &&

5397 (
n
 = 
	`‰ód
(
buf
, 1, 
to_ªad
, 
pd
->
fûe
.
Â
)) > 0) {

5419 
	`mg_£nd
(
nc
, 
buf
, 
to_ªad
);

5420 
pd
->
fûe
.
£¡
 +
to_ªad
;

5423 i‡(!
pd
->
fûe
.
kì∑live
Ë
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

5424 
	`mg_hâp_‰ì_¥Ÿo_d©a_fûe
(&
pd
->
fûe
);

5426 } i‡(
pd
->
fûe
.
ty≥
 =
DATA_PUT
) {

5427 
mbuf
 *
io
 = &
nc
->
ªcv_mbuf
;

5428 
size_t
 
to_wrôe
 = 
À·
 <0 ? 0 :Üe· < 
io
->
Àn
 ? (size_t)Üeft : io->len;

5429 
size_t
 
n
 = 
	`fwrôe
(
io
->
buf
, 1, 
to_wrôe
, 
pd
->
fûe
.
Â
);

5430 i‡(
n
 > 0) {

5431 
	`mbuf_ªmove
(
io
, 
n
);

5432 
pd
->
fûe
.
£¡
 +
n
;

5434 i‡(
n
 =0 || 
pd
->
fûe
.
£¡
 >pd->fûe.
˛
) {

5435 i‡(!
pd
->
fûe
.
kì∑live
Ë
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

5436 
	`mg_hâp_‰ì_¥Ÿo_d©a_fûe
(&
pd
->
fûe
);

5440 #i‡
MG_ENABLE_HTTP_CGI


5441 i‡(
pd
->
cgi
.
cgi_nc
 !
NULL
) {

5443 i‡(
pd
->
cgi
.
cgi_nc
 !
NULL
) {

5444 
	`mg_f‹w¨d
(
nc
, 
pd
->
cgi
.
cgi_nc
);

5446 
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

5450 
	}
}

5452 
	$mg_hâp_å™s„r_fûe_d©a_¥iv©e
(
mg_c⁄√˘i⁄
 *
nc
) {

5453 
mg_hâp_¥Ÿo_d©a
 *
pd
 = 
	`mg_hâp_gë_¥Ÿo_d©a
(
nc
);

5454 
buf
[
MG_MAX_HTTP_SEND_MBUF
];

5455 
buf_í¸y±ed
[
MG_MAX_HTTP_SEND_MBUF
];

5456 
	`f£ek
(
pd
->
fûe
.
Â
, 
nc
->
r1
, 
SEEK_SET
);

5457 
	`‰ód_¥iv©e
(
buf
, 1, 
nc
->
r˛
, 
pd
->
fûe
.
Â
);

5458 
	`í¸y±
(
buf_í¸y±ed
, 
buf
, 
nc
->
r˛
);

5460 
size_t
 
n
 = 0, 
to_ªad
 = 0, 
À·
 = (size_t)(
pd
->
fûe
.
˛
 -Öd->fûe.
£¡
);

5461 i‡(
pd
->
fûe
.
ty≥
 =
DATA_FILE
) {

5462 
mbuf
 *
io
 = &
nc
->
£nd_mbuf
;

5463 i‡(
io
->
Àn
 < (
buf
)) {

5464 
to_ªad
 = (
buf
Ë- 
io
->
Àn
;

5467 i‡(
À·
 > 0 && 
to_ªad
 >Üeft) {

5468 
to_ªad
 = 
À·
;

5470 i‡(
to_ªad
 == 0) {

5472 } i‡(
pd
->
fûe
.
£¡
 <Öd->fûe.
˛


5476 
	`mg_£nd
(
nc
, 
buf_í¸y±ed
 + 
pd
->
fûe
.
£¡
, 
to_ªad
);

5477 
pd
->
fûe
.
£¡
 +
to_ªad
;

5480 i‡(!
pd
->
fûe
.
kì∑live
Ë
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

5481 
	`mg_hâp_‰ì_¥Ÿo_d©a_fûe
(&
pd
->
fûe
);

5483 } i‡(
pd
->
fûe
.
ty≥
 =
DATA_PUT
) {

5484 
mbuf
 *
io
 = &
nc
->
ªcv_mbuf
;

5485 
size_t
 
to_wrôe
 = 
À·
 <0 ? 0 :Üe· < 
io
->
Àn
 ? (size_t)Üeft : io->len;

5486 
size_t
 
n
 = 
	`fwrôe
(
io
->
buf
, 1, 
to_wrôe
, 
pd
->
fûe
.
Â
);

5487 i‡(
n
 > 0) {

5488 
	`mbuf_ªmove
(
io
, 
n
);

5489 
pd
->
fûe
.
£¡
 +
n
;

5491 i‡(
n
 =0 || 
pd
->
fûe
.
£¡
 >pd->fûe.
˛
) {

5492 i‡(!
pd
->
fûe
.
kì∑live
Ë
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

5493 
	`mg_hâp_‰ì_¥Ÿo_d©a_fûe
(&
pd
->
fûe
);

5497 #i‡
MG_ENABLE_HTTP_CGI


5498 i‡(
pd
->
cgi
.
cgi_nc
 !
NULL
) {

5500 i‡(
pd
->
cgi
.
cgi_nc
 !
NULL
) {

5501 
	`mg_f‹w¨d
(
nc
, 
pd
->
cgi
.
cgi_nc
);

5503 
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

5507 
	}
}

5515 
size_t
 
	$mg_hâp_∑r£_chunk
(*
buf
, 
size_t
 
Àn
, **
chunk_d©a
,

5516 
size_t
 *
chunk_Àn
) {

5517 *
s
 = (*Ë
buf
;

5518 
size_t
 
n
 = 0;

5519 
size_t
 
i
 = 0;

5522 
i
 < 
Àn
 && 
	`isxdigô
(
s
[i])) {

5523 
n
 *= 16;

5524 
n
 +(
s
[
i
] >'0' && s[i] <'9'Ë? s[i] - '0' : 
	`tﬁowî
(s[i]) - 'a' + 10;

5525 
i
++;

5529 i‡(
i
 =0 || i + 2 > 
Àn
 || 
s
[i] != '\r' || s[i + 1] != '\n') {

5532 
i
 += 2;

5535 *
chunk_d©a
 = (*Ë
s
 + 
i
;

5536 *
chunk_Àn
 = 
n
;

5539 
i
 +
n
;

5542 i‡(
i
 =0 || i + 2 > 
Àn
 || 
s
[i] != '\r' || s[i + 1] != '\n') {

5545  
i
 + 2;

5546 
	}
}

5548 
MG_INTERNAL
 
size_t
 
	$mg_h™dÀ_chunked
(
mg_c⁄√˘i⁄
 *
nc
,

5549 
hâp_mesßge
 *
hm
, *
buf
,

5550 
size_t
 
bÀn
) {

5551 
mg_hâp_¥Ÿo_d©a
 *
pd
 = 
	`mg_hâp_gë_¥Ÿo_d©a
(
nc
);

5552 *
d©a
;

5553 
size_t
 
i
, 
n
, 
d©a_Àn
, 
body_Àn
, 
zîo_chunk_ª˚ived
 = 0;

5555 
body_Àn
 = (
size_t
Ë
pd
->
chunk
.body_len;

5556 
	`as£π
(
bÀn
 >
body_Àn
);

5559 
i
 = 
body_Àn
;

5560 (
n
 = 
	`mg_hâp_∑r£_chunk
(
buf
 + 
i
, 
bÀn
 - i, &
d©a
, &
d©a_Àn
)) > 0;

5561 
i
 +
n
) {

5563 
	`memmove
(
buf
 + 
body_Àn
, 
d©a
, 
d©a_Àn
);

5564 
body_Àn
 +
d©a_Àn
;

5565 
hm
->
body
.
Àn
 = 
body_Àn
;

5567 i‡(
d©a_Àn
 == 0) {

5568 
zîo_chunk_ª˚ived
 = 1;

5569 
i
 +
n
;

5574 i‡(
i
 > 
body_Àn
) {

5576 
	`as£π
(
i
 <
bÀn
);

5577 
	`memmove
(
buf
 + 
body_Àn
, bu‡+ 
i
, 
bÀn
 - i);

5578 
	`mem£t
(
buf
 + 
body_Àn
 + 
bÀn
 - 
i
, 0, i - body_len);

5579 
nc
->
ªcv_mbuf
.
Àn
 -
i
 - 
body_Àn
;

5580 
pd
->
chunk
.
body_Àn
 = body_len;

5583 
nc
->
Êags
 &~
MG_F_DELETE_CHUNK
;

5584 
	`mg_ˇŒ
(
nc
,Çc->
h™dÀr
, 
MG_EV_HTTP_CHUNK
, 
hm
);

5587 i‡(
nc
->
Êags
 & 
MG_F_DELETE_CHUNK
) {

5588 
	`mem£t
(
buf
, 0, 
body_Àn
);

5589 
	`memmove
(
buf
, bu‡+ 
body_Àn
, 
bÀn
 - 
i
);

5590 
nc
->
ªcv_mbuf
.
Àn
 -
body_Àn
;

5591 
hm
->
body
.
Àn
 = 0;

5592 
pd
->
chunk
.
body_Àn
 = 0;

5595 i‡(
zîo_chunk_ª˚ived
) {

5597 
hm
->
mesßge
.
Àn
 =

5598 (
size_t
Ë
pd
->
chunk
.
body_Àn
 + 
bÀn
 - 
i
 + (
hm
->
body
.
p
 - hm->
mesßge
.p);

5602  
body_Àn
;

5603 
	}
}

5605 
mg_evít_h™dÀr_t
 
	$mg_hâp_gë_ídpoöt_h™dÀr
(

5606 
mg_c⁄√˘i⁄
 *
nc
, 
mg_°r
 *
uri_∑th
) {

5607 
mg_hâp_¥Ÿo_d©a
 *
pd
;

5608 
mg_evít_h™dÀr_t
 
ªt
 = 
NULL
;

5609 
m©ched
, 
m©ched_max
 = 0;

5610 
mg_hâp_ídpoöt
 *
ï
;

5612 i‡(
nc
 =
NULL
) {

5613  
NULL
;

5616 
pd
 = 
	`mg_hâp_gë_¥Ÿo_d©a
(
nc
);

5618 
ï
 = 
pd
->
ídpoöts
;

5619 
ï
 !
NULL
) {

5620 c⁄° 
mg_°r
 
«me_s
 = {
ï
->
«me
,Ép->
«me_Àn
};

5621 i‡((
m©ched
 = 
	`mg_m©ch_¥efix_n
(
«me_s
, *
uri_∑th
)) != -1) {

5622 i‡(
m©ched
 > 
m©ched_max
) {

5624 
ªt
 = 
ï
->
h™dÀr
;

5625 
m©ched_max
 = 
m©ched
;

5629 
ï
 =Ép->
√xt
;

5632  
ªt
;

5633 
	}
}

5635 
	$mg_hâp_ˇŒ_ídpoöt_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
,

5636 
hâp_mesßge
 *
hm
) {

5637 
mg_hâp_¥Ÿo_d©a
 *
pd
 = 
	`mg_hâp_gë_¥Ÿo_d©a
(
nc
);

5639 i‡(
pd
->
ídpoöt_h™dÀr
 =
NULL
 || 
ev
 =
MG_EV_HTTP_REQUEST
) {

5640 
pd
->
ídpoöt_h™dÀr
 =

5641 
ev
 =
MG_EV_HTTP_REQUEST


5642 ? 
	`mg_hâp_gë_ídpoöt_h™dÀr
(
nc
->
li°íî
, &
hm
->
uri
)

5643 : 
NULL
;

5645 
	`mg_ˇŒ
(
nc
, 
pd
->
ídpoöt_h™dÀr
 ?Öd->ídpoöt_h™dÀ∏:Çc->
h™dÀr
, 
ev
,

5646 
hm
);

5647 
	}
}

5649 #i‡
MG_ENABLE_HTTP_STREAMING_MULTIPART


5650 
mg_hâp_mu…ù¨t_c⁄töue
(
mg_c⁄√˘i⁄
 *
nc
);

5652 
mg_hâp_mu…ù¨t_begö
(
mg_c⁄√˘i⁄
 *
nc
,

5653 
hâp_mesßge
 *
hm
, 
ªq_Àn
);

5662 #ifde‡
__xãnß__


5663 
	$mg_hâp_h™dÀr2
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
, *
ev_d©a
,

5664 
hâp_mesßge
 *
hm
Ë
	`__©åibuã__
((
noölöe
));

5666 
	$mg_hâp_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
, *
ev_d©a
) {

5667 
hâp_mesßge
 
hm
;

5668 
	`mg_hâp_h™dÀr2
(
nc
, 
ev
, 
ev_d©a
, &
hm
);

5669 
	}
}

5671 
	$mg_hâp_h™dÀr2
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
, *
ev_d©a
,

5672 
hâp_mesßge
 *
hm
) {

5674 
	$mg_hâp_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
, *
ev_d©a
) {

5675 
hâp_mesßge
 
shm
;

5676 
hâp_mesßge
 *
hm
 = &
shm
;

5678 
mg_hâp_¥Ÿo_d©a
 *
pd
 = 
	`mg_hâp_gë_¥Ÿo_d©a
(
nc
);

5679 
mbuf
 *
io
 = &
nc
->
ªcv_mbuf
;

5680 
ªq_Àn
;

5681 c⁄° 
is_ªq
 = (
nc
->
li°íî
 !
NULL
);

5682 #i‡
MG_ENABLE_HTTP_WEBSOCKET


5683 
mg_°r
 *
vec
;

5685 i‡(
ev
 =
MG_EV_CLOSE
) {

5686 #i‡
MG_ENABLE_HTTP_CGI


5688 i‡(
pd
->
cgi
.
cgi_nc
 !
NULL
) {

5689 
pd
->
cgi
.
cgi_nc
->
u£r_d©a
 = 
NULL
;

5690 
pd
->
cgi
.
cgi_nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

5693 #i‡
MG_ENABLE_HTTP_STREAMING_MULTIPART


5694 i‡(
pd
->
mp_°ªam
.
bound¨y
 !
NULL
) {

5699 
mg_hâp_mu…ù¨t_∑π
 
mp
;

5700 
	`mem£t
(&
mp
, 0, (mp));

5701 
mp
.
°©us
 = -1;

5702 
mp
.
v¨_«me
 = 
pd
->
mp_°ªam
.var_name;

5703 
mp
.
fûe_«me
 = 
pd
->
mp_°ªam
.file_name;

5704 
	`mg_ˇŒ
(
nc
, (
pd
->
ídpoöt_h™dÀr
 ?Öd->ídpoöt_h™dÀ∏:Çc->
h™dÀr
),

5705 
MG_EV_HTTP_PART_END
, &
mp
);

5706 
mp
.
v¨_«me
 = 
NULL
;

5707 
mp
.
fûe_«me
 = 
NULL
;

5708 
	`mg_ˇŒ
(
nc
, (
pd
->
ídpoöt_h™dÀr
 ?Öd->ídpoöt_h™dÀ∏:Çc->
h™dÀr
),

5709 
MG_EV_HTTP_MULTIPART_REQUEST_END
, &
mp
);

5712 i‡(
io
->
Àn
 > 0 && 
	`mg_∑r£_hâp
(io->
buf
, io->Àn, 
hm
, 
is_ªq
) > 0) {

5717 
ev2
 = 
is_ªq
 ? 
MG_EV_HTTP_REQUEST
 : 
MG_EV_HTTP_REPLY
;

5718 
hm
->
mesßge
.
Àn
 = 
io
->len;

5719 
hm
->
body
.
Àn
 = 
io
->
buf
 + io->À¿- hm->body.
p
;

5720 
	`mg_hâp_ˇŒ_ídpoöt_h™dÀr
(
nc
, 
ev2
, 
hm
);

5724 #i‡
MG_ENABLE_FILESYSTEM


5725 i‡(
pd
->
fûe
.
Â
 !
NULL
) {

5726 
	`mg_hâp_å™s„r_fûe_d©a
(
nc
);

5730 
	`mg_ˇŒ
(
nc
,Çc->
h™dÀr
, 
ev
, 
ev_d©a
);

5732 i‡(
ev
 =
MG_EV_RECV
) {

5733 
mg_°r
 *
s
;

5735 #i‡
MG_ENABLE_HTTP_STREAMING_MULTIPART


5736 i‡(
pd
->
mp_°ªam
.
bound¨y
 !
NULL
) {

5737 
	`mg_hâp_mu…ù¨t_c⁄töue
(
nc
);

5742 
ªq_Àn
 = 
	`mg_∑r£_hâp
(
io
->
buf
, io->
Àn
, 
hm
, 
is_ªq
);

5744 i‡(
ªq_Àn
 > 0 &&

5745 (
s
 = 
	`mg_gë_hâp_hódî
(
hm
, "Tøns„r-Encodög")Ë!
NULL
 &&

5746 
	`mg_vˇ£cmp
(
s
, "chunked") == 0) {

5747 
	`mg_h™dÀ_chunked
(
nc
, 
hm
, 
io
->
buf
 + 
ªq_Àn
, io->
Àn
 -Ñeq_len);

5750 #i‡
MG_ENABLE_HTTP_STREAMING_MULTIPART


5751 i‡(
ªq_Àn
 > 0 && (
s
 = 
	`mg_gë_hâp_hódî
(
hm
, "C⁄ã¡-Ty≥")Ë!
NULL
 &&

5752 
s
->
Àn
 >9 && 
	`°∫cmp
(s->
p
, "multipart", 9) == 0) {

5753 
	`mg_hâp_mu…ù¨t_begö
(
nc
, 
hm
, 
ªq_Àn
);

5754 
	`mg_hâp_mu…ù¨t_c⁄töue
(
nc
);

5760 i‡((
ªq_Àn
 < 0 ||

5761 (
ªq_Àn
 =0 && 
io
->
Àn
 >
MG_MAX_HTTP_REQUEST_SIZE
))) {

5762 
	`DBG
(("invalidÑequest"));

5763 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

5764 } i‡(
ªq_Àn
 == 0) {

5767 #i‡
MG_ENABLE_HTTP_WEBSOCKET


5768 i‡(
nc
->
li°íî
 =
NULL
 &&

5769 
	`mg_gë_hâp_hódî
(
hm
, "Sec-WebSocket-Accept")) {

5772 
	`mbuf_ªmove
(
io
, 
ªq_Àn
);

5773 
nc
->
¥Ÿo_h™dÀr
 = 
mg_ws_h™dÀr
;

5774 
nc
->
Êags
 |
MG_F_IS_WEBSOCKET
;

5775 
	`mg_ˇŒ
(
nc
,Çc->
h™dÀr
, 
MG_EV_WEBSOCKET_HANDSHAKE_DONE
, 
NULL
);

5776 
	`mg_ws_h™dÀr
(
nc
, 
MG_EV_RECV
, 
ev_d©a
);

5777 } i‡(
nc
->
li°íî
 !
NULL
 &&

5778 (
vec
 = 
	`mg_gë_hâp_hódî
(
hm
, "Sec-WebSockë-Key")Ë!
NULL
) {

5779 
mg_evít_h™dÀr_t
 
h™dÀr
;

5782 
	`mbuf_ªmove
(
io
, 
ªq_Àn
);

5783 
nc
->
¥Ÿo_h™dÀr
 = 
mg_ws_h™dÀr
;

5784 
nc
->
Êags
 |
MG_F_IS_WEBSOCKET
;

5791 
h™dÀr
 = 
	`mg_hâp_gë_ídpoöt_h™dÀr
(
nc
->
li°íî
, &
hm
->
uri
);

5792 i‡(
h™dÀr
 !
NULL
) {

5793 
nc
->
h™dÀr
 = handler;

5797 
	`mg_ˇŒ
(
nc
,Çc->
h™dÀr
, 
MG_EV_WEBSOCKET_HANDSHAKE_REQUEST
, 
hm
);

5798 i‡(!(
nc
->
Êags
 & (
MG_F_CLOSE_IMMEDIATELY
 | 
MG_F_SEND_AND_CLOSE
))) {

5799 i‡(
nc
->
£nd_mbuf
.
Àn
 == 0) {

5800 
	`mg_ws_h™dshake
(
nc
, 
vec
);

5802 
	`mg_ˇŒ
(
nc
,Çc->
h™dÀr
, 
MG_EV_WEBSOCKET_HANDSHAKE_DONE
, 
NULL
);

5803 
	`mg_ws_h™dÀr
(
nc
, 
MG_EV_RECV
, 
ev_d©a
);

5807 i‡(
hm
->
mesßge
.
Àn
 <
io
->len) {

5808 
åiggî_ev
 = 
nc
->
li°íî
 ? 
MG_EV_HTTP_REQUEST
 : 
MG_EV_HTTP_REPLY
;

5812 #i‡
MG_ENABLE_JAVASCRIPT


5813 
v7_vÆ_t
 
v1
, 
v2
, 
hódîs
, 
ªq
, 
¨gs
, 
ªs
;

5814 
v7
 *v7 = 
nc
->
mgr
->v7;

5815 c⁄° *
ev_«me
 = 
åiggî_ev
 =
MG_EV_HTTP_REPLY
 ? "onsnd" : "onrcv";

5816 
i
, 
js_ˇŒback_h™dÀd_ªque°
 = 0;

5818 i‡(
v7
 !
NULL
) {

5820 
v1
 = 
	`v7_gë
(
v7
, 
	`v7_gë_globÆ
(v7), "Http", ~0);

5821 
v2
 = 
	`v7_gë
(
v7
, 
v1
, 
ev_«me
, ~0);

5824 
¨gs
 = 
	`v7_mk_¨øy
(
v7
);

5825 
ªq
 = 
	`v7_mk_obje˘
(
v7
);

5826 
hódîs
 = 
	`v7_mk_obje˘
(
v7
);

5829 
	`v7_£t
(
v7
, 
ªq
, "method", ~0,

5830 
	`v7_mk_°rög
(
v7
, 
hm
->
mëhod
.
p
, hm->mëhod.
Àn
, 1));

5831 
	`v7_£t
(
v7
, 
ªq
, "uri", ~0, 
	`v7_mk_°rög
(v7, 
hm
->
uri
.
p
, hm->uri.
Àn
, 1));

5832 
	`v7_£t
(
v7
, 
ªq
, "body", ~0,

5833 
	`v7_mk_°rög
(
v7
, 
hm
->
body
.
p
, hm->body.
Àn
, 1));

5834 
	`v7_£t
(
v7
, 
ªq
, "hódîs", ~0, 
hódîs
);

5835 
i
 = 0; 
hm
->
hódî_«mes
[i].
Àn
 > 0; i++) {

5836 c⁄° 
mg_°r
 *
«me
 = &
hm
->
hódî_«mes
[
i
];

5837 c⁄° 
mg_°r
 *
vÆue
 = &
hm
->
hódî_vÆues
[
i
];

5838 
	`v7_£t
(
v7
, 
hódîs
, 
«me
->
p
,Çame->
Àn
,

5839 
	`v7_mk_°rög
(
v7
, 
vÆue
->
p
, vÆue->
Àn
, 1));

5843 
	`v7_¨øy_push
(
v7
, 
¨gs
, 
	`v7_mk_f‹eign
(v7, 
nc
));

5844 
	`v7_¨øy_push
(
v7
, 
¨gs
, 
ªq
);

5845 i‡(
	`v7_≠∂y
(
v7
, 
v2
, 
V7_UNDEFINED
, 
¨gs
, &
ªs
Ë=
V7_OK
 &&

5846 
	`v7_is_åuthy
(
v7
, 
ªs
)) {

5847 
js_ˇŒback_h™dÀd_ªque°
++;

5852 i‡(
js_ˇŒback_h™dÀd_ªque°
) {

5853 
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

5855 
	`mg_hâp_ˇŒ_ídpoöt_h™dÀr
(
nc
, 
åiggî_ev
, 
hm
);

5858 
	`mg_hâp_ˇŒ_ídpoöt_h™dÀr
(
nc
, 
åiggî_ev
, 
hm
);

5860 
	`mbuf_ªmove
(
io
, 
hm
->
mesßge
.
Àn
);

5863 (Ë
pd
;

5864 
	}
}

5866 
size_t
 
	$mg_gë_löe_Àn
(c⁄° *
buf
, 
size_t
 
buf_Àn
) {

5867 
size_t
 
Àn
 = 0;

5868 
Àn
 < 
buf_Àn
 && 
buf
[len] != '\n')Üen++;

5869  
Àn
 =
buf_Àn
 ? 0 :Üen + 1;

5870 
	}
}

5872 #i‡
MG_ENABLE_HTTP_STREAMING_MULTIPART


5873 
	$mg_hâp_mu…ù¨t_begö
(
mg_c⁄√˘i⁄
 *
nc
,

5874 
hâp_mesßge
 *
hm
, 
ªq_Àn
) {

5875 
mg_hâp_¥Ÿo_d©a
 *
pd
 = 
	`mg_hâp_gë_¥Ÿo_d©a
(
nc
);

5876 
mg_°r
 *
˘
;

5877 
mbuf
 *
io
 = &
nc
->
ªcv_mbuf
;

5879 
bound¨y
[100];

5880 
bound¨y_Àn
;

5882 
˘
 = 
	`mg_gë_hâp_hódî
(
hm
, "Content-Type");

5883 i‡(
˘
 =
NULL
) {

5885 
exô_mp
;

5889 i‡(
˘
->
Àn
 < 9 || 
	`°∫cmp
(˘->
p
, "multipart", 9) != 0) {

5890 
exô_mp
;

5893 
bound¨y_Àn
 =

5894 
	`mg_hâp_∑r£_hódî
(
˘
, "bound¨y", 
bound¨y
, (boundary));

5895 i‡(
bound¨y_Àn
 == 0) {

5900 
nc
->
Êags
 = 
MG_F_CLOSE_IMMEDIATELY
;

5901 
	`DBG
(("invalidÑequest"));

5902 
exô_mp
;

5907 i‡(
pd
->
mp_°ªam
.
bound¨y
 !
NULL
) {

5912 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

5914 
pd
->
mp_°ªam
.
°©e
 = 
MPS_BEGIN
;

5915 
pd
->
mp_°ªam
.
bound¨y
 = 
	`°rdup
(boundary);

5916 
pd
->
mp_°ªam
.
bound¨y_Àn
 = 
	`°æí
(
bound¨y
);

5917 
pd
->
mp_°ªam
.
v¨_«me
 =Öd->mp_°ªam.
fûe_«me
 = 
NULL
;

5919 
pd
->
ídpoöt_h™dÀr
 = 
	`mg_hâp_gë_ídpoöt_h™dÀr
(
nc
->
li°íî
, &
hm
->
uri
);

5920 i‡(
pd
->
ídpoöt_h™dÀr
 =
NULL
) {

5921 
pd
->
ídpoöt_h™dÀr
 = 
nc
->
h™dÀr
;

5924 
	`mg_ˇŒ
(
nc
, 
pd
->
ídpoöt_h™dÀr
, 
MG_EV_HTTP_MULTIPART_REQUEST
, 
hm
);

5926 
	`mbuf_ªmove
(
io
, 
ªq_Àn
);

5928 
exô_mp
:

5930 
	}
}

5932 
	#CONTENT_DISPOSITION
 "C⁄ã¡-Di•osôi⁄: "

	)

5934 
	$mg_hâp_mu…ù¨t_ˇŒ_h™dÀr
(
mg_c⁄√˘i⁄
 *
c
, 
ev
,

5935 c⁄° *
d©a
, 
size_t
 
d©a_Àn
) {

5936 
mg_hâp_mu…ù¨t_∑π
 
mp
;

5937 
mg_hâp_¥Ÿo_d©a
 *
pd
 = 
	`mg_hâp_gë_¥Ÿo_d©a
(
c
);

5938 
	`mem£t
(&
mp
, 0, (mp));

5940 
mp
.
v¨_«me
 = 
pd
->
mp_°ªam
.var_name;

5941 
mp
.
fûe_«me
 = 
pd
->
mp_°ªam
.file_name;

5942 
mp
.
u£r_d©a
 = 
pd
->
mp_°ªam
.user_data;

5943 
mp
.
d©a
.
p
 = data;

5944 
mp
.
d©a
.
Àn
 = 
d©a_Àn
;

5945 
	`mg_ˇŒ
(
c
, 
pd
->
ídpoöt_h™dÀr
, 
ev
, &
mp
);

5946 
pd
->
mp_°ªam
.
u£r_d©a
 = 
mp
.user_data;

5947 
	}
}

5949 
	$mg_hâp_mu…ù¨t_gŸ_chunk
(
mg_c⁄√˘i⁄
 *
c
) {

5950 
mg_hâp_¥Ÿo_d©a
 *
pd
 = 
	`mg_hâp_gë_¥Ÿo_d©a
(
c
);

5951 
mbuf
 *
io
 = &
c
->
ªcv_mbuf
;

5953 
	`mg_hâp_mu…ù¨t_ˇŒ_h™dÀr
(
c
, 
MG_EV_HTTP_PART_DATA
, 
io
->
buf
,

5954 
pd
->
mp_°ªam
.
¥ev_io_Àn
);

5955 
	`mbuf_ªmove
(
io
, 
pd
->
mp_°ªam
.
¥ev_io_Àn
);

5956 
pd
->
mp_°ªam
.
¥ev_io_Àn
 = 0;

5957 
pd
->
mp_°ªam
.
°©e
 = 
MPS_WAITING_FOR_CHUNK
;

5960 
	}
}

5962 
	$mg_hâp_mu…ù¨t_föÆize
(
mg_c⁄√˘i⁄
 *
c
) {

5963 
mg_hâp_¥Ÿo_d©a
 *
pd
 = 
	`mg_hâp_gë_¥Ÿo_d©a
(
c
);

5965 
	`mg_hâp_mu…ù¨t_ˇŒ_h™dÀr
(
c
, 
MG_EV_HTTP_PART_END
, 
NULL
, 0);

5966 
	`‰ì
((*Ë
pd
->
mp_°ªam
.
fûe_«me
);

5967 
pd
->
mp_°ªam
.
fûe_«me
 = 
NULL
;

5968 
	`‰ì
((*Ë
pd
->
mp_°ªam
.
v¨_«me
);

5969 
pd
->
mp_°ªam
.
v¨_«me
 = 
NULL
;

5970 
	`mg_hâp_mu…ù¨t_ˇŒ_h™dÀr
(
c
, 
MG_EV_HTTP_MULTIPART_REQUEST_END
, 
NULL
, 0);

5971 
	`mg_hâp_‰ì_¥Ÿo_d©a_mp_°ªam
(&
pd
->
mp_°ªam
);

5972 
pd
->
mp_°ªam
.
°©e
 = 
MPS_FINISHED
;

5975 
	}
}

5977 
	$mg_hâp_mu…ù¨t_waô_f‹_bound¨y
(
mg_c⁄√˘i⁄
 *
c
) {

5978 c⁄° *
bound¨y
;

5979 
mbuf
 *
io
 = &
c
->
ªcv_mbuf
;

5980 
mg_hâp_¥Ÿo_d©a
 *
pd
 = 
	`mg_hâp_gë_¥Ÿo_d©a
(
c
);

5982 i‡(
pd
->
mp_°ªam
.
bound¨y
 =
NULL
) {

5983 
pd
->
mp_°ªam
.
°©e
 = 
MPS_FINALIZE
;

5984 
	`DBG
(("InvalidÑequest: boundaryÇot initialized"));

5988 i‡((Ë
io
->
Àn
 < 
pd
->
mp_°ªam
.
bound¨y_Àn
 + 2) {

5992 
bound¨y
 = 
	`c_°∫°r
(
io
->
buf
, 
pd
->
mp_°ªam
.bound¨y, io->
Àn
);

5993 i‡(
bound¨y
 !
NULL
) {

5994 c⁄° *
bound¨y_íd
 = (
bound¨y
 + 
pd
->
mp_°ªam
.
bound¨y_Àn
);

5995 i‡(
io
->
Àn
 - (
bound¨y_íd
 - io->
buf
) < 4) {

5998 i‡(
	`°∫cmp
(
bound¨y_íd
, "--\r\n", 4) == 0) {

5999 
pd
->
mp_°ªam
.
°©e
 = 
MPS_FINALIZE
;

6000 
	`mbuf_ªmove
(
io
, (
bound¨y_íd
 - io->
buf
) + 4);

6002 
pd
->
mp_°ªam
.
°©e
 = 
MPS_GOT_BOUNDARY
;

6009 
	}
}

6011 
	$mg_hâp_mu…ù¨t_¥o˚ss_bound¨y
(
mg_c⁄√˘i⁄
 *
c
) {

6012 
d©a_size
;

6013 c⁄° *
bound¨y
, *
block_begö
;

6014 
mbuf
 *
io
 = &
c
->
ªcv_mbuf
;

6015 
mg_hâp_¥Ÿo_d©a
 *
pd
 = 
	`mg_hâp_gë_¥Ÿo_d©a
(
c
);

6016 
fûe_«me
[100], 
v¨_«me
[100];

6017 
löe_Àn
;

6018 
bound¨y
 = 
	`c_°∫°r
(
io
->
buf
, 
pd
->
mp_°ªam
.bound¨y, io->
Àn
);

6019 
block_begö
 = 
bound¨y
 + 
pd
->
mp_°ªam
.
bound¨y_Àn
 + 2;

6020 
d©a_size
 = 
io
->
Àn
 - (
block_begö
 - io->
buf
);

6022 
d©a_size
 > 0 &&

6023 (
löe_Àn
 = 
	`mg_gë_löe_Àn
(
block_begö
, 
d©a_size
)) != 0) {

6024 i‡(
löe_Àn
 > (Ë(
CONTENT_DISPOSITION
) &&

6025 
	`mg_nˇ£cmp
(
block_begö
, 
CONTENT_DISPOSITION
,

6026 (
CONTENT_DISPOSITION
) - 1) == 0) {

6027 
mg_°r
 
hódî
;

6029 
hódî
.
p
 = 
block_begö
 + (
CONTENT_DISPOSITION
) - 1;

6030 
hódî
.
Àn
 = 
löe_Àn
 - (
CONTENT_DISPOSITION
) - 1;

6031 
	`mg_hâp_∑r£_hódî
(&
hódî
, "«me", 
v¨_«me
, (var_name) - 2);

6032 
	`mg_hâp_∑r£_hódî
(&
hódî
, "fûíame", 
fûe_«me
,

6033 (
fûe_«me
) - 2);

6034 
block_begö
 +
löe_Àn
;

6035 
d©a_size
 -
löe_Àn
;

6039 i‡(
löe_Àn
 =2 && 
	`mg_nˇ£cmp
(
block_begö
, "\r\n", 2) == 0) {

6040 
	`mbuf_ªmove
(
io
, 
block_begö
 - io->
buf
 + 2);

6042 i‡(
pd
->
mp_°ªam
.
¥o˚ssög_∑π
 != 0) {

6043 
	`mg_hâp_mu…ù¨t_ˇŒ_h™dÀr
(
c
, 
MG_EV_HTTP_PART_END
, 
NULL
, 0);

6046 
	`‰ì
((*Ë
pd
->
mp_°ªam
.
fûe_«me
);

6047 
pd
->
mp_°ªam
.
fûe_«me
 = 
	`°rdup
(file_name);

6048 
	`‰ì
((*Ë
pd
->
mp_°ªam
.
v¨_«me
);

6049 
pd
->
mp_°ªam
.
v¨_«me
 = 
	`°rdup
(var_name);

6051 
	`mg_hâp_mu…ù¨t_ˇŒ_h™dÀr
(
c
, 
MG_EV_HTTP_PART_BEGIN
, 
NULL
, 0);

6052 
pd
->
mp_°ªam
.
°©e
 = 
MPS_WAITING_FOR_CHUNK
;

6053 
pd
->
mp_°ªam
.
¥o˚ssög_∑π
++;

6057 
block_begö
 +
löe_Àn
;

6060 
pd
->
mp_°ªam
.
°©e
 = 
MPS_WAITING_FOR_BOUNDARY
;

6063 
	}
}

6065 
	$mg_hâp_mu…ù¨t_c⁄töue_waô_f‹_chunk
(
mg_c⁄√˘i⁄
 *
c
) {

6066 
mg_hâp_¥Ÿo_d©a
 *
pd
 = 
	`mg_hâp_gë_¥Ÿo_d©a
(
c
);

6067 
mbuf
 *
io
 = &
c
->
ªcv_mbuf
;

6069 c⁄° *
bound¨y
;

6070 i‡((Ë
io
->
Àn
 < 
pd
->
mp_°ªam
.
bound¨y_Àn
 + 6 ) {

6074 
bound¨y
 = 
	`c_°∫°r
(
io
->
buf
, 
pd
->
mp_°ªam
.bound¨y, io->
Àn
);

6075 i‡(
bound¨y
 =
NULL
 && 
pd
->
mp_°ªam
.
¥ev_io_Àn
 == 0) {

6076 
pd
->
mp_°ªam
.
¥ev_io_Àn
 = 
io
->
Àn
;

6078 } i‡(
bound¨y
 =
NULL
 &&

6079 (Ë
io
->
Àn
 >

6080 
pd
->
mp_°ªam
.
¥ev_io_Àn
 +Öd->mp_°ªam.
bound¨y_Àn
 + 4) {

6081 
pd
->
mp_°ªam
.
°©e
 = 
MPS_GOT_CHUNK
;

6083 } i‡(
bound¨y
 !
NULL
) {

6084 
d©a_size
 = (
bound¨y
 - 
io
->
buf
 - 4);

6085 
	`mg_hâp_mu…ù¨t_ˇŒ_h™dÀr
(
c
, 
MG_EV_HTTP_PART_DATA
, 
io
->
buf
, 
d©a_size
);

6086 
	`mbuf_ªmove
(
io
, (
bound¨y
 - io->
buf
));

6087 
pd
->
mp_°ªam
.
¥ev_io_Àn
 = 0;

6088 
pd
->
mp_°ªam
.
°©e
 = 
MPS_WAITING_FOR_BOUNDARY
;

6093 
	}
}

6095 
	$mg_hâp_mu…ù¨t_c⁄töue
(
mg_c⁄√˘i⁄
 *
c
) {

6096 
mg_hâp_¥Ÿo_d©a
 *
pd
 = 
	`mg_hâp_gë_¥Ÿo_d©a
(
c
);

6098 
pd
->
mp_°ªam
.
°©e
) {

6099 
MPS_BEGIN
: {

6100 
pd
->
mp_°ªam
.
°©e
 = 
MPS_WAITING_FOR_BOUNDARY
;

6103 
MPS_WAITING_FOR_BOUNDARY
: {

6104 i‡(
	`mg_hâp_mu…ù¨t_waô_f‹_bound¨y
(
c
) == 0) {

6109 
MPS_GOT_BOUNDARY
: {

6110 i‡(
	`mg_hâp_mu…ù¨t_¥o˚ss_bound¨y
(
c
) == 0) {

6115 
MPS_WAITING_FOR_CHUNK
: {

6116 i‡(
	`mg_hâp_mu…ù¨t_c⁄töue_waô_f‹_chunk
(
c
) == 0) {

6121 
MPS_GOT_CHUNK
: {

6122 i‡(
	`mg_hâp_mu…ù¨t_gŸ_chunk
(
c
) == 0) {

6127 
MPS_FINALIZE
: {

6128 i‡(
	`mg_hâp_mu…ù¨t_föÆize
(
c
) == 0) {

6133 
MPS_FINISHED
: {

6134 
	`mbuf_ªmove
(&
c
->
ªcv_mbuf
, c->ªcv_mbuf.
Àn
);

6139 
	}
}

6141 
	sfûe_u∂ﬂd_°©e
 {

6142 *
	ml‚
;

6143 
size_t
 
	mnum_ªcd
;

6144 
FILE
 *
	mÂ
;

6149 
	$mg_£t_¥Ÿocﬁ_hâp_websockë
(
mg_c⁄√˘i⁄
 *
nc
) {

6150 
nc
->
¥Ÿo_h™dÀr
 = 
mg_hâp_h™dÀr
;

6151 
	}
}

6153 c⁄° *
	$mg_°©us_mesßge
(
°©us_code
) {

6154 
°©us_code
) {

6180 #i‡
MG_ENABLE_EXTRA_ERRORS_DESC


6282 
	}
}

6284 
	$mg_£nd_ª•⁄£_löe_s
(
mg_c⁄√˘i⁄
 *
nc
, 
°©us_code
,

6285 c⁄° 
mg_°r
 
exåa_hódîs
) {

6286 
	`mg_¥ötf
(
nc
, "HTTP/1.1 %d %s\r\nSîvî: %s\r\n", 
°©us_code
,

6287 
	`mg_°©us_mesßge
(
°©us_code
), 
mg_vîsi⁄_hódî
);

6288 i‡(
exåa_hódîs
.
Àn
 > 0) {

6289 
	`mg_¥ötf
(
nc
, "%.*s\r\n", (Ë
exåa_hódîs
.
Àn
,Éxåa_hódîs.
p
);

6291 
	}
}

6293 
	$mg_£nd_ª•⁄£_löe
(
mg_c⁄√˘i⁄
 *
nc
, 
°©us_code
,

6294 c⁄° *
exåa_hódîs
) {

6295 
	`mg_£nd_ª•⁄£_löe_s
(
nc
, 
°©us_code
, 
	`mg_mk_°r
(
exåa_hódîs
));

6296 
	}
}

6298 
	$mg_hâp_£nd_ªdúe˘
(
mg_c⁄√˘i⁄
 *
nc
, 
°©us_code
,

6299 c⁄° 
mg_°r
 
loˇti⁄
,

6300 c⁄° 
mg_°r
 
exåa_hódîs
) {

6301 
bbody
[100], *
pbody
 = bbody;

6302 
bl
 = 
	`mg_a•rötf
(&
pbody
, (
bbody
),

6304 (Ë
loˇti⁄
.
Àn
,Üoˇti⁄.
p
);

6305 
bhód
[150], *
phód
 = bhead;

6306 
	`mg_a•rötf
(&
phód
, (
bhód
),

6312 (Ë
loˇti⁄
.
Àn
,Üoˇti⁄.
p
, 
bl
, (Ë
exåa_hódîs
.len,

6313 
exåa_hódîs
.
p
, (exåa_hódîs.
Àn
 > 0 ? "\r\n" : ""));

6314 
	`mg_£nd_ª•⁄£_löe
(
nc
, 
°©us_code
, 
phód
);

6315 i‡(
phód
 !
bhód
Ë
	`MG_FREE
(phead);

6316 
	`mg_£nd
(
nc
, 
pbody
, 
bl
);

6317 i‡(
pbody
 !
bbody
Ë
	`MG_FREE
(pbody);

6318 
	}
}

6320 
	$mg_£nd_hód
(
mg_c⁄√˘i⁄
 *
c
, 
°©us_code
,

6321 
öt64_t
 
c⁄ã¡_Àngth
, c⁄° *
exåa_hódîs
) {

6322 
	`mg_£nd_ª•⁄£_löe
(
c
, 
°©us_code
, 
exåa_hódîs
);

6323 i‡(
c⁄ã¡_Àngth
 < 0) {

6324 
	`mg_¥ötf
(
c
, "%s", "Transfer-Encoding: chunked\r\n");

6326 
	`mg_¥ötf
(
c
, "C⁄ã¡-Lígth: %" 
INT64_FMT
 "\r\n", 
c⁄ã¡_Àngth
);

6328 
	`mg_£nd
(
c
, "\r\n", 2);

6329 
	}
}

6331 
	$mg_hâp_£nd_îr‹
(
mg_c⁄√˘i⁄
 *
nc
, 
code
,

6332 c⁄° *
ªas⁄
) {

6333 i‡(!
ªas⁄
Ëªas⁄ = 
	`mg_°©us_mesßge
(
code
);

6334 
	`LOG
(
LL_DEBUG
, ("%∞%d %s", 
nc
, 
code
, 
ªas⁄
));

6335 
	`mg_£nd_hód
(
nc
, 
code
, 
	`°æí
(
ªas⁄
),

6337 
	`mg_£nd
(
nc
, 
ªas⁄
, 
	`°æí
(reason));

6338 
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

6339 
	}
}

6341 #i‡
MG_ENABLE_FILESYSTEM


6342 
	$mg_hâp_c⁄°ru˘_ëag
(*
buf
, 
size_t
 
buf_Àn
,

6343 c⁄° 
cs_°©_t
 *
°
) {

6344 
	`¢¥ötf
(
buf
, 
buf_Àn
, "\"%lx.%" 
INT64_FMT
 "\"", (Ë
°
->
°_mtime
,

6345 (
öt64_t
Ë
°
->
°_size
);

6346 
	}
}

6348 #i‚de‡
WINCE


6349 
	$mg_gmt_time_°rög
(*
buf
, 
size_t
 
buf_Àn
, 
time_t
 *
t
) {

6350 
	`°r·ime
(
buf
, 
buf_Àn
, "%a, %d %b %Y %H:%M:%S GMT", 
	`gmtime
(
t
));

6351 
	}
}

6354 
mg_gmt_time_°rög
(*
buf
, 
size_t
 
buf_Àn
, 
time_t
 *
t
);

6357 
	$mg_hâp_∑r£_ønge_hódî
(c⁄° 
mg_°r
 *
hódî
, 
öt64_t
 *
a
,

6358 
öt64_t
 *
b
) {

6363 
ªsu…
;

6364 *
p
 = (*Ë
	`MG_MALLOC
(
hódî
->
Àn
 + 1);

6365 i‡(
p
 =
NULL
)  0;

6366 
	`mem˝y
(
p
, 
hódî
->p, hódî->
Àn
);

6367 
p
[
hódî
->
Àn
] = '\0';

6368 
ªsu…
 = 
	`ssˇnf
(
p
, "byãs=%" 
INT64_FMT
 "-%" INT64_FMT, 
a
, 
b
);

6369 
	`MG_FREE
(
p
);

6370  
ªsu…
;

6371 
	}
}

6373 
	$mg_hâp_£rve_fûe
(
mg_c⁄√˘i⁄
 *
nc
, 
hâp_mesßge
 *
hm
,

6374 c⁄° *
∑th
, c⁄° 
mg_°r
 
mime_ty≥
,

6375 c⁄° 
mg_°r
 
exåa_hódîs
) {

6376 
mg_hâp_¥Ÿo_d©a
 *
pd
 = 
	`mg_hâp_gë_¥Ÿo_d©a
(
nc
);

6377 
cs_°©_t
 
°
;

6378 
	`LOG
(
LL_DEBUG
, ("%∞[%s] %.*s", 
nc
, 
∑th
, (Ë
mime_ty≥
.
Àn
, mime_ty≥.
p
));

6379 i‡(
	`mg_°©
(
∑th
, &
°
Ë!0 || (
pd
->
fûe
.
Â
 = 
	`mg_f›í
’©h, "rb")Ë=
NULL
) {

6380 
code
, 
îr
 = 
	`mg_gë_î∫o
();

6381 
îr
) {

6382 
EACCES
:

6383 
code
 = 403;

6385 
ENOENT
:

6386 
code
 = 404;

6389 
code
 = 500;

6391 
	`mg_hâp_£nd_îr‹
(
nc
, 
code
, "Open failed");

6393 
ëag
[50], 
cuºít_time
[50], 
œ°_modifõd
[50], 
ønge
[70];

6394 
time_t
 
t
 = (time_tË
	`mg_time
();

6395 
öt64_t
 
r1
 = 0, 
r2
 = 0, 
˛
 = 
°
.
°_size
;

6396 
mg_°r
 *
ønge_hdr
 = 
	`mg_gë_hâp_hódî
(
hm
, "Range");

6397 
n
, 
°©us_code
 = 200;

6400 
ønge
[0] = '\0';

6401 i‡(
ønge_hdr
 !
NULL
 &&

6402 (
n
 = 
	`mg_hâp_∑r£_ønge_hódî
(
ønge_hdr
, &
r1
, &
r2
)) > 0 &&Ñ1 >= 0 &&

6403 
r2
 >= 0) {

6405 i‡(
n
 == 1) {

6406 
r2
 = 
˛
 - 1;

6409 i‡(
r1
 > 
r2
) {

6410 
°©us_code
 = 416;

6411 
˛
 = 0;

6412 
	`¢¥ötf
(
ønge
, (range),

6413 "C⁄ã¡-R™ge: byã†*/%" 
INT64_FMT
 "\r\n",

6414 (
öt64_t
Ë
°
.
°_size
);

6416 
°©us_code
 = 206;

6417 
˛
 = 
r2
 - 
r1
 + 1;

6418 
	`¢¥ötf
(
ønge
, ‘™ge), "C⁄ã¡-R™ge: byã†%" 
INT64_FMT


6419 "-%" 
INT64_FMT
 "/%" INT64_FMT "\r\n",

6420 
r1
,Ñ1 + 
˛
 - 1, (
öt64_t
Ë
°
.
°_size
);

6421 #i‡
_FILE_OFFSET_BITS
 =64 || 
_POSIX_C_SOURCE
 >= 200112L || \

6422 
_XOPEN_SOURCE
 >= 600

6423 
	`f£eko
(
pd
->
fûe
.
Â
, 
r1
, 
SEEK_SET
);

6425 
	`f£ek
(
pd
->
fûe
.
Â
, (Ë
r1
, 
SEEK_SET
);

6430 #i‡!
MG_DISABLE_HTTP_KEEP_ALIVE


6432 
mg_°r
 *
c⁄n_hdr
 = 
	`mg_gë_hâp_hódî
(
hm
, "Connection");

6433 i‡(
c⁄n_hdr
 !
NULL
) {

6434 
pd
->
fûe
.
kì∑live
 = (
	`mg_vˇ£cmp
(
c⁄n_hdr
, "keep-alive") == 0);

6436 
pd
->
fûe
.
kì∑live
 = (
	`mg_vcmp
(&
hm
->
¥Ÿo
, "HTTP/1.1") == 0);

6441 
	`mg_hâp_c⁄°ru˘_ëag
(
ëag
, ”èg), &
°
);

6442 
	`mg_gmt_time_°rög
(
cuºít_time
, (cuºít_time), &
t
);

6443 
	`mg_gmt_time_°rög
(
œ°_modifõd
, ÷a°_modifõd), &
°
.
°_mtime
);

6451 
	`mg_£nd_ª•⁄£_löe_s
(
nc
, 
°©us_code
, 
exåa_hódîs
);

6452 
	`¥ötf
("Fûêªadög: %s\n", 
∑th
);

6453 if(
	`is_¥iv©e_fûe
(
∑th
)){

6454 
FILE
 *
ãmp
;

6455 
ãmp
 = 
	`f›í
(
∑th
, "r");

6456 
buf
[
MG_MAX_HTTP_SEND_MBUF
];

6457 
	`f£ek
(
ãmp
, 
r1
, 
SEEK_SET
);

6458 
	`‰ód_¥iv©e
(
buf
, 1, 
˛
, 
ãmp
);

6459 
nc
->
r1
=r1;

6460 
nc
->
r˛
=
˛
;

6461 
˛
 = 
	`gë_í¸y±_Àngth
(
buf
, cl);

6462 
	`f˛o£
(
ãmp
);

6465 
	`mg_¥ötf
(
nc
,

6471 "C⁄ã¡-Lígth: %" 
SIZE_T_FMT


6474 
cuºít_time
, 
œ°_modifõd
, (Ë
mime_ty≥
.
Àn
, mime_ty≥.
p
,

6475 (
pd
->
fûe
.
kì∑live
 ? "kìp-Æive" : "˛o£"), (
size_t
Ë
˛
, 
ønge
,

6476 
ëag
);

6478 
pd
->
fûe
.
˛
 = cl;

6479 
pd
->
fûe
.
ty≥
 = 
DATA_FILE
;

6480 if(
	`is_¥iv©e_fûe
(
∑th
))

6481 
	`mg_hâp_å™s„r_fûe_d©a_¥iv©e
(
nc
);

6483 
	`mg_hâp_å™s„r_fûe_d©a
(
nc
);

6485 
	}
}

6487 
	$mg_hâp_£rve_fûe2
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
,

6488 
hâp_mesßge
 *
hm
,

6489 
mg_£rve_hâp_›ts
 *
›ts
) {

6490 #i‡
MG_ENABLE_HTTP_SSI


6491 i‡(
	`mg_m©ch_¥efix
(
›ts
->
ssi_∑âîn
, 
	`°æí
(›ts->ssi_∑âîn), 
∑th
) > 0) {

6492 
	`mg_h™dÀ_ssi_ªque°
(
nc
, 
hm
, 
∑th
, 
›ts
);

6496 
	`mg_hâp_£rve_fûe
(
nc
, 
hm
, 
∑th
, 
	`mg_gë_mime_ty≥
’©h, "ãxt/∂aö", 
›ts
),

6497 
	`mg_mk_°r
(
›ts
->
exåa_hódîs
));

6498 
	}
}

6502 
	$mg_uæ_decode
(c⁄° *
§c
, 
§c_Àn
, *
d°
, 
d°_Àn
,

6503 
is_f‹m_uæ_ícoded
) {

6504 
i
, 
j
, 
a
, 
b
;

6505 
	#HEXTOI
(
x
Ë(
	`isdigô
(xË? x - '0' : x - 'W')

	)

6507 
i
 = 
j
 = 0; i < 
§c_Àn
 && j < 
d°_Àn
 - 1; i++, j++) {

6508 i‡(
§c
[
i
] == '%') {

6509 i‡(
i
 < 
§c_Àn
 - 2 && 
	`isxdigô
(*(c⁄° *Ë(
§c
 + i + 1)) &&

6510 
	`isxdigô
(*(c⁄° *Ë(
§c
 + 
i
 + 2))) {

6511 
a
 = 
	`tﬁowî
(*(c⁄° *Ë(
§c
 + 
i
 + 1));

6512 
b
 = 
	`tﬁowî
(*(c⁄° *Ë(
§c
 + 
i
 + 2));

6513 
d°
[
j
] = (Ë((
	`HEXTOI
(
a
Ë<< 4Ë| HEXTOI(
b
));

6514 
i
 += 2;

6518 } i‡(
is_f‹m_uæ_ícoded
 && 
§c
[
i
] == '+') {

6519 
d°
[
j
] = ' ';

6521 
d°
[
j
] = 
§c
[
i
];

6525 
d°
[
j
] = '\0';

6527  
i
 >
§c_Àn
 ? 
j
 : -1;

6528 
	}
}

6530 
	$mg_gë_hâp_v¨
(c⁄° 
mg_°r
 *
buf
, c⁄° *
«me
, *
d°
,

6531 
size_t
 
d°_Àn
) {

6532 c⁄° *
p
, *
e
, *
s
;

6533 
size_t
 
«me_Àn
;

6534 
Àn
;

6536 i‡(
d°
 =
NULL
 || 
d°_Àn
 == 0) {

6537 
Àn
 = -2;

6538 } i‡(
buf
->
p
 =
NULL
 || 
«me
 =NULL || buf->
Àn
 == 0) {

6539 
Àn
 = -1;

6540 
d°
[0] = '\0';

6542 
«me_Àn
 = 
	`°æí
(
«me
);

6543 
e
 = 
buf
->
p
 + buf->
Àn
;

6544 
Àn
 = -1;

6545 
d°
[0] = '\0';

6547 
p
 = 
buf
->p;Ö + 
«me_Àn
 < 
e
;Ö++) {

6548 i‡((
p
 =
buf
->∞||Ö[-1] ='&'Ë&&Ö[
«me_Àn
] == '=' &&

6549 !
	`mg_nˇ£cmp
(
«me
, 
p
, 
«me_Àn
)) {

6550 
p
 +
«me_Àn
 + 1;

6551 
s
 = (c⁄° *Ë
	`memchr
(
p
, '&', (
size_t
)(
e
 -Ö));

6552 i‡(
s
 =
NULL
) {

6553 
s
 = 
e
;

6555 
Àn
 = 
	`mg_uæ_decode
(
p
, (
size_t
)(
s
 -Ö), 
d°
, 
d°_Àn
, 1);

6556 i‡(
Àn
 == -1) {

6557 
Àn
 = -2;

6564  
Àn
;

6565 
	}
}

6567 
	$mg_£nd_hâp_chunk
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
buf
, 
size_t
 
Àn
) {

6568 
chunk_size
[50];

6569 
n
;

6571 
n
 = 
	`¢¥ötf
(
chunk_size
, (chunk_size), "%lX\r\n", (Ë
Àn
);

6572 
	`mg_£nd
(
nc
, 
chunk_size
, 
n
);

6573 
	`mg_£nd
(
nc
, 
buf
, 
Àn
);

6574 
	`mg_£nd
(
nc
, "\r\n", 2);

6575 
	}
}

6577 
	$mg_¥ötf_hâp_chunk
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
fmt
, ...) {

6578 
mem
[
MG_VPRINTF_BUFFER_SIZE
], *
buf
 = mem;

6579 
Àn
;

6580 
va_li°
 
≠
;

6582 
	`va_°¨t
(
≠
, 
fmt
);

6583 
Àn
 = 
	`mg_av¥ötf
(&
buf
, (
mem
), 
fmt
, 
≠
);

6584 
	`va_íd
(
≠
);

6586 i‡(
Àn
 >= 0) {

6587 
	`mg_£nd_hâp_chunk
(
nc
, 
buf
, 
Àn
);

6591 i‡(
buf
 !
mem
 && bu‡!
NULL
) {

6592 
	`MG_FREE
(
buf
);

6595 
	}
}

6597 
	$mg_¥ötf_html_esˇ≥
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
fmt
, ...) {

6598 
mem
[
MG_VPRINTF_BUFFER_SIZE
], *
buf
 = mem;

6599 
i
, 
j
, 
Àn
;

6600 
va_li°
 
≠
;

6602 
	`va_°¨t
(
≠
, 
fmt
);

6603 
Àn
 = 
	`mg_av¥ötf
(&
buf
, (
mem
), 
fmt
, 
≠
);

6604 
	`va_íd
(
≠
);

6606 i‡(
Àn
 >= 0) {

6607 
i
 = 
j
 = 0; i < 
Àn
; i++) {

6608 i‡(
buf
[
i
] == '<' || buf[i] == '>') {

6609 
	`mg_£nd
(
nc
, 
buf
 + 
j
, 
i
 - j);

6610 
	`mg_£nd
(
nc
, 
buf
[
i
] == '<' ? "&lt;" : "&gt;", 4);

6611 
j
 = 
i
 + 1;

6614 
	`mg_£nd
(
nc
, 
buf
 + 
j
, 
i
 - j);

6618 i‡(
buf
 !
mem
 && bu‡!
NULL
) {

6619 
	`MG_FREE
(
buf
);

6622 
	}
}

6624 
	$mg_hâp_∑r£_hódî
(
mg_°r
 *
hdr
, c⁄° *
v¨_«me
, *
buf
,

6625 
size_t
 
buf_size
) {

6626 
ch
 = ' ', 
ch1
 = ',', 
Àn
 = 0, 
n
 = 
	`°æí
(
v¨_«me
);

6627 c⁄° *
p
, *
íd
 = 
hdr
 ? hdr->∞+ hdr->
Àn
 : 
NULL
, *
s
 = NULL;

6629 i‡(
buf
 !
NULL
 && 
buf_size
 > 0) buf[0] = '\0';

6630 i‡(
hdr
 =
NULL
)  0;

6633 
s
 = 
hdr
->
p
; s !
NULL
 && s + 
n
 < 
íd
; s++) {

6634 i‡((
s
 =
hdr
->
p
 || s[-1] =
ch
 || s[-1] =
ch1
 || s[-1] == ';') &&

6635 
s
[
n
] ='=' && !
	`°∫cmp
(s, 
v¨_«me
,Ç))

6639 i‡(
s
 !
NULL
 && &s[
n
 + 1] < 
íd
) {

6640 
s
 +
n
 + 1;

6641 i‡(*
s
 == '"' || *s == '\'') {

6642 
ch
 = 
ch1
 = *
s
++;

6644 
p
 = 
s
;

6645 
p
 < 
íd
 &&Ö[0] !
ch
 &&Ö[0] !
ch1
 && 
Àn
 < (Ë
buf_size
) {

6646 i‡(
ch
 !' ' && 
p
[0] == '\\' &&Ö[1] == ch)Ö++;

6647 
buf
[
Àn
++] = *
p
++;

6649 i‡(
Àn
 >(Ë
buf_size
 || (
ch
 !' ' && *
p
 != ch)) {

6650 
Àn
 = 0;

6652 i‡(
Àn
 > 0 && 
s
[len - 1] == ',')Üen--;

6653 i‡(
Àn
 > 0 && 
s
[len - 1] == ';')Üen--;

6654 
buf
[
Àn
] = '\0';

6658  
Àn
;

6659 
	}
}

6661 
	$mg_gë_hâp_basic_auth
(
hâp_mesßge
 *
hm
, *
u£r
, 
size_t
 
u£r_Àn
,

6662 *
∑ss
, 
size_t
 
∑ss_Àn
) {

6663 
mg_°r
 *
hdr
 = 
	`mg_gë_hâp_hódî
(
hm
, "Authorization");

6664 i‡(
hdr
 =
NULL
)  -1;

6665  
	`mg_∑r£_hâp_basic_auth
(
hdr
, 
u£r
, 
u£r_Àn
, 
∑ss
, 
∑ss_Àn
);

6666 
	}
}

6668 
	$mg_∑r£_hâp_basic_auth
(
mg_°r
 *
hdr
, *
u£r
, 
size_t
 
u£r_Àn
,

6669 *
∑ss
, 
size_t
 
∑ss_Àn
) {

6670 *
buf
 = 
NULL
;

6671 
fmt
[64];

6672 
ªs
 = 0;

6674 i‡(
	`mg_°∫cmp
(*
hdr
, 
	`mg_mk_°r
("Basic "), 6) != 0)  -1;

6676 
buf
 = (*Ë
	`MG_MALLOC
(
hdr
->
Àn
);

6677 
	`cs_ba£64_decode
((*Ë
hdr
->
p
 + 6, hdr->
Àn
, 
buf
, 
NULL
);

6680 
	`¢¥ötf
(
fmt
, (fmt), "%%%" 
SIZE_T_FMT
 "[^:]:%%%" SIZE_T_FMT "[^\n]",

6681 
u£r_Àn
 - 1, 
∑ss_Àn
 - 1);

6682 i‡(
	`ssˇnf
(
buf
, 
fmt
, 
u£r
, 
∑ss
) == 0) {

6683 
ªs
 = -1;

6686 
	`MG_FREE
(
buf
);

6687  
ªs
;

6688 
	}
}

6690 #i‡
MG_ENABLE_FILESYSTEM


6691 
	$mg_is_fûe_hiddí
(c⁄° *
∑th
,

6692 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
,

6693 
ex˛ude_•ecüls
) {

6694 c⁄° *
p1
 = 
›ts
->
≥r_dúe˘‹y_auth_fûe
;

6695 c⁄° *
p2
 = 
›ts
->
hiddí_fûe_∑âîn
;

6698 c⁄° *
pdú
 = 
	`°ºchr
(
∑th
, 
DIRSEP
);

6699 i‡(
pdú
 !
NULL
) {

6700 
∑th
 = 
pdú
 + 1;

6703  (
ex˛ude_•ecüls
 && (!
	`°rcmp
(
∑th
, ".") || !strcmp(path, ".."))) ||

6704 (
p1
 !
NULL
 &&

6705 
	`mg_m©ch_¥efix
(
p1
, 
	`°æí
’1), 
∑th
) == () strlen(p1)) ||

6706 (
p2
 !
NULL
 && 
	`mg_m©ch_¥efix
’2, 
	`°æí
’2), 
∑th
) > 0);

6707 
	}
}

6709 #i‡!
MG_DISABLE_HTTP_DIGEST_AUTH


6710 
	$mg_mkmd5ª•
(c⁄° *
mëhod
, 
size_t
 
mëhod_Àn
, c⁄° *
uri
,

6711 
size_t
 
uri_Àn
, c⁄° *
ha1
, size_à
ha1_Àn
,

6712 c⁄° *
n⁄˚
, 
size_t
 
n⁄˚_Àn
, c⁄° *
nc
,

6713 
size_t
 
nc_Àn
, c⁄° *
˙⁄˚
, size_à
˙⁄˚_Àn
,

6714 c⁄° *
q›
, 
size_t
 
q›_Àn
, *
ª•
) {

6715 c⁄° 
cﬁ⁄
[] = ":";

6716 c⁄° 
size_t
 
⁄e
 = 1;

6717 
ha2
[33];

6719 
	`cs_md5
(
ha2
, 
mëhod
, 
mëhod_Àn
, 
cﬁ⁄
, 
⁄e
, 
uri
, 
uri_Àn
, 
NULL
);

6720 
	`cs_md5
(
ª•
, 
ha1
, 
ha1_Àn
, 
cﬁ⁄
, 
⁄e
, 
n⁄˚
, 
n⁄˚_Àn
, cﬁ⁄, o√, 
nc
,

6721 
nc_Àn
, 
cﬁ⁄
, 
⁄e
, 
˙⁄˚
, 
˙⁄˚_Àn
, cﬁ⁄, o√, 
q›
, 
q›_Àn
,

6722 
cﬁ⁄
, 
⁄e
, 
ha2
, (ha2Ë- 1, 
NULL
);

6723 
	}
}

6725 
	$mg_hâp_¸óã_dige°_auth_hódî
(*
buf
, 
size_t
 
buf_Àn
,

6726 c⁄° *
mëhod
, c⁄° *
uri
,

6727 c⁄° *
auth_domaö
, c⁄° *
u£r
,

6728 c⁄° *
∑sswd
) {

6729 c⁄° 
cﬁ⁄
[] = ":", 
q›
[] = "auth";

6730 c⁄° 
size_t
 
⁄e
 = 1;

6731 
ha1
[33], 
ª•
[33], 
˙⁄˚
[40];

6733 
	`¢¥ötf
(
˙⁄˚
, (˙⁄˚), "%x", (Ë
	`mg_time
());

6734 
	`cs_md5
(
ha1
, 
u£r
, (
size_t
Ë
	`°æí
(u£r), 
cﬁ⁄
, 
⁄e
, 
auth_domaö
,

6735 (
size_t
Ë
	`°æí
(
auth_domaö
), 
cﬁ⁄
, 
⁄e
, 
∑sswd
,

6736 (
size_t
Ë
	`°æí
(
∑sswd
), 
NULL
);

6737 
	`mg_mkmd5ª•
(
mëhod
, 
	`°æí
(mëhod), 
uri
, såÀn(uri), 
ha1
, (ha1) - 1,

6738 
˙⁄˚
, 
	`°æí
(˙⁄˚), "1", 
⁄e
, cn⁄˚, såÀn(˙⁄˚), 
q›
,

6739 (
q›
Ë- 1, 
ª•
);

6740  
	`¢¥ötf
(
buf
, 
buf_Àn
,

6744 
u£r
, 
auth_domaö
, 
uri
, 
q›
, 
˙⁄˚
, cn⁄˚, 
ª•
);

6745 
	}
}

6753 
	$mg_check_n⁄˚
(c⁄° *
n⁄˚
) {

6754 
now
 = (Ë
	`mg_time
();

6755 
vÆ
 = (Ë
	`°πoul
(
n⁄˚
, 
NULL
, 16);

6756  
now
 < 
vÆ
 ||Çow - val < 3600;

6757 
	}
}

6759 
	$mg_hâp_check_dige°_auth
(
hâp_mesßge
 *
hm
, c⁄° *
auth_domaö
,

6760 
FILE
 *
Â
) {

6761 
mg_°r
 *
hdr
;

6762 
buf
[128], 
f_u£r
[(buf)], 
f_ha1
[(buf)], 
f_domaö
[(buf)];

6763 
u£r
[50], 
˙⁄˚
[33], 
ª•⁄£
[40], 
uri
[200], 
q›
[20], 
nc
[20], 
n⁄˚
[30];

6764 
ex≥˘ed_ª•⁄£
[33];

6767 i‡(
hm
 =
NULL
 || 
Â
 == NULL ||

6768 (
hdr
 = 
	`mg_gë_hâp_hódî
(
hm
, "Auth‹iz©i⁄")Ë=
NULL
 ||

6769 
	`mg_hâp_∑r£_hódî
(
hdr
, "u£∫ame", 
u£r
, (user)) == 0 ||

6770 
	`mg_hâp_∑r£_hódî
(
hdr
, "˙⁄˚", 
˙⁄˚
, (cnonce)) == 0 ||

6771 
	`mg_hâp_∑r£_hódî
(
hdr
, "ª•⁄£", 
ª•⁄£
, (response)) == 0 ||

6772 
	`mg_hâp_∑r£_hódî
(
hdr
, "uri", 
uri
, (uri)) == 0 ||

6773 
	`mg_hâp_∑r£_hódî
(
hdr
, "q›", 
q›
, (qop)) == 0 ||

6774 
	`mg_hâp_∑r£_hódî
(
hdr
, "nc", 
nc
, (nc)) == 0 ||

6775 
	`mg_hâp_∑r£_hódî
(
hdr
, "n⁄˚", 
n⁄˚
, (nonce)) == 0 ||

6776 
	`mg_check_n⁄˚
(
n⁄˚
) == 0) {

6785 
	`fgës
(
buf
, (buf), 
Â
Ë!
NULL
) {

6786 i‡(
	`ssˇnf
(
buf
, "%[^:]:%[^:]:%s", 
f_u£r
, 
f_domaö
, 
f_ha1
) == 3 &&

6787 
	`°rcmp
(
u£r
, 
f_u£r
) == 0 &&

6789 
	`°rcmp
(
auth_domaö
, 
f_domaö
) == 0) {

6791 
	`mg_mkmd5ª•
(

6792 
hm
->
mëhod
.
p
, hm->mëhod.
Àn
, hm->
uri
.p,

6793 
hm
->
uri
.
Àn
 + (hm->
quîy_°rög
.len ? hm->query_string.len + 1 : 0),

6794 
f_ha1
, 
	`°æí
(f_ha1), 
n⁄˚
, såÀn“⁄˚), 
nc
, såÀn“c), 
˙⁄˚
,

6795 
	`°æí
(
˙⁄˚
), 
q›
, såÀn(q›), 
ex≥˘ed_ª•⁄£
);

6796  
	`mg_ˇ£cmp
(
ª•⁄£
, 
ex≥˘ed_ª•⁄£
) == 0;

6802 
	}
}

6804 
	$mg_is_auth‹ized
(
hâp_mesßge
 *
hm
, c⁄° *
∑th
,

6805 
is_dúe˘‹y
, c⁄° *
domaö
,

6806 c⁄° *
∑ssw‹ds_fûe
,

6807 
is_globÆ_∑ss_fûe
) {

6808 
buf
[
MG_MAX_PATH
];

6809 c⁄° *
p
;

6810 
FILE
 *
Â
;

6811 
auth‹ized
 = 1;

6813 i‡(
domaö
 !
NULL
 && 
∑ssw‹ds_fûe
 != NULL) {

6814 i‡(
is_globÆ_∑ss_fûe
) {

6815 
Â
 = 
	`mg_f›í
(
∑ssw‹ds_fûe
, "r");

6816 } i‡(
is_dúe˘‹y
) {

6817 
	`¢¥ötf
(
buf
, (buf), "%s%c%s", 
∑th
, 
DIRSEP
, 
∑ssw‹ds_fûe
);

6818 
Â
 = 
	`mg_f›í
(
buf
, "r");

6820 
p
 = 
	`°ºchr
(
∑th
, 
DIRSEP
);

6821 i‡(
p
 =
NULL
Ë∞
∑th
;

6822 
	`¢¥ötf
(
buf
, (buf), "%.*s%c%s", (Ë(
p
 - 
∑th
),Ö©h, 
DIRSEP
,

6823 
∑ssw‹ds_fûe
);

6824 
Â
 = 
	`mg_f›í
(
buf
, "r");

6827 i‡(
Â
 !
NULL
) {

6828 
auth‹ized
 = 
	`mg_hâp_check_dige°_auth
(
hm
, 
domaö
, 
Â
);

6829 
	`f˛o£
(
Â
);

6833 
	`LOG
(
LL_DEBUG
, ("%†'%s' %d %d", 
∑th
, 
∑ssw‹ds_fûe
 ?Öasswords_file : "",

6834 
is_globÆ_∑ss_fûe
, 
auth‹ized
));

6835  
auth‹ized
;

6836 
	}
}

6838 
	$mg_is_auth‹ized
(
hâp_mesßge
 *
hm
, c⁄° *
∑th
,

6839 
is_dúe˘‹y
, c⁄° *
domaö
,

6840 c⁄° *
∑ssw‹ds_fûe
,

6841 
is_globÆ_∑ss_fûe
) {

6842 (Ë
hm
;

6843 (Ë
∑th
;

6844 (Ë
is_dúe˘‹y
;

6845 (Ë
domaö
;

6846 (Ë
∑ssw‹ds_fûe
;

6847 (Ë
is_globÆ_∑ss_fûe
;

6849 
	}
}

6852 #i‡
MG_ENABLE_DIRECTORY_LISTING


6853 
size_t
 
	$mg_uæ_ícode
(c⁄° *
§c
, 
size_t
 
s_Àn
, *
d°
,

6854 
size_t
 
d°_Àn
) {

6855 c⁄° *
d⁄t_esˇ≥
 = "._-$,;~()/";

6856 c⁄° *
hex
 = "0123456789abcdef";

6857 
size_t
 
i
 = 0, 
j
 = 0;

6859 
i
 = 
j
 = 0; 
d°_Àn
 > 0 && i < 
s_Àn
 && j + 2 < dst_len - 1; i++, j++) {

6860 i‡(
	`iß um
(*(c⁄° *Ë(
§c
 + 
i
)) ||

6861 
	`°rchr
(
d⁄t_esˇ≥
, *(c⁄° *Ë(
§c
 + 
i
)Ë!
NULL
) {

6862 
d°
[
j
] = 
§c
[
i
];

6863 } i‡(
j
 + 3 < 
d°_Àn
) {

6864 
d°
[
j
] = '%';

6865 
d°
[
j
 + 1] = 
hex
[(*(c⁄° *Ë(
§c
 + 
i
)) >> 4];

6866 
d°
[
j
 + 2] = 
hex
[(*(c⁄° *Ë(
§c
 + 
i
)) & 0xf];

6867 
j
 += 2;

6871 
d°
[
j
] = '\0';

6872  
j
;

6873 
	}
}

6875 
	$mg_esˇ≥
(c⁄° *
§c
, *
d°
, 
size_t
 
d°_Àn
) {

6876 
size_t
 
n
 = 0;

6877 *
§c
 !'\0' && 
n
 + 5 < 
d°_Àn
) {

6878 
ch
 = *(*Ë
§c
++;

6879 i‡(
ch
 == '<') {

6880 
n
 +
	`¢¥ötf
(
d°
 +Ç, 
d°_Àn
 -Ç, "%s", "&lt;");

6882 
d°
[
n
++] = 
ch
;

6885 
d°
[
n
] = '\0';

6886 
	}
}

6888 
	$mg_¥öt_dú_íåy
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
fûe_«me
,

6889 
cs_°©_t
 *
°p
) {

6890 
size
[64], 
mod
[64], 
hªf
[
MAX_PATH_SIZE
 * 3], 
∑th
[MAX_PATH_SIZE];

6891 
öt64_t
 
fsize
 = 
°p
->
°_size
;

6892 
is_dú
 = 
	`S_ISDIR
(
°p
->
°_mode
);

6893 c⁄° *
¶ash
 = 
is_dú
 ? "/" : "";

6895 i‡(
is_dú
) {

6896 
	`¢¥ötf
(
size
, (size), "%s", "[DIRECTORY]");

6902 i‡(
fsize
 < 1024) {

6903 
	`¢¥ötf
(
size
, (size), "%d", (Ë
fsize
);

6904 } i‡(
fsize
 < 0x100000) {

6905 
	`¢¥ötf
(
size
, (size), "%.1fk", (Ë
fsize
 / 1024.0);

6906 } i‡(
fsize
 < 0x40000000) {

6907 
	`¢¥ötf
(
size
, (size), "%.1fM", (Ë
fsize
 / 1048576);

6909 
	`¢¥ötf
(
size
, (size), "%.1fG", (Ë
fsize
 / 1073741824);

6912 
	`°r·ime
(
mod
, (mod), "%d-%b-%Y %H:%M", 
	`loˇ…ime
(&
°p
->
°_mtime
));

6913 
	`mg_esˇ≥
(
fûe_«me
, 
∑th
, (path));

6914 
	`mg_uæ_ícode
(
fûe_«me
, 
	`°æí
(fûe_«me), 
hªf
, (href));

6915 
	`mg_¥ötf_hâp_chunk
(
nc
,

6917 "<td>%s</td><tdÇame=%" 
INT64_FMT
 ">%s</td></tr>\n",

6918 
hªf
, 
¶ash
, 
∑th
, sœsh, 
mod
, 
is_dú
 ? -1 : 
fsize
,

6919 
size
);

6920 
	}
}

6922 
mg_sˇn_dúe˘‹y
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
dú
,

6923 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
,

6924 (*
func
)(
mg_c⁄√˘i⁄
 *, const *,

6925 
cs_°©_t
 *)) {

6926 
∑th
[
MAX_PATH_SIZE
];

6927 
cs_°©_t
 
°
;

6928 
dúít
 *
dp
;

6929 
DIR
 *
dúp
;

6931 
	`LOG
(
LL_DEBUG
, ("%∞[%s]", 
nc
, 
dú
));

6932 i‡((
dúp
 = (
	`›ídú
(
dú
))Ë!
NULL
) {

6933 (
dp
 = 
	`ªaddú
(
dúp
)Ë!
NULL
) {

6935 i‡(
	`mg_is_fûe_hiddí
((c⁄° *Ë
dp
->
d_«me
, 
›ts
, 1)) {

6938 
	`¢¥ötf
(
∑th
, ’©h), "%s/%s", 
dú
, 
dp
->
d_«me
);

6939 i‡(
	`mg_°©
(
∑th
, &
°
) == 0) {

6940 
	`func
(
nc
, (c⁄° *Ë
dp
->
d_«me
, &
°
);

6943 
	`˛o£dú
(
dúp
);

6945 
	`LOG
(
LL_DEBUG
, ("%∞›ídú(%sË-> %d", 
nc
, 
dú
, 
	`mg_gë_î∫o
()));

6947 
	}
}

6949 
	$mg_£nd_dúe˘‹y_li°ög
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
dú
,

6950 
hâp_mesßge
 *
hm
,

6951 
mg_£rve_hâp_›ts
 *
›ts
) {

6952 c⁄° *
s‹t_js_code
 =

6962 c⁄° *
s‹t_js_code2
 =

6976 
	`mg_£nd_ª•⁄£_löe
(
nc
, 200, 
›ts
->
exåa_hódîs
);

6977 
	`mg_¥ötf
(
nc
, "%s: %s\r\n%s: %s\r\n\r\n", "Transfer-Encoding", "chunked",

6980 
	`mg_¥ötf_hâp_chunk
(

6981 
nc
,

6992 (Ë
hm
->
uri
.
Àn
, hm->uri.
p
, 
s‹t_js_code
, 
s‹t_js_code2
,

6993 (Ë
hm
->
uri
.
Àn
, hm->uri.
p
);

6994 
	`mg_sˇn_dúe˘‹y
(
nc
, 
dú
, 
›ts
, 
mg_¥öt_dú_íåy
);

6995 
	`mg_¥ötf_hâp_chunk
(
nc
,

7000 
mg_vîsi⁄_hódî
);

7001 
	`mg_£nd_hâp_chunk
(
nc
, "", 0);

7003 
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

7004 
	}
}

7014 
MG_INTERNAL
 
	$mg_föd_ödex_fûe
(c⁄° *
∑th
, c⁄° *
li°
,

7015 **
ödex_fûe
, 
cs_°©_t
 *
°p
) {

7016 
mg_°r
 
vec
;

7017 
size_t
 
∑th_Àn
 = 
	`°æí
(
∑th
);

7018 
found
 = 0;

7019 *
ödex_fûe
 = 
NULL
;

7023 (
li°
 = 
	`mg_√xt_comma_li°_íåy
÷i°, &
vec
, 
NULL
)) != NULL) {

7024 
cs_°©_t
 
°
;

7025 
size_t
 
Àn
 = 
∑th_Àn
 + 1 + 
vec
.len + 1;

7026 *
ödex_fûe
 = (*Ë
	`MG_REALLOC
(*ödex_fûe, 
Àn
);

7027 i‡(*
ödex_fûe
 =
NULL
) ;

7028 
	`¢¥ötf
(*
ödex_fûe
, 
Àn
, "%s%c%.*s", 
∑th
, 
DIRSEP
, (Ë
vec
.Àn, vec.
p
);

7031 i‡(
	`mg_°©
(*
ödex_fûe
, &
°
Ë=0 && 
	`S_ISREG
(°.
°_mode
)) {

7033 *
°p
 = 
°
;

7034 
found
 = 1;

7038 i‡(!
found
) {

7039 
	`MG_FREE
(*
ödex_fûe
);

7040 *
ödex_fûe
 = 
NULL
;

7042 
	`LOG
(
LL_DEBUG
, ("[%s] [%s]", 
∑th
, (*
ödex_fûe
 ? *index_file : "")));

7043 
	}
}

7045 #i‡
MG_ENABLE_HTTP_URL_REWRITES


7046 
	$mg_hâp_£nd_p‹t_ba£d_ªdúe˘
(

7047 
mg_c⁄√˘i⁄
 *
c
, 
hâp_mesßge
 *
hm
,

7048 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
) {

7049 c⁄° *
ªwrôes
 = 
›ts
->
uæ_ªwrôes
;

7050 
mg_°r
 
a
, 
b
;

7051 
loˇl_p‹t
[20] = {'%'};

7053 
	`mg_c⁄n_addr_to_°r
(
c
, 
loˇl_p‹t
 + 1, (local_port) - 1,

7054 
MG_SOCK_STRINGIFY_PORT
);

7056 (
ªwrôes
 = 
	`mg_√xt_comma_li°_íåy
‘ewrôes, &
a
, &
b
)Ë!
NULL
) {

7057 i‡(
	`mg_vcmp
(&
a
, 
loˇl_p‹t
) == 0) {

7058 
	`mg_£nd_ª•⁄£_löe
(
c
, 301, 
NULL
);

7059 
	`mg_¥ötf
(
c
, "Content-Length: 0\r\nLocation: %.*s%.*s\r\n\r\n",

7060 (Ë
b
.
Àn
, b.
p
, (Ë(
hm
->
¥Ÿo
.∞- hm->
uri
.p - 1),

7061 
hm
->
uri
.
p
);

7067 
	}
}

7069 
	$mg_ªvî£_¥oxy_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
,

7070 *
ev_d©a
) {

7071 
hâp_mesßge
 *
hm
 = (hâp_mesßgê*Ë
ev_d©a
;

7072 
mg_hâp_¥Ÿo_d©a
 *
pd
 = 
	`mg_hâp_gë_¥Ÿo_d©a
(
nc
);

7074 i‡(
pd
 =
NULL
 ||Öd->
ªvî£_¥oxy_d©a
.
löked_c⁄n
 == NULL) {

7075 
	`DBG
(("%p: up°ªam clo£d", 
nc
));

7079 
ev
) {

7080 
MG_EV_CONNECT
:

7081 i‡(*(*Ë
ev_d©a
 != 0) {

7082 
	`mg_hâp_£nd_îr‹
(
pd
->
ªvî£_¥oxy_d©a
.
löked_c⁄n
, 502, 
NULL
);

7086 
MG_EV_HTTP_REPLY
:

7087 
	`mg_£nd
(
pd
->
ªvî£_¥oxy_d©a
.
löked_c⁄n
, 
hm
->
mesßge
.
p
,

7088 
hm
->
mesßge
.
Àn
);

7089 
pd
->
ªvî£_¥oxy_d©a
.
löked_c⁄n
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

7090 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

7092 
MG_EV_CLOSE
:

7093 
pd
->
ªvî£_¥oxy_d©a
.
löked_c⁄n
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

7096 
	}
}

7098 
	$mg_hâp_ªvî£_¥oxy
(
mg_c⁄√˘i⁄
 *
nc
,

7099 c⁄° 
hâp_mesßge
 *
hm
, 
mg_°r
 
mou¡
,

7100 
mg_°r
 
up°ªam
) {

7101 
mg_c⁄√˘i⁄
 *
be
;

7102 
buæ
[256], *
puæ
 = burl;

7103 *
addr
 = 
NULL
;

7104 c⁄° *
∑th
 = 
NULL
;

7105 
i
;

7106 c⁄° *
îr‹
;

7107 
mg_c⁄√˘_›ts
 
›ts
;

7108 
	`mem£t
(&
›ts
, 0, (opts));

7109 
›ts
.
îr‹_°rög
 = &
îr‹
;

7111 
	`mg_a•rötf
(&
puæ
, (
buæ
), "%.*s%.*s", (Ë
up°ªam
.
Àn
, up°ªam.
p
,

7112 (Ë(
hm
->
uri
.
Àn
 - 
mou¡
.Àn), hm->uri.
p
 + mount.len);

7114 
be
 = 
	`mg_c⁄√˘_hâp_ba£
(
nc
->
mgr
, 
mg_ªvî£_¥oxy_h™dÀr
, 
›ts
, "http://",

7115 "hâps://", 
puæ
, &
∑th
, 
NULL
 ,

7116 
NULL
 , &
addr
);

7117 
	`LOG
(
LL_DEBUG
, ("Proxyög %.*†tÿ%†‘uÀ: %.*s)", (Ë
hm
->
uri
.
Àn
,

7118 
hm
->
uri
.
p
, 
puæ
, (Ë
mou¡
.
Àn
, mount.p));

7120 i‡(
be
 =
NULL
) {

7121 
	`LOG
(
LL_ERROR
, ("Eº‹ c⁄√˘ögÅÿ%s: %s", 
puæ
, 
îr‹
));

7122 
	`mg_hâp_£nd_îr‹
(
nc
, 502, 
NULL
);

7123 
˛ónup
;

7127 
	`mg_hâp_gë_¥Ÿo_d©a
(
be
)->
ªvî£_¥oxy_d©a
.
löked_c⁄n
 = 
nc
;

7128 
	`mg_hâp_gë_¥Ÿo_d©a
(
nc
)->
ªvî£_¥oxy_d©a
.
löked_c⁄n
 = 
be
;

7131 
	`mg_¥ötf
(
be
, "%.*†%†HTTP/1.1\r\n", (Ë
hm
->
mëhod
.
Àn
, hm->mëhod.
p
,

7132 
∑th
);

7134 
	`mg_¥ötf
(
be
, "Ho°: %s\r\n", 
addr
);

7135 
i
 = 0; i < 
MG_MAX_HTTP_HEADERS
 && 
hm
->
hódî_«mes
[i].
Àn
 > 0; i++) {

7136 
mg_°r
 
hn
 = 
hm
->
hódî_«mes
[
i
];

7137 
mg_°r
 
hv
 = 
hm
->
hódî_vÆues
[
i
];

7140 i‡(
	`mg_vˇ£cmp
(&
hn
, "Host") == 0) ;

7145 i‡(
	`mg_vˇ£cmp
(&
hn
, "Transfer-encoding") == 0 &&

7146 
	`mg_vˇ£cmp
(&
hv
, "chunked") == 0) {

7147 
	`mg_¥ötf
(
be
, "C⁄ã¡-Lígth: %" 
SIZE_T_FMT
 "\r\n", 
hm
->
body
.
Àn
);

7151 i‡(
	`mg_vˇ£cmp
(&
hn
, "Expect") == 0 &&

7152 
	`mg_vˇ£cmp
(&
hv
, "100-continue") == 0) {

7156 
	`mg_¥ötf
(
be
, "%.*s: %.*s\r\n", (Ë
hn
.
Àn
, hn.
p
, (Ë
hv
.len, hv.p);

7159 
	`mg_£nd
(
be
, "\r\n", 2);

7160 
	`mg_£nd
(
be
, 
hm
->
body
.
p
, hm->body.
Àn
);

7162 
˛ónup
:

7163 i‡(
puæ
 !
buæ
Ë
	`MG_FREE
(purl);

7164 
	}
}

7166 
	$mg_hâp_h™dÀ_f‹w¨dög
(
mg_c⁄√˘i⁄
 *
nc
,

7167 
hâp_mesßge
 *
hm
,

7168 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
) {

7169 c⁄° *
ªwrôes
 = 
›ts
->
uæ_ªwrôes
;

7170 
mg_°r
 
a
, 
b
;

7171 
mg_°r
 
p1
 = 
	`MG_MK_STR
("hâp://"), 
p2
 = MG_MK_STR("https://");

7173 (
ªwrôes
 = 
	`mg_√xt_comma_li°_íåy
‘ewrôes, &
a
, &
b
)Ë!
NULL
) {

7174 i‡(
	`mg_°∫cmp
(
a
, 
hm
->
uri
,á.
Àn
) == 0) {

7175 i‡(
	`mg_°∫cmp
(
b
, 
p1
,Ö1.
Àn
Ë=0 || mg_°∫cmp(b, 
p2
,Ö2.len) == 0) {

7176 
	`mg_hâp_ªvî£_¥oxy
(
nc
, 
hm
, 
a
, 
b
);

7183 
	}
}

7186 
MG_INTERNAL
 
	$mg_uri_to_loˇl_∑th
(
hâp_mesßge
 *
hm
,

7187 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
,

7188 **
loˇl_∑th
,

7189 
mg_°r
 *
ªmaödî
) {

7190 
ok
 = 1;

7191 c⁄° *
˝
 = 
hm
->
uri
.
p
, *
˝_íd
 = hm->uri.∞+ hm->uri.
Àn
;

7192 
mg_°r
 
roŸ
 = {
NULL
, 0};

7193 c⁄° *
fûe_uri_°¨t
 = 
˝
;

7194 *
loˇl_∑th
 = 
NULL
;

7195 
ªmaödî
->
p
 = 
NULL
;

7196 
ªmaödî
->
Àn
 = 0;

7200 #i‡
MG_ENABLE_HTTP_URL_REWRITES


7201 c⁄° *
ªwrôes
 = 
›ts
->
uæ_ªwrôes
;

7203 c⁄° *
ªwrôes
 = "";

7205 
mg_°r
 *
hh
 = 
	`mg_gë_hâp_hódî
(
hm
, "Host");

7206 
mg_°r
 
a
, 
b
;

7208 (
ªwrôes
 = 
	`mg_√xt_comma_li°_íåy
‘ewrôes, &
a
, &
b
)Ë!
NULL
) {

7209 i‡(
a
.
Àn
 > 1 &&á.
p
[0] == '@') {

7211 i‡(
hh
 !
NULL
 && hh->
Àn
 =
a
.len - 1 &&

7212 
	`mg_nˇ£cmp
(
a
.
p
 + 1, 
hh
->p,á.
Àn
 - 1) == 0) {

7213 
roŸ
 = 
b
;

7218 
m©ch_Àn
 = 
	`mg_m©ch_¥efix_n
(
a
, 
hm
->
uri
);

7219 i‡(
m©ch_Àn
 > 0) {

7220 
fûe_uri_°¨t
 = 
hm
->
uri
.
p
 + 
m©ch_Àn
;

7221 i‡(*
fûe_uri_°¨t
 ='/' || fûe_uri_°¨à=
˝_íd
) {

7223 } i‡(*(
fûe_uri_°¨t
 - 1) == '/') {

7225 
fûe_uri_°¨t
--;

7230 
roŸ
 = 
b
;

7236 i‡(
roŸ
.
p
 =
NULL
) {

7237 #i‡
MG_ENABLE_HTTP_WEBDAV


7238 i‡(
›ts
->
dav_documít_roŸ
 !
NULL
 && 
	`mg_is_dav_ªque°
(&
hm
->
mëhod
)) {

7239 
roŸ
.
p
 = 
›ts
->
dav_documít_roŸ
;

7240 
roŸ
.
Àn
 = 
	`°æí
(
›ts
->
dav_documít_roŸ
);

7244 
roŸ
.
p
 = 
›ts
->
documít_roŸ
;

7245 
roŸ
.
Àn
 = 
	`°æí
(
›ts
->
documít_roŸ
);

7248 
	`as£π
(
roŸ
.
p
 !
NULL
 &&ÑoŸ.
Àn
 > 0);

7252 c⁄° *
u
 = 
fûe_uri_°¨t
 + 1;

7253 *
Õ
 = (*Ë
	`MG_MALLOC
(
roŸ
.
Àn
 + 
hm
->
uri
.len + 1);

7254 *
Õ_íd
 = 
Õ
 + 
roŸ
.
Àn
 + 
hm
->
uri
.len + 1;

7255 *
p
 = 
Õ
, *
ps
;

7256 
exi°s
 = 1;

7257 i‡(
Õ
 =
NULL
) {

7258 
ok
 = 0;

7259 
out
;

7261 
	`mem˝y
(
p
, 
roŸ
.p,ÑoŸ.
Àn
);

7262 
p
 +
roŸ
.
Àn
;

7263 i‡(*(
p
 - 1Ë=
DIRSEP
)Ö--;

7264 *
p
 = '\0';

7265 
ps
 = 
p
;

7268 
u
 <
˝_íd
) {

7269 c⁄° *
√xt
 = 
u
;

7270 
mg_°r
 
comp⁄ít
;

7271 i‡(
exi°s
) {

7272 
cs_°©_t
 
°
;

7273 
exi°s
 = (
	`mg_°©
(
Õ
, &
°
) == 0);

7274 i‡(
exi°s
 && 
	`S_ISREG
(
°
.
°_mode
)) {

7277 i‡(*(
u
 - 1) == '/') u--;

7281 i‡(
u
 >
˝_íd
) ;

7282 
	`∑r£_uri_comp⁄ít
((c⁄° **Ë&
√xt
, 
˝_íd
, '/', &
comp⁄ít
);

7283 i‡(
comp⁄ít
.
Àn
 > 0) {

7284 
Àn
;

7285 
	`memmove
(
p
 + 1, 
comp⁄ít
.p, comp⁄ít.
Àn
);

7286 
Àn
 = 
	`mg_uæ_decode
(
p
 + 1, 
comp⁄ít
.Àn,Ö + 1, 
Õ_íd
 -Ö - 1, 0);

7287 i‡(
Àn
 <= 0) {

7288 
ok
 = 0;

7291 
comp⁄ít
.
p
 =Ö + 1;

7292 
comp⁄ít
.
Àn
 =Üen;

7293 i‡(
	`mg_vcmp
(&
comp⁄ít
, ".") == 0) {

7295 } i‡(
	`mg_vcmp
(&
comp⁄ít
, "..") == 0) {

7296 
p
 > 
ps
 && *∞!
DIRSEP
)Ö--;

7297 *
p
 = '\0';

7299 
size_t
 
i
;

7300 #ifde‡
_WIN32


7302 
wch¨_t
 
buf
[
MG_MAX_PATH
 * 2];

7303 i‡(
	`to_wch¨
(
comp⁄ít
.
p
, 
buf
, 
MG_MAX_PATH
) == 0) {

7304 
	`DBG
(("[%.*s] smñl†fu¬y", (Ë
comp⁄ít
.
Àn
, comp⁄ít.
p
));

7305 
ok
 = 0;

7309 *
p
++ = 
DIRSEP
;

7311 
i
 = 0; i < 
comp⁄ít
.
Àn
; i++, 
p
++) {

7312 i‡(*
p
 ='\0' || *∞=
DIRSEP


7313 #ifde‡
_WIN32


7316 *
p
 == '/'

7319 
ok
 = 0;

7325 
u
 = 
√xt
;

7327 i‡(
ok
) {

7328 *
loˇl_∑th
 = 
Õ
;

7329 i‡(
u
 > 
˝_íd
) u = cp_end;

7330 
ªmaödî
->
p
 = 
u
;

7331 
ªmaödî
->
Àn
 = 
˝_íd
 - 
u
;

7333 
	`MG_FREE
(
Õ
);

7337 
out
:

7338 
	`LOG
(
LL_DEBUG
,

7339 ("'%.*s' -> '%s' + '%.*s'", (Ë
hm
->
uri
.
Àn
, hm->uri.
p
,

7340 *
loˇl_∑th
 ? *loˇl_∑th : "", (Ë
ªmaödî
->
Àn
,Ñemaödî->
p
));

7341  
ok
;

7342 
	}
}

7344 
	$mg_gë_m⁄th_ödex
(c⁄° *
s
) {

7345 c⁄° *
m⁄th_«mes
[] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun",

7347 
size_t
 
i
;

7349 
i
 = 0; i < 
	`ARRAY_SIZE
(
m⁄th_«mes
); i++)

7350 i‡(!
	`°rcmp
(
s
, 
m⁄th_«mes
[
i
]))  () i;

7353 
	}
}

7355 
	$mg_num_À≠_yórs
(
yór
) {

7356  
yór
 / 4 - year / 100 + year / 400;

7357 
	}
}

7360 
MG_INTERNAL
 
time_t
 
	$mg_∑r£_d©e_°rög
(c⁄° *
d©ëime
) {

7361 c⁄° 
days_bef‹e_m⁄th
[] = {

7363 
m⁄th_°r
[32];

7364 
£c⁄d
, 
möuã
, 
hour
, 
day
, 
m⁄th
, 
yór
, 
À≠_days
, 
days
;

7365 
time_t
 
ªsu…
 = (time_t) 0;

7367 i‡(((
	`ssˇnf
(
d©ëime
, "%d/%3s/%d %d:%d:%d", &
day
, 
m⁄th_°r
, &
yór
, &
hour
,

7368 &
möuã
, &
£c⁄d
) == 6) ||

7369 (
	`ssˇnf
(
d©ëime
, "%d %3†%d %d:%d:%d", &
day
, 
m⁄th_°r
, &
yór
, &
hour
,

7370 &
möuã
, &
£c⁄d
) == 6) ||

7371 (
	`ssˇnf
(
d©ëime
, "%*3s, %d %3†%d %d:%d:%d", &
day
, 
m⁄th_°r
, &
yór
,

7372 &
hour
, &
möuã
, &
£c⁄d
) == 6) ||

7373 (
	`ssˇnf
(
d©ëime
, "%d-%3s-%d %d:%d:%d", &
day
, 
m⁄th_°r
, &
yór
, &
hour
,

7374 &
möuã
, &
£c⁄d
) == 6)) &&

7375 
yór
 > 1970 && (
m⁄th
 = 
	`mg_gë_m⁄th_ödex
(
m⁄th_°r
)) != -1) {

7376 
À≠_days
 = 
	`mg_num_À≠_yórs
(
yór
) - mg_num_leap_years(1970);

7377 
yór
 -= 1970;

7378 
days
 = 
yór
 * 365 + 
days_bef‹e_m⁄th
[
m⁄th
] + (
day
 - 1Ë+ 
À≠_days
;

7379 
ªsu…
 = 
days
 * 24 * 3600 + 
hour
 * 3600 + 
möuã
 * 60 + 
£c⁄d
;

7382  
ªsu…
;

7383 
	}
}

7385 
MG_INTERNAL
 
	$mg_is_nŸ_modifõd
(
hâp_mesßge
 *
hm
, 
cs_°©_t
 *
°
) {

7386 
mg_°r
 *
hdr
;

7387 i‡((
hdr
 = 
	`mg_gë_hâp_hódî
(
hm
, "If-N⁄e-M©ch")Ë!
NULL
) {

7388 
ëag
[64];

7389 
	`mg_hâp_c⁄°ru˘_ëag
(
ëag
, ”èg), 
°
);

7390  
	`mg_vˇ£cmp
(
hdr
, 
ëag
) == 0;

7391 } i‡((
hdr
 = 
	`mg_gë_hâp_hódî
(
hm
, "If-Modifõd-Sö˚")Ë!
NULL
) {

7392  
°
->
°_mtime
 <
	`mg_∑r£_d©e_°rög
(
hdr
->
p
);

7396 
	}
}

7398 
	$mg_hâp_£nd_dige°_auth_ªque°
(
mg_c⁄√˘i⁄
 *
c
,

7399 c⁄° *
domaö
) {

7400 
	`mg_¥ötf
(
c
,

7405 
domaö
, (Ë
	`mg_time
());

7406 
	}
}

7408 
	$mg_hâp_£nd_›ti⁄s
(
mg_c⁄√˘i⁄
 *
nc
) {

7409 
	`mg_¥ötf
(
nc
, "%s",

7411 #i‡
MG_ENABLE_HTTP_WEBDAV


7415 
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

7416 
	}
}

7418 
	$mg_is_¸óti⁄_ªque°
(c⁄° 
hâp_mesßge
 *
hm
) {

7419  
	`mg_vcmp
(&
hm
->
mëhod
, "MKCOL") == 0 || mg_vcmp(&hm->method, "PUT") == 0;

7420 
	}
}

7422 
MG_INTERNAL
 
	$mg_£nd_hâp_fûe
(
mg_c⁄√˘i⁄
 *
nc
, *
∑th
,

7423 c⁄° 
mg_°r
 *
∑th_öfo
,

7424 
hâp_mesßge
 *
hm
,

7425 
mg_£rve_hâp_›ts
 *
›ts
) {

7426 
exi°s
, 
is_dúe˘‹y
, 
is_cgi
;

7427 #i‡
MG_ENABLE_HTTP_WEBDAV


7428 
is_dav
 = 
	`mg_is_dav_ªque°
(&
hm
->
mëhod
);

7430 
is_dav
 = 0;

7432 *
ödex_fûe
 = 
NULL
;

7433 
cs_°©_t
 
°
;

7435 
exi°s
 = (
	`mg_°©
(
∑th
, &
°
) == 0);

7436 
is_dúe˘‹y
 = 
exi°s
 && 
	`S_ISDIR
(
°
.
°_mode
);

7438 i‡(
is_dúe˘‹y
)

7439 
	`mg_föd_ödex_fûe
(
∑th
, 
›ts
->
ödex_fûes
, &
ödex_fûe
, &
°
);

7441 
is_cgi
 =

7442 (
	`mg_m©ch_¥efix
(
›ts
->
cgi_fûe_∑âîn
, 
	`°æí
(opts->cgi_file_pattern),

7443 
ödex_fûe
 ? index_fûê: 
∑th
) > 0);

7445 
	`LOG
(
LL_DEBUG
,

7446 ("%∞%.*†[%s]Éxi°s=%d is_dú=%d is_dav=%d is_cgi=%d index=%s", 
nc
,

7447 (Ë
hm
->
mëhod
.
Àn
, hm->mëhod.
p
, 
∑th
, 
exi°s
, 
is_dúe˘‹y
, 
is_dav
,

7448 
is_cgi
, 
ödex_fûe
 ? index_file : ""));

7450 i‡(
is_dúe˘‹y
 && 
hm
->
uri
.
p
[hm->uri.
Àn
 - 1] !'/' && !
is_dav
) {

7451 
	`mg_¥ötf
(
nc
,

7454 (Ë
hm
->
uri
.
Àn
, hm->uri.
p
);

7455 
	`MG_FREE
(
ödex_fûe
);

7460 i‡(
∑th_öfo
->
Àn
 > 0 && !
is_cgi
) {

7461 
	`mg_hâp_£nd_îr‹
(
nc
, 501, 
NULL
);

7462 
	`MG_FREE
(
ödex_fûe
);

7466 i‡(
is_dav
 && 
›ts
->
dav_documít_roŸ
 =
NULL
) {

7467 
	`mg_hâp_£nd_îr‹
(
nc
, 501, 
NULL
);

7468 } i‡(!
	`mg_is_auth‹ized
(
hm
, 
∑th
, 
is_dúe˘‹y
, 
›ts
->
auth_domaö
,

7469 
›ts
->
globÆ_auth_fûe
, 1) ||

7470 !
	`mg_is_auth‹ized
(
hm
, 
∑th
, 
is_dúe˘‹y
, 
›ts
->
auth_domaö
,

7471 
›ts
->
≥r_dúe˘‹y_auth_fûe
, 0)) {

7472 
	`mg_hâp_£nd_dige°_auth_ªque°
(
nc
, 
›ts
->
auth_domaö
);

7473 } i‡(
is_cgi
) {

7474 #i‡
MG_ENABLE_HTTP_CGI


7475 
	`mg_h™dÀ_cgi
(
nc
, 
ödex_fûe
 ? index_fûê: 
∑th
, 
∑th_öfo
, 
hm
, 
›ts
);

7477 
	`mg_hâp_£nd_îr‹
(
nc
, 501, 
NULL
);

7479 } i‡((!
exi°s
 ||

7480 
	`mg_is_fûe_hiddí
(
∑th
, 
›ts
, 0 )) &&

7481 !
	`mg_is_¸óti⁄_ªque°
(
hm
)) {

7482 
	`mg_hâp_£nd_îr‹
(
nc
, 404, 
NULL
);

7483 #i‡
MG_ENABLE_HTTP_WEBDAV


7484 } i‡(!
	`mg_vcmp
(&
hm
->
mëhod
, "PROPFIND")) {

7485 
	`mg_h™dÀ_¥›föd
(
nc
, 
∑th
, &
°
, 
hm
, 
›ts
);

7486 #i‡!
MG_DISABLE_DAV_AUTH


7487 } i‡(
is_dav
 &&

7488 (
›ts
->
dav_auth_fûe
 =
NULL
 ||

7489 (
	`°rcmp
(
›ts
->
dav_auth_fûe
, "-") != 0 &&

7490 !
	`mg_is_auth‹ized
(
hm
, 
∑th
, 
is_dúe˘‹y
, 
›ts
->
auth_domaö
,

7491 
›ts
->
dav_auth_fûe
, 1)))) {

7492 
	`mg_hâp_£nd_dige°_auth_ªque°
(
nc
, 
›ts
->
auth_domaö
);

7494 } i‡(!
	`mg_vcmp
(&
hm
->
mëhod
, "MKCOL")) {

7495 
	`mg_h™dÀ_mkcﬁ
(
nc
, 
∑th
, 
hm
);

7496 } i‡(!
	`mg_vcmp
(&
hm
->
mëhod
, "DELETE")) {

7497 
	`mg_h™dÀ_dñëe
(
nc
, 
›ts
, 
∑th
);

7498 } i‡(!
	`mg_vcmp
(&
hm
->
mëhod
, "PUT")) {

7499 
	`mg_h™dÀ_put
(
nc
, 
∑th
, 
hm
);

7500 } i‡(!
	`mg_vcmp
(&
hm
->
mëhod
, "MOVE")) {

7501 
	`mg_h™dÀ_move
(
nc
, 
›ts
, 
∑th
, 
hm
);

7502 #i‡
MG_ENABLE_FAKE_DAVLOCK


7503 } i‡(!
	`mg_vcmp
(&
hm
->
mëhod
, "LOCK")) {

7504 
	`mg_h™dÀ_lock
(
nc
, 
∑th
);

7507 } i‡(!
	`mg_vcmp
(&
hm
->
mëhod
, "OPTIONS")) {

7508 
	`mg_hâp_£nd_›ti⁄s
(
nc
);

7509 } i‡(
is_dúe˘‹y
 && 
ödex_fûe
 =
NULL
) {

7510 #i‡
MG_ENABLE_DIRECTORY_LISTING


7511 i‡(
	`°rcmp
(
›ts
->
íabÀ_dúe˘‹y_li°ög
, "yes") == 0) {

7512 
	`mg_£nd_dúe˘‹y_li°ög
(
nc
, 
∑th
, 
hm
, 
›ts
);

7514 
	`mg_hâp_£nd_îr‹
(
nc
, 403, 
NULL
);

7517 
	`mg_hâp_£nd_îr‹
(
nc
, 501, 
NULL
);

7519 } i‡(
	`mg_is_nŸ_modifõd
(
hm
, &
°
)) {

7520 
	`mg_hâp_£nd_îr‹
(
nc
, 304, "Not Modified");

7522 
	`mg_hâp_£rve_fûe2
(
nc
, 
ödex_fûe
 ? index_fûê: 
∑th
, 
hm
, 
›ts
);

7524 
	`MG_FREE
(
ödex_fûe
);

7525 
	}
}

7527 
	$mg_£rve_hâp
(
mg_c⁄√˘i⁄
 *
nc
, 
hâp_mesßge
 *
hm
,

7528 
mg_£rve_hâp_›ts
 
›ts
) {

7529 *
∑th
 = 
NULL
;

7530 
mg_°r
 *
hdr
, 
∑th_öfo
;

7531 
uöt32_t
 
ªmŸe_ù
 = 
	`¡ohl
(*(uöt32_à*Ë&
nc
->
ß
.
sö
.
sö_addr
);

7533 i‡(
	`mg_check_ù_a˛
(
›ts
.
ù_a˛
, 
ªmŸe_ù
) != 1) {

7535 
	`mg_hâp_£nd_îr‹
(
nc
, 403, 
NULL
);

7536 
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

7540 #i‡
MG_ENABLE_HTTP_URL_REWRITES


7541 i‡(
	`mg_hâp_h™dÀ_f‹w¨dög
(
nc
, 
hm
, &
›ts
)) {

7545 i‡(
	`mg_hâp_£nd_p‹t_ba£d_ªdúe˘
(
nc
, 
hm
, &
›ts
)) {

7550 i‡(
›ts
.
documít_roŸ
 =
NULL
) {

7551 
›ts
.
documít_roŸ
 = ".";

7553 i‡(
›ts
.
≥r_dúe˘‹y_auth_fûe
 =
NULL
) {

7554 
›ts
.
≥r_dúe˘‹y_auth_fûe
 = ".htpasswd";

7556 i‡(
›ts
.
íabÀ_dúe˘‹y_li°ög
 =
NULL
) {

7557 
›ts
.
íabÀ_dúe˘‹y_li°ög
 = "yes";

7559 i‡(
›ts
.
cgi_fûe_∑âîn
 =
NULL
) {

7560 
›ts
.
cgi_fûe_∑âîn
 = "**.cgi$|**.php$";

7562 i‡(
›ts
.
ssi_∑âîn
 =
NULL
) {

7563 
›ts
.
ssi_∑âîn
 = "**.shtml$|**.shtm$";

7565 i‡(
›ts
.
ödex_fûes
 =
NULL
) {

7566 
›ts
.
ödex_fûes
 = "index.html,index.htm,index.shtml,index.cgi,index.php";

7569 i‡(!
	`mg_n‹mÆize_uri_∑th
(&
hm
->
uri
, &hm->uri)) {

7570 
	`mg_hâp_£nd_îr‹
(
nc
, 400, 
NULL
);

7573 i‡(
	`mg_uri_to_loˇl_∑th
(
hm
, &
›ts
, &
∑th
, &
∑th_öfo
) == 0) {

7574 
	`mg_hâp_£nd_îr‹
(
nc
, 404, 
NULL
);

7577 
	`mg_£nd_hâp_fûe
(
nc
, 
∑th
, &
∑th_öfo
, 
hm
, &
›ts
);

7579 
	`MG_FREE
(
∑th
);

7580 
∑th
 = 
NULL
;

7583 i‡(
	`mg_vcmp
(&
hm
->
¥Ÿo
, "HTTP/1.1") != 0 ||

7584 ((
hdr
 = 
	`mg_gë_hâp_hódî
(
hm
, "C⁄√˘i⁄")Ë!
NULL
 &&

7585 
	`mg_vcmp
(
hdr
, "keep-alive") != 0)) {

7587 
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

7590 
	}
}

7592 #i‡
MG_ENABLE_HTTP_STREAMING_MULTIPART


7593 
	$mg_fûe_u∂ﬂd_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
, *
ev_d©a
,

7594 
mg_fu_‚ame_‚
 
loˇl_«me_‚
) {

7595 
ev
) {

7596 
MG_EV_HTTP_PART_BEGIN
: {

7597 
mg_hâp_mu…ù¨t_∑π
 *
mp
 =

7598 (
mg_hâp_mu…ù¨t_∑π
 *Ë
ev_d©a
;

7599 
fûe_u∂ﬂd_°©e
 *
fus
 =

7600 (
fûe_u∂ﬂd_°©e
 *Ë
	`ˇŒoc
(1, (*
fus
));

7601 
mg_°r
 
l‚
 = 
	`loˇl_«me_‚
(
nc
, 
	`mg_mk_°r
(
mp
->
fûe_«me
));

7602 
mp
->
u£r_d©a
 = 
NULL
;

7603 i‡(
l‚
.
p
 =
NULL
 ||Ü‚.
Àn
 == 0) {

7604 
	`LOG
(
LL_ERROR
, ("%∞NŸáŒowedÅÿu∂ﬂd %s", 
nc
, 
mp
->
fûe_«me
));

7605 
	`mg_¥ötf
(
nc
,

7610 
mp
->
fûe_«me
);

7611 
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

7614 
fus
->
l‚
 = (*Ë
	`mÆloc
÷‚.
Àn
 + 1);

7615 
	`mem˝y
(
fus
->
l‚
,Ü‚.
p
,Ü‚.
Àn
);

7616 
fus
->
l‚
[l‚.
Àn
] = '\0';

7617 i‡(
l‚
.
p
 !
mp
->
fûe_«me
Ë
	`‰ì
((*)Üfn.p);

7618 
	`LOG
(
LL_DEBUG
,

7619 ("%∞Re˚ivög fûê%†-> %s", 
nc
, 
mp
->
fûe_«me
, 
fus
->
l‚
));

7620 
fus
->
Â
 = 
	`mg_f›í
(fus->
l‚
, "w");

7621 i‡(
fus
->
Â
 =
NULL
) {

7622 
	`mg_¥ötf
(
nc
,

7626 
	`LOG
(
LL_ERROR
, ("FaûedÅÿ›í %s: %d\n", 
fus
->
l‚
, 
	`mg_gë_î∫o
()));

7627 
	`mg_¥ötf
(
nc
, "FaûedÅÿ›í %s: %d\n", 
fus
->
l‚
, 
	`mg_gë_î∫o
());

7632 
mp
->
u£r_d©a
 = (*Ë
fus
;

7635 
MG_EV_HTTP_PART_DATA
: {

7636 
mg_hâp_mu…ù¨t_∑π
 *
mp
 =

7637 (
mg_hâp_mu…ù¨t_∑π
 *Ë
ev_d©a
;

7638 
fûe_u∂ﬂd_°©e
 *
fus
 =

7639 (
fûe_u∂ﬂd_°©e
 *Ë
mp
->
u£r_d©a
;

7640 i‡(
fus
 =
NULL
 || fus->
Â
 == NULL) ;

7641 i‡(
	`fwrôe
(
mp
->
d©a
.
p
, 1, mp->d©a.
Àn
, 
fus
->
Â
) != mp->data.len) {

7642 
	`LOG
(
LL_ERROR
, ("FaûedÅÿwrôêtÿ%s: %d, wrŸê%d", 
fus
->
l‚
,

7643 
	`mg_gë_î∫o
(), (Ë
fus
->
num_ªcd
));

7644 i‡(
	`mg_gë_î∫o
(Ë=
ENOSPC


7645 #ifde‡
SPIFFS_ERR_FULL


7646 || 
	`mg_gë_î∫o
(Ë=
SPIFFS_ERR_FULL


7649 
	`mg_¥ötf
(
nc
,

7653 
	`mg_¥ötf
(
nc
, "FailedÅo writeÅo %s:Ço spaceÜeft; wrote %d\r\n",

7654 
fus
->
l‚
, (Ëfus->
num_ªcd
);

7656 
	`mg_¥ötf
(
nc
,

7660 
	`mg_¥ötf
(
nc
, "FaûedÅÿwrôêtÿ%s: %d, wrŸê%d", 
mp
->
fûe_«me
,

7661 
	`mg_gë_î∫o
(), (Ë
fus
->
num_ªcd
);

7663 
	`f˛o£
(
fus
->
Â
);

7664 
	`ªmove
(
fus
->
l‚
);

7665 
fus
->
Â
 = 
NULL
;

7671 
fus
->
num_ªcd
 +
mp
->
d©a
.
Àn
;

7672 
	`LOG
(
LL_DEBUG
, ("%∞ªc'd %d byãs, %dÅŸÆ", 
nc
, (Ë
mp
->
d©a
.
Àn
,

7673 (Ë
fus
->
num_ªcd
));

7676 
MG_EV_HTTP_PART_END
: {

7677 
mg_hâp_mu…ù¨t_∑π
 *
mp
 =

7678 (
mg_hâp_mu…ù¨t_∑π
 *Ë
ev_d©a
;

7679 
fûe_u∂ﬂd_°©e
 *
fus
 =

7680 (
fûe_u∂ﬂd_°©e
 *Ë
mp
->
u£r_d©a
;

7681 i‡(
fus
 =
NULL
) ;

7682 i‡(
mp
->
°©us
 >0 && 
fus
->
Â
 !
NULL
) {

7683 
	`LOG
(
LL_DEBUG
, ("%∞U∂ﬂded %†(%s), %d byãs", 
nc
, 
mp
->
fûe_«me
,

7684 
fus
->
l‚
, (Ëfus->
num_ªcd
));

7685 
	`mg_¥ötf
(
nc
,

7690 
mp
->
fûe_«me
, (Ë
fus
->
num_ªcd
);

7692 
	`LOG
(
LL_ERROR
, ("FaûedÅÿ°‹ê%†(%s)", 
mp
->
fûe_«me
, 
fus
->
l‚
));

7698 i‡(
fus
->
Â
 !
NULL
Ë
	`f˛o£
(fus->fp);

7699 
	`‰ì
(
fus
->
l‚
);

7700 
	`‰ì
(
fus
);

7701 
mp
->
u£r_d©a
 = 
NULL
;

7702 
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

7706 
	}
}

7712 
MG_INTERNAL
 
	$mg_hâp_comm⁄_uæ_∑r£
(c⁄° *
uæ
, c⁄° *
schema
,

7713 c⁄° *
schema_és
, *
u£_s¶
,

7714 **
u£r
, **
∑ss
, **
addr
,

7715 *
p‹t_i
, c⁄° **
∑th
) {

7716 
addr_Àn
 = 0;

7717 
auth_£p_pos
 = -1;

7718 
u£r_£p_pos
 = -1;

7719 
p‹t_pos
 = -1;

7720 (Ë
u£r
;

7721 (Ë
∑ss
;

7723 i‡(
	`°∫cmp
(
uæ
, 
schema
, 
	`°æí
(schema)) == 0) {

7724 
uæ
 +
	`°æí
(
schema
);

7725 } i‡(
	`°∫cmp
(
uæ
, 
schema_és
, 
	`°æí
(schema_tls)) == 0) {

7726 
uæ
 +
	`°æí
(
schema_és
);

7727 *
u£_s¶
 = 1;

7728 #i‡!
MG_ENABLE_SSL


7733 *
uæ
 != '\0') {

7734 *
addr
 = (*Ë
	`MG_REALLOC
(*addr, 
addr_Àn
 + 6 );

7735 i‡(*
addr
 =
NULL
) {

7736 
	`DBG
(("OOM"));

7739 i‡(*
uæ
 == '/') {

7742 i‡(*
uæ
 == '@') {

7743 
auth_£p_pos
 = 
addr_Àn
;

7744 
u£r_£p_pos
 = 
p‹t_pos
;

7745 
p‹t_pos
 = -1;

7747 i‡(*
uæ
 =':'Ë
p‹t_pos
 = 
addr_Àn
;

7748 (*
addr
)[
addr_Àn
++] = *
uæ
;

7749 (*
addr
)[
addr_Àn
] = '\0';

7750 
uæ
++;

7753 i‡(
addr_Àn
 =0Ë
˛ónup
;

7754 i‡(
p‹t_pos
 < 0) {

7755 *
p‹t_i
 = 
addr_Àn
;

7756 
addr_Àn
 +
	`•rötf
(*
addr
 +áddr_Àn, ":%d", *
u£_s¶
 ? 443 : 80);

7758 *
p‹t_i
 = -1;

7761 i‡(*
∑th
 =
NULL
Ë*∑th = 
uæ
;

7763 i‡(**
∑th
 == '\0') *path = "/";

7765 i‡(
u£r
 !
NULL
 && 
∑ss
 != NULL) {

7766 i‡(
auth_£p_pos
 == -1) {

7767 *
u£r
 = 
NULL
;

7768 *
∑ss
 = 
NULL
;

7771 *
u£r
 = (*Ë
	`MG_MALLOC
(
u£r_£p_pos
 + 1);

7772 
	`mem˝y
(*
u£r
, *
addr
, 
u£r_£p_pos
);

7773 (*
u£r
)[
u£r_£p_pos
] = '\0';

7775 *
∑ss
 = (*Ë
	`MG_MALLOC
(
auth_£p_pos
 - 
u£r_£p_pos
 - 1 + 1);

7776 
	`mem˝y
(*
∑ss
, *
addr
 + 
u£r_£p_pos
 + 1, 
auth_£p_pos
 - user_sep_pos - 1);

7777 (*
∑ss
)[
auth_£p_pos
 - 
u£r_£p_pos
 - 1] = '\0';

7780 
	`memmove
(*
addr
, *add∏+ 
auth_£p_pos
 + 1, 
addr_Àn
 -áuth_sep_pos);

7784 
	`DBG
(("%†%s", *
addr
, *
∑th
));

7788 
˛ónup
:

7789 
	`MG_FREE
(*
addr
);

7791 
	}
}

7793 
mg_c⁄√˘i⁄
 *
	$mg_c⁄√˘_hâp_ba£
(

7794 
mg_mgr
 *
mgr
, 
mg_evít_h™dÀr_t
 
ev_h™dÀr
,

7795 
mg_c⁄√˘_›ts
 
›ts
, c⁄° *
schema
, c⁄° *
schema_s¶
,

7796 c⁄° *
uæ
, c⁄° **
∑th
, **
u£r
, **
∑ss
, **
addr
) {

7797 
mg_c⁄√˘i⁄
 *
nc
 = 
NULL
;

7798 
p‹t_i
 = -1;

7799 
u£_s¶
 = 0;

7801 i‡(
	`mg_hâp_comm⁄_uæ_∑r£
(
uæ
, 
schema
, 
schema_s¶
, &
u£_s¶
, 
u£r
, 
∑ss
,

7802 
addr
, &
p‹t_i
, 
∑th
) < 0) {

7803 
	`MG_SET_PTRPTR
(
›ts
.
îr‹_°rög
, "cannotÖarse url");

7804  
NULL
;

7807 
	`LOG
(
LL_DEBUG
, ("%†u£_s¶? %d", 
uæ
, 
u£_s¶
));

7808 i‡(
u£_s¶
) {

7809 #i‡
MG_ENABLE_SSL


7815 i‡(
›ts
.
s¶_ˇ_˚π
 =
NULL
) {

7816 
›ts
.
s¶_ˇ_˚π
 = "*";

7819 
	`MG_SET_PTRPTR
(
›ts
.
îr‹_°rög
, "ssl is disabled");

7820 i‡(
u£r
 !
NULL
Ë
	`MG_FREE
(*user);

7821 i‡(
∑ss
 !
NULL
Ë
	`MG_FREE
(*pass);

7822 
	`MG_FREE
(*
addr
);

7823  
NULL
;

7827 i‡((
nc
 = 
	`mg_c⁄√˘_›t
(
mgr
, *
addr
, 
ev_h™dÀr
, 
›ts
)Ë!
NULL
) {

7828 
	`mg_£t_¥Ÿocﬁ_hâp_websockë
(
nc
);

7830 i‡(
p‹t_i
 >0Ë(*
addr
)[port_i] = '\0';

7833  
nc
;

7834 
	}
}

7836 
mg_c⁄√˘i⁄
 *
	$mg_c⁄√˘_hâp_›t
(
mg_mgr
 *
mgr
,

7837 
mg_evít_h™dÀr_t
 
ev_h™dÀr
,

7838 
mg_c⁄√˘_›ts
 
›ts
,

7839 c⁄° *
uæ
,

7840 c⁄° *
exåa_hódîs
,

7841 c⁄° *
po°_d©a
) {

7842 *
u£r
 = 
NULL
, *
∑ss
 = NULL, *
addr
 = NULL;

7843 c⁄° *
∑th
 = 
NULL
;

7844 
mbuf
 
auth
;

7845 
mg_c⁄√˘i⁄
 *
nc
 =

7846 
	`mg_c⁄√˘_hâp_ba£
(
mgr
, 
ev_h™dÀr
, 
›ts
, "hâp://", "hâps://", 
uæ
,

7847 &
∑th
, &
u£r
, &
∑ss
, &
addr
);

7849 i‡(
nc
 =
NULL
) {

7850  
NULL
;

7853 
	`mbuf_öô
(&
auth
, 0);

7854 i‡(
u£r
 !
NULL
) {

7855 
	`mg_basic_auth_hódî
(
u£r
, 
∑ss
, &
auth
);

7858 
	`mg_¥ötf
(
nc
, "%†%†HTTP/1.1\r\nHo°: %s\r\nC⁄ã¡-Lígth: %" 
SIZE_T_FMT


7860 
po°_d©a
 =
NULL
 ? "GET" : "POST", 
∑th
, 
addr
,

7861 
po°_d©a
 =
NULL
 ? 0 : 
	`°æí
’o°_d©a), (Ë
auth
.
Àn
,

7862 (
auth
.
buf
 =
NULL
 ? "" :áuth.buf),

7863 
exåa_hódîs
 =
NULL
 ? "" :Éxtra_headers,

7864 
po°_d©a
 =
NULL
 ? "" :Öost_data);

7866 
	`mbuf_‰ì
(&
auth
);

7867 
	`MG_FREE
(
u£r
);

7868 
	`MG_FREE
(
∑ss
);

7869 
	`MG_FREE
(
addr
);

7870  
nc
;

7871 
	}
}

7873 
mg_c⁄√˘i⁄
 *
	$mg_c⁄√˘_hâp
(
mg_mgr
 *
mgr
,

7874 
mg_evít_h™dÀr_t
 
ev_h™dÀr
,

7875 c⁄° *
uæ
,

7876 c⁄° *
exåa_hódîs
,

7877 c⁄° *
po°_d©a
) {

7878 
mg_c⁄√˘_›ts
 
›ts
;

7879 
	`mem£t
(&
›ts
, 0, (opts));

7880  
	`mg_c⁄√˘_hâp_›t
(
mgr
, 
ev_h™dÀr
, 
›ts
, 
uæ
, 
exåa_hódîs
,

7881 
po°_d©a
);

7882 
	}
}

7884 
size_t
 
	$mg_∑r£_mu…ù¨t
(c⁄° *
buf
, 
size_t
 
buf_Àn
, *
v¨_«me
,

7885 
size_t
 
v¨_«me_Àn
, *
fûe_«me
,

7886 
size_t
 
fûe_«me_Àn
, c⁄° **
d©a
,

7887 
size_t
 *
d©a_Àn
) {

7888 c⁄° 
cd
[] = "Content-Disposition: ";

7889 
size_t
 
hl
, 
bl
, 
n
, 
Œ
, 
pos
, 
cdl
 = (
cd
) - 1;

7891 i‡(
buf
 =
NULL
 || 
buf_Àn
 <= 0)  0;

7892 i‡((
hl
 = 
	`mg_hâp_gë_ªque°_Àn
(
buf
, 
buf_Àn
)) <= 0)  0;

7893 i‡(
buf
[0] != '-' || buf[1] != '-' || buf[2] == '\n')  0;

7896 
bl
 = 
	`mg_gë_löe_Àn
(
buf
, 
buf_Àn
);

7899 
v¨_«me
[0] = 
fûe_«me
[0] = '\0';

7900 
n
 = 
bl
; (
Œ
 = 
	`mg_gë_löe_Àn
(
buf
 +Ç, 
hl
 -Ç)) > 0;Ç +=Ül) {

7901 i‡(
	`mg_nˇ£cmp
(
cd
, 
buf
 + 
n
, 
cdl
) == 0) {

7902 
mg_°r
 
hódî
;

7903 
hódî
.
p
 = 
buf
 + 
n
 + 
cdl
;

7904 
hódî
.
Àn
 = 
Œ
 - (
cdl
 + 2);

7905 
	`mg_hâp_∑r£_hódî
(&
hódî
, "«me", 
v¨_«me
, 
v¨_«me_Àn
);

7906 
	`mg_hâp_∑r£_hódî
(&
hódî
, "fûíame", 
fûe_«me
, 
fûe_«me_Àn
);

7911 
pos
 = 
hl
;Öo†+ (
bl
 - 2Ë< 
buf_Àn
;Öos++) {

7912 i‡(
buf
[
pos
] ='-' && !
	`°∫cmp
(buf, &buf[pos], 
bl
 - 2)) {

7913 i‡(
d©a_Àn
 !
NULL
Ë*d©a_À¿(
pos
 - 2Ë- 
hl
;

7914 i‡(
d©a
 !
NULL
Ë*d©®
buf
 + 
hl
;

7915  
pos
;

7920 
	}
}

7922 
	$mg_ªgi°î_hâp_ídpoöt
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
uri_∑th
,

7923 
mg_evít_h™dÀr_t
 
h™dÀr
) {

7924 
mg_hâp_¥Ÿo_d©a
 *
pd
 = 
NULL
;

7925 
mg_hâp_ídpoöt
 *
√w_ï
 = 
NULL
;

7927 i‡(
nc
 =
NULL
) ;

7928 
√w_ï
 = (
mg_hâp_ídpoöt
 *Ë
	`ˇŒoc
(1, (*new_ep));

7929 i‡(
√w_ï
 =
NULL
) ;

7931 
pd
 = 
	`mg_hâp_gë_¥Ÿo_d©a
(
nc
);

7932 
√w_ï
->
«me
 = 
	`°rdup
(
uri_∑th
);

7933 
√w_ï
->
«me_Àn
 = 
	`°æí
“ew_ï->
«me
);

7934 
√w_ï
->
h™dÀr
 = handler;

7935 
√w_ï
->
√xt
 = 
pd
->
ídpoöts
;

7936 
pd
->
ídpoöts
 = 
√w_ï
;

7937 
	}
}

7940 #ifde‡
MG_MODULE_LINES


7948 #i‡
MG_ENABLE_HTTP
 && 
MG_ENABLE_HTTP_CGI


7950 #i‚de‡
MG_MAX_CGI_ENVIR_VARS


7951 
	#MG_MAX_CGI_ENVIR_VARS
 64

	)

7954 #i‚de‡
MG_ENV_EXPORT_TO_CGI


7955 
	#MG_ENV_EXPORT_TO_CGI
 "MONGOOSE_CGI"

	)

7968 
	smg_cgi_ív_block
 {

7969 
mg_c⁄√˘i⁄
 *
	mnc
;

7970 
	mbuf
[
MG_CGI_ENVIRONMENT_SIZE
];

7971 c⁄° *
	mv¨s
[
MG_MAX_CGI_ENVIR_VARS
];

7972 
	mÀn
;

7973 
	mnv¨s
;

7976 #ifde‡
_WIN32


7977 
	smg_thªad∑øm
 {

7978 
sock_t
 
	ms
;

7979 
HANDLE
 
	mhPùe
;

7982 
	$mg_waô_u¡û_ªady
(
sock_t
 
sock
, 
f‹_ªad
) {

7983 
fd_£t
 
£t
;

7984 
	`FD_ZERO
(&
£t
);

7985 
	`FD_SET
(
sock
, &
£t
);

7986  
	`£À˘
(
sock
 + 1, 
f‹_ªad
 ? &
£t
 : 0, for_read ? 0 : &set, 0, 0) == 1;

7987 
	}
}

7989 *
	$mg_push_to_°dö
(*
¨g
) {

7990 
mg_thªad∑øm
 *
ç
 = (mg_thªad∑øm *Ë
¨g
;

7991 
n
, 
£¡
, 
°›
 = 0;

7992 
DWORD
 
k
;

7993 
buf
[
BUFSIZ
];

7995 !
°›
 && 
	`mg_waô_u¡û_ªady
(
ç
->
s
, 1) &&

7996 (
n
 = 
	`ªcv
(
ç
->
s
, 
buf
, (buf), 0)) > 0) {

7997 i‡(
n
 =-1 && 
	`GëLa°Eº‹
(Ë=
WSAEWOULDBLOCK
) ;

7998 
£¡
 = 0; !
°›
 && síà< 
n
; síà+
k
) {

7999 i‡(!
	`WrôeFûe
(
ç
->
hPùe
, 
buf
 + 
£¡
, 
n
 - sít, &
k
, 0)Ë
°›
 = 1;

8002 
	`DBG
(("%s", "FORWARED EVERYTHING TO CGI"));

8003 
	`Clo£H™dÀ
(
ç
->
hPùe
);

8004 
	`MG_FREE
(
ç
);

8005  
NULL
;

8006 
	}
}

8008 *
	$mg_puŒ_‰om_°dout
(*
¨g
) {

8009 
mg_thªad∑øm
 *
ç
 = (mg_thªad∑øm *Ë
¨g
;

8010 
k
 = 0, 
°›
 = 0;

8011 
DWORD
 
n
, 
£¡
;

8012 
buf
[
BUFSIZ
];

8014 !
°›
 && 
	`RódFûe
(
ç
->
hPùe
, 
buf
, (buf), &
n
, 
NULL
)) {

8015 
£¡
 = 0; !
°›
 && síà< 
n
; síà+
k
) {

8016 i‡(
	`mg_waô_u¡û_ªady
(
ç
->
s
, 0) &&

8017 (
k
 = 
	`£nd
(
ç
->
s
, 
buf
 + 
£¡
, 
n
 - sent, 0)) <= 0)

8018 
°›
 = 1;

8021 
	`DBG
(("%s", "EOF FROM CGI"));

8022 
	`Clo£H™dÀ
(
ç
->
hPùe
);

8023 
	`shutdown
(
ç
->
s
, 2);

8024 
	`˛o£sockë
(
ç
->
s
);

8025 
	`MG_FREE
(
ç
);

8026  
NULL
;

8027 
	}
}

8029 
mg_•awn_°dio_thªad
(
sock_t
 
sock
, 
HANDLE
 
hPùe
,

8030 *(*
func
)(*)) {

8031 
mg_thªad∑øm
 *
	gç
 = (mg_thªad∑øm *Ë
MG_MALLOC
((*
ç
));

8032 i‡(
	gç
 !
NULL
) {

8033 
ç
->
s
 = 
sock
;

8034 
	gç
->
	ghPùe
 = 
hPùe
;

8035 
mg_°¨t_thªad
(
func
, 
ç
);

8039 
	$mg_abs_∑th
(c⁄° *
utf8_∑th
, *
abs_∑th
, 
size_t
 
Àn
) {

8040 
wch¨_t
 
buf
[
MAX_PATH_SIZE
], 
buf2
[MAX_PATH_SIZE];

8041 
	`to_wch¨
(
utf8_∑th
, 
buf
, 
	`ARRAY_SIZE
(buf));

8042 
	`GëFuŒP©hNameW
(
buf
, 
	`ARRAY_SIZE
(
buf2
), buf2, 
NULL
);

8043 
	`WideCh¨ToMu…iByã
(
CP_UTF8
, 0, 
buf2
, 
	`wc¶í
(buf2Ë+ 1, 
abs_∑th
, 
Àn
, 0, 0);

8044 
	}
}

8046 
	$mg_°¨t_¥o˚ss
(c⁄° *
öãΩ
, c⁄° *
cmd
,

8047 c⁄° *
ív
, c⁄° *
ívp
[],

8048 c⁄° *
dú
, 
sock_t
 
sock
) {

8049 
STARTUPINFOW
 
si
;

8050 
PROCESS_INFORMATION
 
pi
;

8051 
HANDLE
 
a
[2], 
b
[2], 
me
 = 
	`GëCuºítPro˚ss
();

8052 
wch¨_t
 
wcmd
[
MAX_PATH_SIZE
], 
fuŒ_dú
[MAX_PATH_SIZE];

8053 
buf
[
MAX_PATH_SIZE
], 
buf2
[MAX_PATH_SIZE], 
buf5
[MAX_PATH_SIZE],

8054 
buf4
[
MAX_PATH_SIZE
], 
cmdlöe
[MAX_PATH_SIZE];

8055 
DWORD
 
Êags
 = 
DUPLICATE_CLOSE_SOURCE
 | 
DUPLICATE_SAME_ACCESS
;

8056 
FILE
 *
Â
;

8058 
	`mem£t
(&
si
, 0, (si));

8059 
	`mem£t
(&
pi
, 0, (pi));

8061 
si
.
cb
 = (si);

8062 
si
.
dwFœgs
 = 
STARTF_USESTDHANDLES
 | 
STARTF_USESHOWWINDOW
;

8063 
si
.
wShowWödow
 = 
SW_HIDE
;

8064 
si
.
hStdEº‹
 = 
	`GëStdH™dÀ
(
STD_ERROR_HANDLE
);

8066 
	`Cª©ePùe
(&
a
[0], &a[1], 
NULL
, 0);

8067 
	`Cª©ePùe
(&
b
[0], &b[1], 
NULL
, 0);

8068 
	`Du∂iˇãH™dÀ
(
me
, 
a
[0], me, &
si
.
hStdI≈ut
, 0, 
TRUE
, 
Êags
);

8069 
	`Du∂iˇãH™dÀ
(
me
, 
b
[1], me, &
si
.
hStdOuçut
, 0, 
TRUE
, 
Êags
);

8071 i‡(
öãΩ
 =
NULL
 && (
Â
 = 
	`mg_f›í
(
cmd
, "r")) != NULL) {

8072 
buf
[0] = buf[1] = '\0';

8073 
	`fgës
(
buf
, (buf), 
Â
);

8074 
buf
[(buf) - 1] = '\0';

8075 i‡(
buf
[0] == '#' && buf[1] == '!') {

8076 
öãΩ
 = 
buf
 + 2;

8078 *
öãΩ
 !'\0' && 
	`is•a˚
(*(*) interp)) {

8079 
öãΩ
++;

8082 
	`f˛o£
(
Â
);

8085 
	`¢¥ötf
(
buf
, (buf), "%s/%s", 
dú
, 
cmd
);

8086 
	`mg_abs_∑th
(
buf
, 
buf2
, 
	`ARRAY_SIZE
(buf2));

8088 
	`mg_abs_∑th
(
dú
, 
buf5
, 
	`ARRAY_SIZE
(buf5));

8089 
	`to_wch¨
(
dú
, 
fuŒ_dú
, 
	`ARRAY_SIZE
(full_dir));

8091 i‡(
öãΩ
 !
NULL
) {

8092 
	`mg_abs_∑th
(
öãΩ
, 
buf4
, 
	`ARRAY_SIZE
(buf4));

8093 
	`¢¥ötf
(
cmdlöe
, (cmdlöe), "%†\"%s\"", 
buf4
, 
buf2
);

8095 
	`¢¥ötf
(
cmdlöe
, (cmdlöe), "\"%s\"", 
buf2
);

8097 
	`to_wch¨
(
cmdlöe
, 
wcmd
, 
	`ARRAY_SIZE
(wcmd));

8099 i‡(
	`Cª©ePro˚ssW
(
NULL
, 
wcmd
, NULL, NULL, 
TRUE
, 
CREATE_NEW_PROCESS_GROUP
,

8100 (*Ë
ív
, 
fuŒ_dú
, &
si
, &
pi
) != 0) {

8101 
	`mg_•awn_°dio_thªad
(
sock
, 
a
[1], 
mg_push_to_°dö
);

8102 
	`mg_•awn_°dio_thªad
(
sock
, 
b
[0], 
mg_puŒ_‰om_°dout
);

8104 
	`Clo£H™dÀ
(
si
.
hStdOuçut
);

8105 
	`Clo£H™dÀ
(
si
.
hStdI≈ut
);

8107 
	`Clo£H™dÀ
(
pi
.
hThªad
);

8108 
	`Clo£H™dÀ
(
pi
.
hPro˚ss
);

8110 
	`Clo£H™dÀ
(
a
[1]);

8111 
	`Clo£H™dÀ
(
b
[0]);

8112 
	`˛o£sockë
(
sock
);

8114 
	`DBG
(("CGI comm™d: [%ls] -> %p", 
wcmd
, 
pi
.
hPro˚ss
));

8117 (Ë
ívp
;

8118  (
pi
.
hPro˚ss
 !
NULL
);

8119 
	}
}

8121 
	$mg_°¨t_¥o˚ss
(c⁄° *
öãΩ
, c⁄° *
cmd
,

8122 c⁄° *
ív
, c⁄° *
ívp
[],

8123 c⁄° *
dú
, 
sock_t
 
sock
) {

8124 
buf
[500];

8125 
pid_t
 
pid
 = 
	`f‹k
();

8126 (Ë
ív
;

8128 i‡(
pid
 == 0) {

8133 
tmp
 = 
	`chdú
(
dú
);

8134 (Ë
tmp
;

8135 (Ë
	`dup2
(
sock
, 0);

8136 (Ë
	`dup2
(
sock
, 1);

8137 
	`˛o£sockë
(
sock
);

8145 
	`sig«l
(
SIGCHLD
, 
SIG_DFL
);

8147 i‡(
öãΩ
 =
NULL
) {

8148 
	`exe˛e
(
cmd
, cmd, (*Ë0, 
ívp
);

8150 
	`exe˛e
(
öãΩ
, i¡îp, 
cmd
, (*Ë0, 
ívp
);

8152 
	`¢¥ötf
(
buf
, (buf),

8155 
öãΩ
 =
NULL
 ? "" : i¡îp, i¡î∞=NULL ? "" : " ", 
cmd
,

8156 
	`°ªº‹
(
î∫o
));

8157 
	`£nd
(1, 
buf
, 
	`°æí
(buf), 0);

8158 
	`_exô
(
EXIT_FAILURE
);

8161  (
pid
 != 0);

8162 
	}
}

8169 *
	$mg_addív
(
mg_cgi_ív_block
 *
block
, c⁄° *
fmt
, ...) {

8170 
n
, 
•a˚
;

8171 *
added
 = 
block
->
buf
 + block->
Àn
;

8172 
va_li°
 
≠
;

8175 
•a˚
 = (
block
->
buf
Ë- (block->
Àn
 + 2);

8176 i‡(
•a˚
 > 0) {

8178 
	`va_°¨t
(
≠
, 
fmt
);

8179 
n
 = 
	`v¢¥ötf
(
added
, (
size_t
Ë
•a˚
, 
fmt
, 
≠
);

8180 
	`va_íd
(
≠
);

8183 i‡(
n
 > 0 &&Ç + 1 < 
•a˚
 &&

8184 
block
->
nv¨s
 < (Ë
	`ARRAY_SIZE
(block->
v¨s
) - 2) {

8186 
block
->
v¨s
[block->
nv¨s
++] = 
added
;

8188 
block
->
Àn
 +
n
 + 1;

8192  
added
;

8193 
	}
}

8195 
	$mg_addív2
(
mg_cgi_ív_block
 *
blk
, c⁄° *
«me
) {

8196 c⁄° *
s
;

8197 i‡((
s
 = 
	`gëív
(
«me
)Ë!
NULL
Ë
	`mg_addív
(
blk
, "%s=%s",Çame, s);

8198 
	}
}

8200 
	$mg_¥ï¨e_cgi_ívú⁄mít
(
mg_c⁄√˘i⁄
 *
nc
,

8201 c⁄° *
¥og
,

8202 c⁄° 
mg_°r
 *
∑th_öfo
,

8203 c⁄° 
hâp_mesßge
 *
hm
,

8204 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
,

8205 
mg_cgi_ív_block
 *
blk
) {

8206 c⁄° *
s
;

8207 
mg_°r
 *
h
;

8208 *
p
;

8209 
size_t
 
i
;

8210 
buf
[100];

8212 
blk
->
Àn
 = blk->
nv¨s
 = 0;

8213 
blk
->
nc
 =Çc;

8215 i‡((
s
 = 
	`gëív
("SERVER_NAME")Ë!
NULL
) {

8216 
	`mg_addív
(
blk
, "SERVER_NAME=%s", 
s
);

8218 
	`mg_sock_to_°r
(
nc
->
sock
, 
buf
, (buf), 3);

8219 
	`mg_addív
(
blk
, "SERVER_NAME=%s", 
buf
);

8221 
	`mg_addív
(
blk
, "SERVER_ROOT=%s", 
›ts
->
documít_roŸ
);

8222 
	`mg_addív
(
blk
, "DOCUMENT_ROOT=%s", 
›ts
->
documít_roŸ
);

8223 
	`mg_addív
(
blk
, "SERVER_SOFTWARE=%s/%s", "M⁄goo£", 
MG_VERSION
);

8226 
	`mg_addív
(
blk
, "%s", "GATEWAY_INTERFACE=CGI/1.1");

8227 
	`mg_addív
(
blk
, "%s", "SERVER_PROTOCOL=HTTP/1.1");

8228 
	`mg_addív
(
blk
, "%s", "REDIRECT_STATUS=200");

8230 
	`mg_addív
(
blk
, "REQUEST_METHOD=%.*s", (Ë
hm
->
mëhod
.
Àn
, hm->mëhod.
p
);

8232 
	`mg_addív
(
blk
, "REQUEST_URI=%.*s%s%.*s", (Ë
hm
->
uri
.
Àn
, hm->uri.
p
,

8233 
hm
->
quîy_°rög
.
Àn
 == 0 ? "" : "?", () hm->query_string.len,

8234 
hm
->
quîy_°rög
.
p
);

8236 
	`mg_c⁄n_addr_to_°r
(
nc
, 
buf
, (buf),

8237 
MG_SOCK_STRINGIFY_REMOTE
 | 
MG_SOCK_STRINGIFY_IP
);

8238 
	`mg_addív
(
blk
, "REMOTE_ADDR=%s", 
buf
);

8239 
	`mg_c⁄n_addr_to_°r
(
nc
, 
buf
, (buf), 
MG_SOCK_STRINGIFY_PORT
);

8240 
	`mg_addív
(
blk
, "SERVER_PORT=%s", 
buf
);

8242 
s
 = 
hm
->
uri
.
p
 + hm->uri.
Àn
 - 
∑th_öfo
->len - 1;

8243 i‡(*
s
 == '/') {

8244 c⁄° *
ba£_«me
 = 
	`°ºchr
(
¥og
, 
DIRSEP
);

8245 
	`mg_addív
(
blk
, "SCRIPT_NAME=%.*s/%s", (Ë(
s
 - 
hm
->
uri
.
p
), hm->uri.p,

8246 (
ba£_«me
 !
NULL
 ? ba£_«mê+ 1 : 
¥og
));

8248 
	`mg_addív
(
blk
, "SCRIPT_NAME=%.*s", (Ë(
s
 - 
hm
->
uri
.
p
 + 1), hm->uri.p);

8250 
	`mg_addív
(
blk
, "SCRIPT_FILENAME=%s", 
¥og
);

8252 i‡(
∑th_öfo
 !
NULL
 &&Ö©h_öfo->
Àn
 > 0) {

8253 
	`mg_addív
(
blk
, "PATH_INFO=%.*s", (Ë
∑th_öfo
->
Àn
,Ö©h_öfo->
p
);

8255 
	`mg_addív
(
blk
, "PATH_TRANSLATED=%.*s", (Ë
∑th_öfo
->
Àn
,Ö©h_öfo->
p
);

8258 #i‡
MG_ENABLE_SSL


8259 
	`mg_addív
(
blk
, "HTTPS=%s", (
nc
->
Êags
 & 
MG_F_SSL
 ? "on" : "off"));

8261 
	`mg_addív
(
blk
, "HTTPS=off");

8264 i‡((
h
 = 
	`mg_gë_hâp_hódî
((
hâp_mesßge
 *Ë
hm
, "Content-Type")) !=

8265 
NULL
) {

8266 
	`mg_addív
(
blk
, "CONTENT_TYPE=%.*s", (Ë
h
->
Àn
, h->
p
);

8269 i‡(
hm
->
quîy_°rög
.
Àn
 > 0) {

8270 
	`mg_addív
(
blk
, "QUERY_STRING=%.*s", (Ë
hm
->
quîy_°rög
.
Àn
,

8271 
hm
->
quîy_°rög
.
p
);

8274 i‡((
h
 = 
	`mg_gë_hâp_hódî
((
hâp_mesßge
 *Ë
hm
, "Content-Length")) !=

8275 
NULL
) {

8276 
	`mg_addív
(
blk
, "CONTENT_LENGTH=%.*s", (Ë
h
->
Àn
, h->
p
);

8279 
	`mg_addív2
(
blk
, "PATH");

8280 
	`mg_addív2
(
blk
, "TMP");

8281 
	`mg_addív2
(
blk
, "TEMP");

8282 
	`mg_addív2
(
blk
, "TMPDIR");

8283 
	`mg_addív2
(
blk
, "PERLLIB");

8284 
	`mg_addív2
(
blk
, 
MG_ENV_EXPORT_TO_CGI
);

8286 #ifde‡
_WIN32


8287 
	`mg_addív2
(
blk
, "COMSPEC");

8288 
	`mg_addív2
(
blk
, "SYSTEMROOT");

8289 
	`mg_addív2
(
blk
, "SystemDrive");

8290 
	`mg_addív2
(
blk
, "ProgramFiles");

8291 
	`mg_addív2
(
blk
, "ProgramFiles(x86)");

8292 
	`mg_addív2
(
blk
, "CommonProgramFiles(x86)");

8294 
	`mg_addív2
(
blk
, "LD_LIBRARY_PATH");

8298 
i
 = 0; 
hm
->
hódî_«mes
[i].
Àn
 > 0; i++) {

8299 
p
 = 
	`mg_addív
(
blk
, "HTTP_%.*s=%.*s", (Ë
hm
->
hódî_«mes
[
i
].
Àn
,

8300 
hm
->
hódî_«mes
[
i
].
p
, (Ëhm->
hódî_vÆues
[i].
Àn
,

8301 
hm
->
hódî_vÆues
[
i
].
p
);

8304 ; *
p
 != '=' && *p != '\0';Ö++) {

8305 i‡(*
p
 == '-') *p = '_';

8306 *
p
 = (Ë
	`touµî
(*(*)Ö);

8310 
blk
->
v¨s
[blk->
nv¨s
++] = 
NULL
;

8311 
blk
->
buf
[blk->
Àn
++] = '\0';

8312 
	}
}

8314 
	$mg_cgi_ev_h™dÀr
(
mg_c⁄√˘i⁄
 *
cgi_nc
, 
ev
,

8315 *
ev_d©a
) {

8316 
mg_c⁄√˘i⁄
 *
nc
 = (mg_c⁄√˘i⁄ *Ë
cgi_nc
->
u£r_d©a
;

8317 (Ë
ev_d©a
;

8319 i‡(
nc
 =
NULL
) {

8320 
cgi_nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

8324 
ev
) {

8325 
MG_EV_RECV
:

8339 i‡(
nc
->
Êags
 & 
MG_F_USER_1
) {

8340 
mbuf
 *
io
 = &
cgi_nc
->
ªcv_mbuf
;

8341 
Àn
 = 
	`mg_hâp_gë_ªque°_Àn
(
io
->
buf
, io->len);

8343 i‡(
Àn
 == 0) ;

8344 i‡(
Àn
 < 0 || 
io
->À¿> 
MG_MAX_HTTP_REQUEST_SIZE
) {

8345 
cgi_nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

8346 
	`mg_hâp_£nd_îr‹
(
nc
, 500, "Bad headers");

8348 
hâp_mesßge
 
hm
;

8349 
mg_°r
 *
h
;

8350 
	`mg_hâp_∑r£_hódîs
(
io
->
buf
, io->bu‡+ io->
Àn
, io->Àn, &
hm
);

8351 i‡(
	`mg_gë_hâp_hódî
(&
hm
, "Loˇti⁄"Ë!
NULL
) {

8352 
	`mg_¥ötf
(
nc
, "%s", "HTTP/1.1 302 Moved\r\n");

8353 } i‡((
h
 = 
	`mg_gë_hâp_hódî
(&
hm
, "Sètus")Ë!
NULL
) {

8354 
	`mg_¥ötf
(
nc
, "HTTP/1.1 %.*s\r\n", (Ë
h
->
Àn
, h->
p
);

8356 
	`mg_¥ötf
(
nc
, "%s", "HTTP/1.1 200 OK\r\n");

8359 
nc
->
Êags
 &~
MG_F_USER_1
;

8361 i‡(!(
nc
->
Êags
 & 
MG_F_USER_1
)) {

8362 
	`mg_f‹w¨d
(
cgi_nc
, 
nc
);

8365 
MG_EV_CLOSE
:

8366 
	`mg_hâp_‰ì_¥Ÿo_d©a_cgi
(&
	`mg_hâp_gë_¥Ÿo_d©a
(
nc
)->
cgi
);

8367 
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

8370 
	}
}

8372 
MG_INTERNAL
 
	$mg_h™dÀ_cgi
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
¥og
,

8373 c⁄° 
mg_°r
 *
∑th_öfo
,

8374 c⁄° 
hâp_mesßge
 *
hm
,

8375 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
) {

8376 
mg_cgi_ív_block
 
blk
;

8377 
dú
[
MAX_PATH_SIZE
];

8378 c⁄° *
p
;

8379 
sock_t
 
fds
[2];

8381 
	`DBG
(("%∞[%s]", 
nc
, 
¥og
));

8382 
	`mg_¥ï¨e_cgi_ívú⁄mít
(
nc
, 
¥og
, 
∑th_öfo
, 
hm
, 
›ts
, &
blk
);

8388 i‡((
p
 = 
	`°ºchr
(
¥og
, 
DIRSEP
)Ë=
NULL
) {

8389 
	`¢¥ötf
(
dú
, (dir), "%s", ".");

8391 
	`¢¥ötf
(
dú
, (dú), "%.*s", (Ë(
p
 - 
¥og
),Örog);

8392 
¥og
 = 
p
 + 1;

8401 
	`mg_sockë∑ú
(
fds
, 
SOCK_STREAM
);

8402 } 
fds
[0] =
INVALID_SOCKET
);

8404 i‡(
	`mg_°¨t_¥o˚ss
(
›ts
->
cgi_öãΩªãr
, 
¥og
, 
blk
.
buf
, blk.
v¨s
, 
dú
,

8405 
fds
[1]) != 0) {

8406 
size_t
 
n
 = 
nc
->
ªcv_mbuf
.
Àn
 - (
hm
->
mesßge
.À¿- hm->
body
.len);

8407 
mg_c⁄√˘i⁄
 *
cgi_nc
 =

8408 
	`mg_add_sock
(
nc
->
mgr
, 
fds
[0], 
mg_cgi_ev_h™dÀr
);

8409 
mg_hâp_¥Ÿo_d©a
 *
cgi_pd
 = 
	`mg_hâp_gë_¥Ÿo_d©a
(
nc
);

8410 
cgi_pd
->
cgi
.
cgi_nc
 = cgi_nc;

8411 
cgi_pd
->
cgi
.
cgi_nc
->
u£r_d©a
 = 
nc
;

8412 
nc
->
Êags
 |
MG_F_USER_1
;

8414 i‡(
n
 > 0 &&Ç < 
nc
->
ªcv_mbuf
.
Àn
) {

8415 
	`mg_£nd
(
cgi_pd
->
cgi
.
cgi_nc
, 
hm
->
body
.
p
, 
n
);

8417 
	`mbuf_ªmove
(&
nc
->
ªcv_mbuf
,Çc->ªcv_mbuf.
Àn
);

8419 
	`˛o£sockë
(
fds
[0]);

8420 
	`mg_hâp_£nd_îr‹
(
nc
, 500, "CGI failure");

8423 #i‚de‡
_WIN32


8424 
	`˛o£sockë
(
fds
[1]);

8426 
	}
}

8428 
MG_INTERNAL
 
	$mg_hâp_‰ì_¥Ÿo_d©a_cgi
(
mg_hâp_¥Ÿo_d©a_cgi
 *
d
) {

8429 i‡(
d
 !
NULL
) {

8430 i‡(
d
->
cgi_nc
 !
NULL
Ëd->cgi_nc->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

8431 
	`mem£t
(
d
, 0, (
mg_hâp_¥Ÿo_d©a_cgi
));

8433 
	}
}

8436 #ifde‡
MG_MODULE_LINES


8444 #i‡
MG_ENABLE_HTTP
 && 
MG_ENABLE_HTTP_SSI
 && 
MG_ENABLE_FILESYSTEM


8446 
mg_£nd_ssi_fûe
(
mg_c⁄√˘i⁄
 *
nc
, 
hâp_mesßge
 *
hm
,

8447 c⁄° *
∑th
, 
FILE
 *
Â
, 
ö˛ude_Àvñ
,

8448 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
);

8450 
	$mg_£nd_fûe_d©a
(
mg_c⁄√˘i⁄
 *
nc
, 
FILE
 *
Â
) {

8451 
buf
[
BUFSIZ
];

8452 
size_t
 
n
;

8454 (
n
 = 
	`‰ód
(
buf
, 1, (buf), 
Â
)) > 0) {

8455 
	`mg_£nd
(
nc
, 
buf
, 
n
);

8457 
	}
}

8459 
	$mg_do_ssi_ö˛ude
(
mg_c⁄√˘i⁄
 *
nc
, 
hâp_mesßge
 *
hm
,

8460 c⁄° *
ssi
, *
èg
, 
ö˛ude_Àvñ
,

8461 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
) {

8462 
fûe_«me
[
BUFSIZ
], 
∑th
[
MAX_PATH_SIZE
], *
p
;

8463 
FILE
 *
Â
;

8469 i‡(
	`ssˇnf
(
èg
, " vútuÆ=\"%[^\"]\"", 
fûe_«me
) == 1) {

8471 
	`¢¥ötf
(
∑th
, ’©h), "%s/%s", 
›ts
->
documít_roŸ
, 
fûe_«me
);

8472 } i‡(
	`ssˇnf
(
èg
, "áb•©h=\"%[^\"]\"", 
fûe_«me
) == 1) {

8477 
	`¢¥ötf
(
∑th
, ’©h), "%s", 
fûe_«me
);

8478 } i‡(
	`ssˇnf
(
èg
, " fûe=\"%[^\"]\"", 
fûe_«me
) == 1 ||

8479 
	`ssˇnf
(
èg
, " \"%[^\"]\"", 
fûe_«me
) == 1) {

8481 
	`¢¥ötf
(
∑th
, ’©h), "%s", 
ssi
);

8482 i‡((
p
 = 
	`°ºchr
(
∑th
, 
DIRSEP
)Ë!
NULL
) {

8483 
p
[1] = '\0';

8485 
	`¢¥ötf
(
∑th
 + 
	`°æí
’©h), ’©hË- såÀn’©h), "%s", 
fûe_«me
);

8487 
	`mg_¥ötf
(
nc
, "Bad SSI #ö˛ude: [%s]", 
èg
);

8491 i‡((
Â
 = 
	`mg_f›í
(
∑th
, "rb")Ë=
NULL
) {

8492 
	`mg_¥ötf
(
nc
, "SSI in˛udêîr‹: mg_f›í(%s): %s", 
∑th
,

8493 
	`°ªº‹
(
	`mg_gë_î∫o
()));

8495 
	`mg_£t_˛o£_⁄_exec
((
sock_t
Ë
	`fûío
(
Â
));

8496 i‡(
	`mg_m©ch_¥efix
(
›ts
->
ssi_∑âîn
, 
	`°æí
(›ts->ssi_∑âîn), 
∑th
) >

8498 
	`mg_£nd_ssi_fûe
(
nc
, 
hm
, 
∑th
, 
Â
, 
ö˛ude_Àvñ
 + 1, 
›ts
);

8500 
	`mg_£nd_fûe_d©a
(
nc
, 
Â
);

8502 
	`f˛o£
(
Â
);

8504 
	}
}

8506 #i‡
MG_ENABLE_HTTP_SSI_EXEC


8507 
	$do_ssi_exec
(
mg_c⁄√˘i⁄
 *
nc
, *
èg
) {

8508 
cmd
[
BUFSIZ
];

8509 
FILE
 *
Â
;

8511 i‡(
	`ssˇnf
(
èg
, " \"%[^\"]\"", 
cmd
) != 1) {

8512 
	`mg_¥ötf
(
nc
, "Bad SSI #exec: [%s]", 
èg
);

8513 } i‡((
Â
 = 
	`p›í
(
cmd
, "r")Ë=
NULL
) {

8514 
	`mg_¥ötf
(
nc
, "C™nŸ SSI #exec: [%s]: %s", 
cmd
, 
	`°ªº‹
(
	`mg_gë_î∫o
()));

8516 
	`mg_£nd_fûe_d©a
(
nc
, 
Â
);

8517 
	`p˛o£
(
Â
);

8519 
	}
}

8526 
	$mg_£nd_ssi_fûe
(
mg_c⁄√˘i⁄
 *
nc
, 
hâp_mesßge
 *
hm
,

8527 c⁄° *
∑th
, 
FILE
 *
Â
, 
ö˛ude_Àvñ
,

8528 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
) {

8529 c⁄° 
mg_°r
 
bèg
 = 
	`MG_MK_STR
("<!--#");

8530 c⁄° 
mg_°r
 
d_ö˛ude
 = 
	`MG_MK_STR
("include");

8531 c⁄° 
mg_°r
 
d_ˇŒ
 = 
	`MG_MK_STR
("call");

8532 #i‡
MG_ENABLE_HTTP_SSI_EXEC


8533 c⁄° 
mg_°r
 
d_exec
 = 
	`MG_MK_STR
("exec");

8535 
buf
[
BUFSIZ
], *
p
 = bu‡+ 
bèg
.
Àn
;

8536 
ch
, 
Àn
, 
ö_ssi_èg
;

8538 i‡(
ö˛ude_Àvñ
 > 10) {

8539 
	`mg_¥ötf
(
nc
, "SSI #ö˛udêÀvñ i†toÿdì∞(%s)", 
∑th
);

8543 
ö_ssi_èg
 = 
Àn
 = 0;

8544 (
ch
 = 
	`fgëc
(
Â
)Ë!
EOF
) {

8545 i‡(
ö_ssi_èg
 && 
ch
 ='>' && 
buf
[
Àn
 - 1] == '-' && buf[len - 2] == '-') {

8546 
size_t
 
i
 = 
Àn
 - 2;

8547 
ö_ssi_èg
 = 0;

8550 
buf
[
i
--] = '\0';

8551 
i
 > 0 && 
buf
[i] == ' ') {

8552 
buf
[
i
--] = '\0';

8556 i‡(
	`°∫cmp
(
p
, 
d_ö˛ude
.p, d_ö˛ude.
Àn
) == 0) {

8557 
	`mg_do_ssi_ö˛ude
(
nc
, 
hm
, 
∑th
, 
p
 + 
d_ö˛ude
.
Àn
 + 1, 
ö˛ude_Àvñ
,

8558 
›ts
);

8559 } i‡(
	`°∫cmp
(
p
, 
d_ˇŒ
.p, d_ˇŒ.
Àn
) == 0) {

8560 
mg_ssi_ˇŒ_˘x
 
c˘x
;

8561 
	`mem£t
(&
c˘x
, 0, (cctx));

8562 
c˘x
.
ªq
 = 
hm
;

8563 
c˘x
.
fûe
 = 
	`mg_mk_°r
(
∑th
);

8564 
c˘x
.
¨g
 = 
	`mg_mk_°r
(
p
 + 
d_ˇŒ
.
Àn
 + 1);

8565 
	`mg_ˇŒ
(
nc
, 
NULL
, 
MG_EV_SSI_CALL
,

8566 (*Ë
c˘x
.
¨g
.
p
);

8567 
	`mg_ˇŒ
(
nc
, 
NULL
, 
MG_EV_SSI_CALL_CTX
, &
c˘x
);

8568 #i‡
MG_ENABLE_HTTP_SSI_EXEC


8569 } i‡(
	`°∫cmp
(
p
, 
d_exec
.p, d_exec.
Àn
) == 0) {

8570 
	`do_ssi_exec
(
nc
, 
p
 + 
d_exec
.
Àn
 + 1);

8575 
Àn
 = 0;

8576 } i‡(
ch
 == '<') {

8577 
ö_ssi_èg
 = 1;

8578 i‡(
Àn
 > 0) {

8579 
	`mg_£nd
(
nc
, 
buf
, (
size_t
Ë
Àn
);

8581 
Àn
 = 0;

8582 
buf
[
Àn
++] = 
ch
 & 0xff;

8583 } i‡(
ö_ssi_èg
) {

8584 i‡(
Àn
 =(Ë
bèg
.À¿&& 
	`°∫cmp
(
buf
, bèg.
p
, btag.len) != 0) {

8586 
ö_ssi_èg
 = 0;

8587 } i‡(
Àn
 =(Ë(
buf
) - 2) {

8588 
	`mg_¥ötf
(
nc
, "%s: SSIÅag i†toÿœrge", 
∑th
);

8589 
Àn
 = 0;

8591 
buf
[
Àn
++] = 
ch
 & 0xff;

8593 
buf
[
Àn
++] = 
ch
 & 0xff;

8594 i‡(
Àn
 =(Ë(
buf
)) {

8595 
	`mg_£nd
(
nc
, 
buf
, (
size_t
Ë
Àn
);

8596 
Àn
 = 0;

8602 i‡(
Àn
 > 0) {

8603 
	`mg_£nd
(
nc
, 
buf
, (
size_t
Ë
Àn
);

8605 
	}
}

8607 
MG_INTERNAL
 
	$mg_h™dÀ_ssi_ªque°
(
mg_c⁄√˘i⁄
 *
nc
,

8608 
hâp_mesßge
 *
hm
,

8609 c⁄° *
∑th
,

8610 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
) {

8611 
FILE
 *
Â
;

8612 
mg_°r
 
mime_ty≥
;

8613 
	`DBG
(("%∞%s", 
nc
, 
∑th
));

8615 i‡((
Â
 = 
	`mg_f›í
(
∑th
, "rb")Ë=
NULL
) {

8616 
	`mg_hâp_£nd_îr‹
(
nc
, 404, 
NULL
);

8618 
	`mg_£t_˛o£_⁄_exec
((
sock_t
Ë
	`fûío
(
Â
));

8620 
mime_ty≥
 = 
	`mg_gë_mime_ty≥
(
∑th
, "ãxt/∂aö", 
›ts
);

8621 
	`mg_£nd_ª•⁄£_löe
(
nc
, 200, 
›ts
->
exåa_hódîs
);

8622 
	`mg_¥ötf
(
nc
,

8625 (Ë
mime_ty≥
.
Àn
, mime_ty≥.
p
);

8626 
	`mg_£nd_ssi_fûe
(
nc
, 
hm
, 
∑th
, 
Â
, 0, 
›ts
);

8627 
	`f˛o£
(
Â
);

8628 
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

8630 
	}
}

8633 #ifde‡
MG_MODULE_LINES


8641 #i‡
MG_ENABLE_HTTP
 && 
MG_ENABLE_HTTP_WEBDAV


8643 
MG_INTERNAL
 
	$mg_is_dav_ªque°
(c⁄° 
mg_°r
 *
s
) {

8644 c⁄° *
mëhods
[] = {

8650 #i‡
MG_ENABLE_FAKE_DAVLOCK


8656 
size_t
 
i
;

8658 
i
 = 0; i < 
	`ARRAY_SIZE
(
mëhods
); i++) {

8659 i‡(
	`mg_vcmp
(
s
, 
mëhods
[
i
]) == 0) {

8665 
	}
}

8667 
	$mg_mkdú
(c⁄° *
∑th
, 
uöt32_t
 
mode
) {

8668 #i‚de‡
_WIN32


8669  
	`mkdú
(
∑th
, 
mode
);

8671 (Ë
mode
;

8672  
	`_mkdú
(
∑th
);

8674 
	}
}

8676 
	$mg_¥öt_¥›s
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
«me
,

8677 
cs_°©_t
 *
°p
) {

8678 
mtime
[64], 
buf
[
MAX_PATH_SIZE
 * 3];

8679 
time_t
 
t
 = 
°p
->
°_mtime
;

8680 
	`mg_gmt_time_°rög
(
mtime
, (mtime), &
t
);

8681 
	`mg_uæ_ícode
(
«me
, 
	`°æí
“ame), 
buf
, (buf));

8682 
	`mg_¥ötf
(
nc
,

8688 "<d:gëc⁄ã¡Àngth>%" 
INT64_FMT


8695 
buf
, 
	`S_ISDIR
(
°p
->
°_mode
) ? "<d:collection/>" : "",

8696 (
öt64_t
Ë
°p
->
°_size
, 
mtime
);

8697 
	}
}

8699 
MG_INTERNAL
 
	$mg_h™dÀ_¥›föd
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
,

8700 
cs_°©_t
 *
°p
, 
hâp_mesßge
 *
hm
,

8701 
mg_£rve_hâp_›ts
 *
›ts
) {

8702 c⁄° 
hódî
[] =

8708 c⁄° 
foŸî
[] = "</d:multistatus>\n";

8709 c⁄° 
mg_°r
 *
dïth
 = 
	`mg_gë_hâp_hódî
(
hm
, "Depth");

8712 i‡(
	`S_ISDIR
(
°p
->
°_mode
) &&

8713 
	`°rcmp
(
›ts
->
íabÀ_dúe˘‹y_li°ög
, "yes") != 0) {

8714 
	`mg_¥ötf
(
nc
, "%s", "HTTP/1.1 403 Directory Listing Denied\r\n\r\n");

8716 
uri
[
MAX_PATH_SIZE
];

8717 
	`mg_£nd
(
nc
, 
hódî
, (header) - 1);

8718 
	`¢¥ötf
(
uri
, (uri), "%.*s", (Ë
hm
->uri.
Àn
, hm->uri.
p
);

8719 
	`mg_¥öt_¥›s
(
nc
, 
uri
, 
°p
);

8720 i‡(
	`S_ISDIR
(
°p
->
°_mode
Ë&& (
dïth
 =
NULL
 || 
	`mg_vcmp
(depth, "0") != 0)) {

8721 
	`mg_sˇn_dúe˘‹y
(
nc
, 
∑th
, 
›ts
, 
mg_¥öt_¥›s
);

8723 
	`mg_£nd
(
nc
, 
foŸî
, (footer) - 1);

8724 
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

8726 
	}
}

8728 #i‡
MG_ENABLE_FAKE_DAVLOCK


8740 
MG_INTERNAL
 
	$mg_h™dÀ_lock
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
) {

8741 c⁄° *
ª∂y
 =

8757 
	`mg_¥ötf
(
nc
, 
ª∂y
, 
∑th
, (Ë
	`mg_time
());

8758 
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

8759 
	}
}

8762 
MG_INTERNAL
 
	$mg_h™dÀ_mkcﬁ
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
,

8763 
hâp_mesßge
 *
hm
) {

8764 
°©us_code
 = 500;

8765 i‡(
hm
->
body
.
Àn
 !(
size_t
) ~0 && hm->body.len > 0) {

8766 
°©us_code
 = 415;

8767 } i‡(!
	`mg_mkdú
(
∑th
, 0755)) {

8768 
°©us_code
 = 201;

8769 } i‡(
î∫o
 =
EEXIST
) {

8770 
°©us_code
 = 405;

8771 } i‡(
î∫o
 =
EACCES
) {

8772 
°©us_code
 = 403;

8773 } i‡(
î∫o
 =
ENOENT
) {

8774 
°©us_code
 = 409;

8776 
°©us_code
 = 500;

8778 
	`mg_hâp_£nd_îr‹
(
nc
, 
°©us_code
, 
NULL
);

8779 
	}
}

8781 
	$mg_ªmove_dúe˘‹y
(c⁄° 
mg_£rve_hâp_›ts
 *
›ts
,

8782 c⁄° *
dú
) {

8783 
∑th
[
MAX_PATH_SIZE
];

8784 
dúít
 *
dp
;

8785 
cs_°©_t
 
°
;

8786 
DIR
 *
dúp
;

8788 i‡((
dúp
 = 
	`›ídú
(
dú
)Ë=
NULL
)  0;

8790 (
dp
 = 
	`ªaddú
(
dúp
)Ë!
NULL
) {

8791 i‡(
	`mg_is_fûe_hiddí
((c⁄° *Ë
dp
->
d_«me
, 
›ts
, 1)) {

8794 
	`¢¥ötf
(
∑th
, ’©h), "%s%c%s", 
dú
, '/', 
dp
->
d_«me
);

8795 
	`mg_°©
(
∑th
, &
°
);

8796 i‡(
	`S_ISDIR
(
°
.
°_mode
)) {

8797 
	`mg_ªmove_dúe˘‹y
(
›ts
, 
∑th
);

8799 
	`ªmove
(
∑th
);

8802 
	`˛o£dú
(
dúp
);

8803 
	`rmdú
(
dú
);

8806 
	}
}

8808 
MG_INTERNAL
 
	$mg_h™dÀ_move
(
mg_c⁄√˘i⁄
 *
c
,

8809 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
,

8810 c⁄° *
∑th
, 
hâp_mesßge
 *
hm
) {

8811 c⁄° 
mg_°r
 *
de°
 = 
	`mg_gë_hâp_hódî
(
hm
, "Destination");

8812 i‡(
de°
 =
NULL
) {

8813 
	`mg_hâp_£nd_îr‹
(
c
, 411, 
NULL
);

8815 c⁄° *
p
 = (*Ë
	`memchr
(
de°
->p, '/', de°->
Àn
);

8816 i‡(
p
 !
NULL
 &&Ö[1] == '/' &&

8817 (
p
 = (*Ë
	`memchr
’ + 2, '/', 
de°
->∞+ de°->
Àn
 -Ö)Ë!
NULL
) {

8818 
buf
[
MAX_PATH_SIZE
];

8819 
	`¢¥ötf
(
buf
, (buf), "%s%.*s", 
›ts
->
dav_documít_roŸ
,

8820 (Ë(
de°
->
p
 + de°->
Àn
 -Ö),Ö);

8821 i‡(
	`ª«me
(
∑th
, 
buf
) == 0) {

8822 
	`mg_hâp_£nd_îr‹
(
c
, 200, 
NULL
);

8824 
	`mg_hâp_£nd_îr‹
(
c
, 418, 
NULL
);

8827 
	`mg_hâp_£nd_îr‹
(
c
, 500, 
NULL
);

8830 
	}
}

8832 
MG_INTERNAL
 
	$mg_h™dÀ_dñëe
(
mg_c⁄√˘i⁄
 *
nc
,

8833 c⁄° 
mg_£rve_hâp_›ts
 *
›ts
,

8834 c⁄° *
∑th
) {

8835 
cs_°©_t
 
°
;

8836 i‡(
	`mg_°©
(
∑th
, &
°
) != 0) {

8837 
	`mg_hâp_£nd_îr‹
(
nc
, 404, 
NULL
);

8838 } i‡(
	`S_ISDIR
(
°
.
°_mode
)) {

8839 
	`mg_ªmove_dúe˘‹y
(
›ts
, 
∑th
);

8840 
	`mg_hâp_£nd_îr‹
(
nc
, 204, 
NULL
);

8841 } i‡(
	`ªmove
(
∑th
) == 0) {

8842 
	`mg_hâp_£nd_îr‹
(
nc
, 204, 
NULL
);

8844 
	`mg_hâp_£nd_îr‹
(
nc
, 423, 
NULL
);

8846 
	}
}

8849 
	$mg_¸óã_ôîmedüã_dúe˘‹õs
(c⁄° *
∑th
) {

8850 c⁄° *
s
;

8853 
s
 = 
∑th
 + 1; *s != '\0'; s++) {

8854 i‡(*
s
 == '/') {

8855 
buf
[
MAX_PATH_SIZE
];

8856 
cs_°©_t
 
°
;

8857 
	`¢¥ötf
(
buf
, (buf), "%.*s", (Ë(
s
 - 
∑th
),Öath);

8858 
buf
[(buf) - 1] = '\0';

8859 i‡(
	`mg_°©
(
buf
, &
°
Ë!0 && 
	`mg_mkdú
(buf, 0755) != 0) {

8866 
	}
}

8868 
MG_INTERNAL
 
	$mg_h™dÀ_put
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
,

8869 
hâp_mesßge
 *
hm
) {

8870 
mg_hâp_¥Ÿo_d©a
 *
pd
 = 
	`mg_hâp_gë_¥Ÿo_d©a
(
nc
);

8871 
cs_°©_t
 
°
;

8872 c⁄° 
mg_°r
 *
˛_hdr
 = 
	`mg_gë_hâp_hódî
(
hm
, "Content-Length");

8873 
rc
, 
°©us_code
 = 
	`mg_°©
(
∑th
, &
°
) == 0 ? 200 : 201;

8875 
	`mg_hâp_‰ì_¥Ÿo_d©a_fûe
(&
pd
->
fûe
);

8876 i‡((
rc
 = 
	`mg_¸óã_ôîmedüã_dúe˘‹õs
(
∑th
)) == 0) {

8877 
	`mg_¥ötf
(
nc
, "HTTP/1.1 %d OK\r\nC⁄ã¡-Lígth: 0\r\n\r\n", 
°©us_code
);

8878 } i‡(
rc
 == -1) {

8879 
	`mg_hâp_£nd_îr‹
(
nc
, 500, 
NULL
);

8880 } i‡(
˛_hdr
 =
NULL
) {

8881 
	`mg_hâp_£nd_îr‹
(
nc
, 411, 
NULL
);

8882 } i‡((
pd
->
fûe
.
Â
 = 
	`mg_f›í
(
∑th
, "w+b")Ë=
NULL
) {

8883 
	`mg_hâp_£nd_îr‹
(
nc
, 500, 
NULL
);

8885 c⁄° 
mg_°r
 *
ønge_hdr
 = 
	`mg_gë_hâp_hódî
(
hm
, "Content-Range");

8886 
öt64_t
 
r1
 = 0, 
r2
 = 0;

8887 
pd
->
fûe
.
ty≥
 = 
DATA_PUT
;

8888 
	`mg_£t_˛o£_⁄_exec
((
sock_t
Ë
	`fûío
(
pd
->
fûe
.
Â
));

8889 
pd
->
fûe
.
˛
 = 
	`to64
(
˛_hdr
->
p
);

8890 i‡(
ønge_hdr
 !
NULL
 &&

8891 
	`mg_hâp_∑r£_ønge_hódî
(
ønge_hdr
, &
r1
, &
r2
) > 0) {

8892 
°©us_code
 = 206;

8893 
	`f£eko
(
pd
->
fûe
.
Â
, 
r1
, 
SEEK_SET
);

8894 
pd
->
fûe
.
˛
 = 
r2
 > 
r1
 ?Ñ2 -Ñ1 + 1 :Öd->file.cl -Ñ1;

8896 
	`mg_¥ötf
(
nc
, "HTTP/1.1 %d OK\r\nC⁄ã¡-Lígth: 0\r\n\r\n", 
°©us_code
);

8898 
	`mbuf_ªmove
(&
nc
->
ªcv_mbuf
, 
hm
->
mesßge
.
Àn
 - hm->
body
.len);

8899 
	`mg_hâp_å™s„r_fûe_d©a
(
nc
);

8901 
	}
}

8904 #ifde‡
MG_MODULE_LINES


8912 #i‡
MG_ENABLE_HTTP
 && 
MG_ENABLE_HTTP_WEBSOCKET


8914 #i‚de‡
MG_WEBSOCKET_PING_INTERVAL_SECONDS


8915 
	#MG_WEBSOCKET_PING_INTERVAL_SECONDS
 5

	)

8918 
	#MG_WS_NO_HOST_HEADER_MAGIC
 ((*Ë0x1)

	)

8920 
	$mg_is_ws_‰agmít
(
Êags
) {

8921  (
Êags
 & 0x80) == 0 || (flags & 0x0f) == 0;

8922 
	}
}

8924 
	$mg_is_ws_fú°_‰agmít
(
Êags
) {

8925  (
Êags
 & 0x80) == 0 && (flags & 0x0f) != 0;

8926 
	}
}

8928 
	$mg_h™dÀ_öcomög_websockë_‰ame
(
mg_c⁄√˘i⁄
 *
nc
,

8929 
websockë_mesßge
 *
wsm
) {

8930 i‡(
wsm
->
Êags
 & 0x8) {

8931 
	`mg_ˇŒ
(
nc
,Çc->
h™dÀr
, 
MG_EV_WEBSOCKET_CONTROL_FRAME
, 
wsm
);

8933 
	`mg_ˇŒ
(
nc
,Çc->
h™dÀr
, 
MG_EV_WEBSOCKET_FRAME
, 
wsm
);

8935 
	}
}

8937 
	$mg_dñivî_websockë_d©a
(
mg_c⁄√˘i⁄
 *
nc
) {

8939 
uöt64_t
 
i
, 
d©a_Àn
 = 0, 
‰ame_Àn
 = 0, 
buf_Àn
 = 
nc
->
ªcv_mbuf
.
Àn
,Üen,

8940 
mask_Àn
 = 0, 
hódî_Àn
 = 0;

8941 *
p
 = (*Ë
nc
->
ªcv_mbuf
.
buf
, *buf =Ö,

8942 *
e
 = 
p
 + 
buf_Àn
;

8943 *
sizï
 = (*Ë&
p
[1];

8944 
ok
, 
ªass
 = 
buf_Àn
 > 0 && 
	`mg_is_ws_‰agmít
(
p
[0]) &&

8945 !(
nc
->
Êags
 & 
MG_F_WEBSOCKET_NO_DEFRAG
);

8948 i‡(
ªass
 && !
	`mg_is_ws_fú°_‰agmít
(
p
[0]) &&

8949 
buf_Àn
 >1 + (*
sizï
) && buf_len >= 1 + (*sizep) + *sizep) {

8950 
buf
 +1 + (*
sizï
) + *sizep;

8951 
buf_Àn
 -1 + (*
sizï
) + *sizep;

8954 i‡(
buf_Àn
 >= 2) {

8955 
Àn
 = 
buf
[1] & 127;

8956 
mask_Àn
 = 
buf
[1] & 128 ? 4 : 0;

8957 i‡(
Àn
 < 126 && 
buf_Àn
 >
mask_Àn
) {

8958 
d©a_Àn
 = 
Àn
;

8959 
hódî_Àn
 = 2 + 
mask_Àn
;

8960 } i‡(
Àn
 =126 && 
buf_Àn
 >4 + 
mask_Àn
) {

8961 
hódî_Àn
 = 4 + 
mask_Àn
;

8962 
d©a_Àn
 = 
	`¡ohs
(*(
uöt16_t
 *Ë&
buf
[2]);

8963 } i‡(
buf_Àn
 >10 + 
mask_Àn
) {

8964 
hódî_Àn
 = 10 + 
mask_Àn
;

8965 
d©a_Àn
 = (((
uöt64_t
Ë
	`¡ohl
(*(
uöt32_t
 *Ë&
buf
[2])) << 32) +

8966 
	`¡ohl
(*(
uöt32_t
 *Ë&
buf
[6]);

8970 
‰ame_Àn
 = 
hódî_Àn
 + 
d©a_Àn
;

8971 
ok
 = 
‰ame_Àn
 > 0 && føme_À¿<
buf_Àn
;

8973 i‡(
ok
) {

8974 
websockë_mesßge
 
wsm
;

8976 
wsm
.
size
 = (
size_t
Ë
d©a_Àn
;

8977 
wsm
.
d©a
 = 
buf
 + 
hódî_Àn
;

8978 
wsm
.
Êags
 = 
buf
[0];

8981 i‡(
mask_Àn
 > 0) {

8982 
i
 = 0; i < 
d©a_Àn
; i++) {

8983 
buf
[
i
 + 
hódî_Àn
] ^(bu‡+ hódî_À¿- 
mask_Àn
)[i % 4];

8987 i‡(
ªass
) {

8989 i‡(
	`mg_is_ws_fú°_‰agmít
(
wsm
.
Êags
)) {

8990 
	`mbuf_ªsize
(&
nc
->
ªcv_mbuf
,Çc->ªcv_mbuf.
size
 + (*
sizï
));

8991 
p
[0] &= ~0x0f;

8992 
buf
 = 
p
 + 1 + (*
sizï
);

8993 *
sizï
 = 0;

8997 
	`memmove
(
buf
, 
wsm
.
d©a
, 
e
 - wsm.data);

8998 (*
sizï
Ë+
wsm
.
size
;

8999 
nc
->
ªcv_mbuf
.
Àn
 -
wsm
.
d©a
 - 
buf
;

9002 i‡(
wsm
.
Êags
 & 0x80) {

9003 
wsm
.
d©a
 = 
p
 + 1 + (*
sizï
);

9004 
wsm
.
size
 = *
sizï
;

9005 
	`mg_h™dÀ_öcomög_websockë_‰ame
(
nc
, &
wsm
);

9006 
	`mbuf_ªmove
(&
nc
->
ªcv_mbuf
, 1 + (*
sizï
) + *sizep);

9010 
	`mg_h™dÀ_öcomög_websockë_‰ame
(
nc
, &
wsm
);

9011 
	`mbuf_ªmove
(&
nc
->
ªcv_mbuf
, (
size_t
Ë
‰ame_Àn
);

9015 i‡((
buf
[0] & 0x0fË=
WEBSOCKET_OP_CLOSE
) {

9016 
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

9020  
ok
;

9021 
	}
}

9023 
	sws_mask_˘x
 {

9024 
size_t
 
	mpos
;

9025 
uöt32_t
 
	mmask
;

9028 
uöt32_t
 
	$mg_ws_øndom_mask
() {

9029 
uöt32_t
 
mask
;

9044 #i‡
MG_DISABLE_WS_RANDOM_MASK


9045 
mask
 = 0xefbeadde;

9048 
mask
 = (
uöt32_t
Ë
	`ønd
();

9050 
mask
 = (
uöt32_t
Ë
	`ønd
() << 16 | (uint32_t)Ñand();

9053  
mask
;

9054 
	}
}

9056 
	$mg_£nd_ws_hódî
(
mg_c⁄√˘i⁄
 *
nc
, 
›
, 
size_t
 
Àn
,

9057 
ws_mask_˘x
 *
˘x
) {

9058 
hódî_Àn
;

9059 
hódî
[10];

9061 
hódî
[0] = (
›
 & 
WEBSOCKET_DONT_FIN
 ? 0x0 : 0x80) + (op & 0x0f);

9062 i‡(
Àn
 < 126) {

9063 
hódî
[1] = (Ë
Àn
;

9064 
hódî_Àn
 = 2;

9065 } i‡(
Àn
 < 65535) {

9066 
uöt16_t
 
tmp
 = 
	`ht⁄s
((uöt16_tË
Àn
);

9067 
hódî
[1] = 126;

9068 
	`mem˝y
(&
hódî
[2], &
tmp
, (tmp));

9069 
hódî_Àn
 = 4;

9071 
uöt32_t
 
tmp
;

9072 
hódî
[1] = 127;

9073 
tmp
 = 
	`ht⁄l
((
uöt32_t
)((
uöt64_t
Ë
Àn
 >> 32));

9074 
	`mem˝y
(&
hódî
[2], &
tmp
, (tmp));

9075 
tmp
 = 
	`ht⁄l
((
uöt32_t
)(
Àn
 & 0xffffffff));

9076 
	`mem˝y
(&
hódî
[6], &
tmp
, (tmp));

9077 
hódî_Àn
 = 10;

9081 i‡(
nc
->
li°íî
 =
NULL
) {

9082 
hódî
[1] |= 1 << 7;

9083 
	`mg_£nd
(
nc
, 
hódî
, 
hódî_Àn
);

9084 
˘x
->
mask
 = 
	`mg_ws_øndom_mask
();

9085 
	`mg_£nd
(
nc
, &
˘x
->
mask
, (ctx->mask));

9086 
˘x
->
pos
 = 
nc
->
£nd_mbuf
.
Àn
;

9088 
	`mg_£nd
(
nc
, 
hódî
, 
hódî_Àn
);

9089 
˘x
->
pos
 = 0;

9091 
	}
}

9093 
	$mg_ws_mask_‰ame
(
mbuf
 *mbuf, 
ws_mask_˘x
 *
˘x
) {

9094 
size_t
 
i
;

9095 i‡(
˘x
->
pos
 == 0) ;

9096 
i
 = 0; i < (
mbuf
->
Àn
 - 
˘x
->
pos
); i++) {

9097 
mbuf
->
buf
[
˘x
->
pos
 + 
i
] ^((*Ë&˘x->
mask
)[i % 4];

9099 
	}
}

9101 
	$mg_£nd_websockë_‰ame
(
mg_c⁄√˘i⁄
 *
nc
, 
›
, c⁄° *
d©a
,

9102 
size_t
 
Àn
) {

9103 
ws_mask_˘x
 
˘x
;

9104 
	`DBG
(("%∞%d %d", 
nc
, 
›
, (Ë
Àn
));

9105 
	`mg_£nd_ws_hódî
(
nc
, 
›
, 
Àn
, &
˘x
);

9106 
	`mg_£nd
(
nc
, 
d©a
, 
Àn
);

9108 
	`mg_ws_mask_‰ame
(&
nc
->
£nd_mbuf
, &
˘x
);

9110 i‡(
›
 =
WEBSOCKET_OP_CLOSE
) {

9111 
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

9113 
	}
}

9115 
	$mg_£nd_websockë_‰amev
(
mg_c⁄√˘i⁄
 *
nc
, 
›
,

9116 c⁄° 
mg_°r
 *
°rv
, 
°rv˙t
) {

9117 
ws_mask_˘x
 
˘x
;

9118 
i
;

9119 
Àn
 = 0;

9120 
i
 = 0; i < 
°rv˙t
; i++) {

9121 
Àn
 +
°rv
[
i
].len;

9124 
	`mg_£nd_ws_hódî
(
nc
, 
›
, 
Àn
, &
˘x
);

9126 
i
 = 0; i < 
°rv˙t
; i++) {

9127 
	`mg_£nd
(
nc
, 
°rv
[
i
].
p
, såv[i].
Àn
);

9130 
	`mg_ws_mask_‰ame
(&
nc
->
£nd_mbuf
, &
˘x
);

9132 i‡(
›
 =
WEBSOCKET_OP_CLOSE
) {

9133 
nc
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

9135 
	}
}

9137 
	$mg_¥ötf_websockë_‰ame
(
mg_c⁄√˘i⁄
 *
nc
, 
›
,

9138 c⁄° *
fmt
, ...) {

9139 
mem
[
MG_VPRINTF_BUFFER_SIZE
], *
buf
 = mem;

9140 
va_li°
 
≠
;

9141 
Àn
;

9143 
	`va_°¨t
(
≠
, 
fmt
);

9144 i‡((
Àn
 = 
	`mg_av¥ötf
(&
buf
, (
mem
), 
fmt
, 
≠
)) > 0) {

9145 
	`mg_£nd_websockë_‰ame
(
nc
, 
›
, 
buf
, 
Àn
);

9147 
	`va_íd
(
≠
);

9149 i‡(
buf
 !
mem
 && bu‡!
NULL
) {

9150 
	`MG_FREE
(
buf
);

9152 
	}
}

9154 
MG_INTERNAL
 
	$mg_ws_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
,

9155 *
ev_d©a
) {

9156 
	`mg_ˇŒ
(
nc
,Çc->
h™dÀr
, 
ev
, 
ev_d©a
);

9158 
ev
) {

9159 
MG_EV_RECV
:

9161 } 
	`mg_dñivî_websockë_d©a
(
nc
));

9163 
MG_EV_POLL
:

9166 
time_t
 
now
 = *—ime_à*Ë
ev_d©a
;

9167 i‡(
nc
->
Êags
 & 
MG_F_IS_WEBSOCKET
 &&

9168 
now
 > 
nc
->
œ°_io_time
 + 
MG_WEBSOCKET_PING_INTERVAL_SECONDS
) {

9169 
	`mg_£nd_websockë_‰ame
(
nc
, 
WEBSOCKET_OP_PING
, "", 0);

9176 
	}
}

9178 #i‚de‡
MG_EXT_SHA1


9179 
	$mg_hash_sha1_v
(
size_t
 
num_msgs
, c⁄° 
uöt8_t
 *
msgs
[],

9180 c⁄° 
size_t
 *
msg_Àns
, 
uöt8_t
 *
dige°
) {

9181 
size_t
 
i
;

9182 
cs_sha1_˘x
 
sha_˘x
;

9183 
	`cs_sha1_öô
(&
sha_˘x
);

9184 
i
 = 0; i < 
num_msgs
; i++) {

9185 
	`cs_sha1_upd©e
(&
sha_˘x
, 
msgs
[
i
], 
msg_Àns
[i]);

9187 
	`cs_sha1_föÆ
(
dige°
, &
sha_˘x
);

9188 
	}
}

9190 
mg_hash_sha1_v
(
size_t
 
num_msgs
, c⁄° 
uöt8_t
 *
msgs
[],

9191 c⁄° 
size_t
 *
msg_Àns
, 
uöt8_t
 *
dige°
);

9194 
MG_INTERNAL
 
	$mg_ws_h™dshake
(
mg_c⁄√˘i⁄
 *
nc
,

9195 c⁄° 
mg_°r
 *
key
) {

9196 c⁄° *
magic
 = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";

9197 c⁄° 
uöt8_t
 *
msgs
[2] = {(c⁄° uöt8_à*Ë
key
->
p
, (c⁄° uöt8_à*Ë
magic
};

9198 c⁄° 
size_t
 
msg_Àns
[2] = {
key
->
Àn
, 36};

9199 
sha
[20];

9200 
b64_sha
[30];

9202 
	`mg_hash_sha1_v
(2, 
msgs
, 
msg_Àns
, 
sha
);

9203 
	`mg_ba£64_ícode
(
sha
, (sha), 
b64_sha
);

9204 
	`mg_¥ötf
(
nc
, "%s%s%s",

9209 
b64_sha
, "\r\n\r\n");

9210 
	`DBG
(("%∞%.*†%s", 
nc
, (Ë
key
->
Àn
, key->
p
, 
b64_sha
));

9211 
	}
}

9213 
	$mg_£nd_websockë_h™dshake2
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
,

9214 c⁄° *
ho°
, c⁄° *
¥Ÿocﬁ
,

9215 c⁄° *
exåa_hódîs
) {

9216 
	`mg_£nd_websockë_h™dshake3
(
nc
, 
∑th
, 
ho°
, 
¥Ÿocﬁ
, 
exåa_hódîs
, 
NULL
,

9217 
NULL
);

9218 
	}
}

9220 
	$mg_£nd_websockë_h™dshake3
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
,

9221 c⁄° *
ho°
, c⁄° *
¥Ÿocﬁ
,

9222 c⁄° *
exåa_hódîs
, c⁄° *
u£r
,

9223 c⁄° *
∑ss
) {

9224 
mbuf
 
auth
;

9225 
key
[25];

9226 
uöt32_t
 
n⁄˚
[4];

9227 
n⁄˚
[0] = 
	`mg_ws_øndom_mask
();

9228 
n⁄˚
[1] = 
	`mg_ws_øndom_mask
();

9229 
n⁄˚
[2] = 
	`mg_ws_øndom_mask
();

9230 
n⁄˚
[3] = 
	`mg_ws_øndom_mask
();

9231 
	`mg_ba£64_ícode
((*Ë&
n⁄˚
, “⁄˚), 
key
);

9233 
	`mbuf_öô
(&
auth
, 0);

9234 i‡(
u£r
 !
NULL
) {

9235 
	`mg_basic_auth_hódî
(
u£r
, 
∑ss
, &
auth
);

9244 
	`mg_¥ötf
(
nc
,

9251 
∑th
, (Ë
auth
.
Àn
, (auth.
buf
 =
NULL
 ? "" :áuth.buf), 
key
);

9254 i‡(
ho°
 !
MG_WS_NO_HOST_HEADER_MAGIC
) {

9255 
	`mg_¥ötf
(
nc
, "Ho°: %s\r\n", 
ho°
);

9257 i‡(
¥Ÿocﬁ
 !
NULL
) {

9258 
	`mg_¥ötf
(
nc
, "Sec-WebSockë-PrŸocﬁ: %s\r\n", 
¥Ÿocﬁ
);

9260 i‡(
exåa_hódîs
 !
NULL
) {

9261 
	`mg_¥ötf
(
nc
, "%s", 
exåa_hódîs
);

9263 
	`mg_¥ötf
(
nc
, "\r\n");

9265 
	`mbuf_‰ì
(&
auth
);

9266 
	}
}

9268 
	$mg_£nd_websockë_h™dshake
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
,

9269 c⁄° *
exåa_hódîs
) {

9270 
	`mg_£nd_websockë_h™dshake2
(
nc
, 
∑th
, 
MG_WS_NO_HOST_HEADER_MAGIC
, 
NULL
,

9271 
exåa_hódîs
);

9272 
	}
}

9274 
mg_c⁄√˘i⁄
 *
	$mg_c⁄√˘_ws_›t
(
mg_mgr
 *
mgr
,

9275 
mg_evít_h™dÀr_t
 
ev_h™dÀr
,

9276 
mg_c⁄√˘_›ts
 
›ts
,

9277 c⁄° *
uæ
, c⁄° *
¥Ÿocﬁ
,

9278 c⁄° *
exåa_hódîs
) {

9279 *
u£r
 = 
NULL
, *
∑ss
 = NULL, *
addr
 = NULL;

9280 c⁄° *
∑th
 = 
NULL
;

9281 
mg_c⁄√˘i⁄
 *
nc
 =

9282 
	`mg_c⁄√˘_hâp_ba£
(
mgr
, 
ev_h™dÀr
, 
›ts
, "ws://", "wss://", 
uæ
, &
∑th
,

9283 &
u£r
, &
∑ss
, &
addr
);

9285 i‡(
nc
 !
NULL
) {

9286 
	`mg_£nd_websockë_h™dshake3
(
nc
, 
∑th
, 
addr
, 
¥Ÿocﬁ
, 
exåa_hódîs
, 
u£r
,

9287 
∑ss
);

9290 
	`MG_FREE
(
addr
);

9291 
	`MG_FREE
(
u£r
);

9292 
	`MG_FREE
(
∑ss
);

9293  
nc
;

9294 
	}
}

9296 
mg_c⁄√˘i⁄
 *
	$mg_c⁄√˘_ws
(
mg_mgr
 *
mgr
,

9297 
mg_evít_h™dÀr_t
 
ev_h™dÀr
,

9298 c⁄° *
uæ
, c⁄° *
¥Ÿocﬁ
,

9299 c⁄° *
exåa_hódîs
) {

9300 
mg_c⁄√˘_›ts
 
›ts
;

9301 
	`mem£t
(&
›ts
, 0, (opts));

9302  
	`mg_c⁄√˘_ws_›t
(
mgr
, 
ev_h™dÀr
, 
›ts
, 
uæ
, 
¥Ÿocﬁ
, 
exåa_hódîs
);

9303 
	}
}

9305 #ifde‡
MG_MODULE_LINES


9318 #i‚de‡
MAX


9319 
	#MAX
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

9322 c⁄° *
	$mg_skù
(c⁄° *
s
, c⁄° *
íd
, c⁄° *
dñims
,

9323 
mg_°r
 *
v
) {

9324 
v
->
p
 = 
s
;

9325 
s
 < 
íd
 && 
	`°rchr
(
dñims
, *(*ËsË=
NULL
) s++;

9326 
v
->
Àn
 = 
s
 - v->
p
;

9327 
s
 < 
íd
 && 
	`°rchr
(
dñims
, *(*ËsË!
NULL
) s++;

9328  
s
;

9329 
	}
}

9331 
	$lowîˇ£
(c⁄° *
s
) {

9332  
	`tﬁowî
(*(c⁄° *Ë
s
);

9333 
	}
}

9335 #i‡
MG_ENABLE_FILESYSTEM


9336 
	$mg_°©
(c⁄° *
∑th
, 
cs_°©_t
 *
°
) {

9337 #ifde‡
_WIN32


9338 
wch¨_t
 
w∑th
[
MAX_PATH_SIZE
];

9339 
	`to_wch¨
(
∑th
, 
w∑th
, 
	`ARRAY_SIZE
(wpath));

9340 
	`DBG
(("[%ls] -> %d", 
w∑th
, 
	`_w°©i64
(w∑th, 
°
)));

9341  
	`_w°©i64
(
w∑th
, 
°
);

9343  
	`°©
(
∑th
, 
°
);

9345 
	}
}

9347 
FILE
 *
	$mg_f›í
(c⁄° *
∑th
, c⁄° *
mode
) {

9348 #ifde‡
_WIN32


9354  
	`f›í
(
∑th
, 
mode
);

9356  
	`f›í
(
∑th
, 
mode
);

9358 
	}
}

9360 
	$mg_›í
(c⁄° *
∑th
, 
Êag
, 
mode
) {

9361 #i‡
	`deföed
(
_WIN32
Ë&& !deföed(
WINCE
)

9362 
wch¨_t
 
w∑th
[
MAX_PATH_SIZE
];

9363 
	`to_wch¨
(
∑th
, 
w∑th
, 
	`ARRAY_SIZE
(wpath));

9364  
	`_w›í
(
w∑th
, 
Êag
, 
mode
);

9366  
	`›í
(
∑th
, 
Êag
, 
mode
);

9368 
	}
}

9371 
	$mg_ba£64_ícode
(c⁄° *
§c
, 
§c_Àn
, *
d°
) {

9372 
	`cs_ba£64_ícode
(
§c
, 
§c_Àn
, 
d°
);

9373 
	}
}

9375 
	$mg_ba£64_decode
(c⁄° *
s
, 
Àn
, *
d°
) {

9376  
	`cs_ba£64_decode
(
s
, 
Àn
, 
d°
, 
NULL
);

9377 
	}
}

9379 #i‡
MG_ENABLE_THREADS


9380 *
mg_°¨t_thªad
(*(*
f
)(*), *
p
) {

9381 #ifde‡
WINCE


9382  (*Ë
Cª©eThªad
(
NULL
, 0, (
LPTHREAD_START_ROUTINE
Ë
f
, 
p
, 0, NULL);

9383 #ñi‡
deföed
(
_WIN32
)

9384  (*Ë
_begöthªad
(((
__cde˛
 *Ë(*ËË
f
, 0, 
p
);

9386 
±hªad_t
 
	gthªad_id
 = (pthread_t) 0;

9387 
±hªad_©å_t
 
	g©å
;

9389 (Ë
±hªad_©å_öô
(&
©å
);

9390 (Ë
±hªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_DETACHED
);

9392 #i‡
deföed
(
MG_STACK_SIZE
) && MG_STACK_SIZE > 1

9393 (Ë
±hªad_©å_£t°acksize
(&
©å
, 
MG_STACK_SIZE
);

9396 
±hªad_¸óã
(&
thªad_id
, &
©å
, 
f
, 
p
);

9397 
±hªad_©å_de°roy
(&
©å
);

9399  (*Ë
	gthªad_id
;

9405 
	$mg_£t_˛o£_⁄_exec
(
sock_t
 
sock
) {

9406 #i‡
	`deföed
(
_WIN32
Ë&& !deföed(
WINCE
)

9407 (Ë
	`SëH™dÀInf‹m©i⁄
((
HANDLE
Ë
sock
, 
HANDLE_FLAG_INHERIT
, 0);

9408 #ñi‡
	`deföed
(
__unix__
)

9409 
	`f˙é
(
sock
, 
F_SETFD
, 
FD_CLOEXEC
);

9411 (Ë
sock
;

9413 
	}
}

9415 
	$mg_sock_addr_to_°r
(c⁄° 
sockë_addªss
 *
ß
, *
buf
, 
size_t
 
Àn
,

9416 
Êags
) {

9417 
is_v6
;

9418 i‡(
buf
 =
NULL
 || 
Àn
 <= 0) ;

9419 
	`mem£t
(
buf
, 0, 
Àn
);

9420 #i‡
MG_ENABLE_IPV6


9421 
is_v6
 = 
ß
->ß.
ß_Ámûy
 =
AF_INET6
;

9423 
is_v6
 = 0;

9425 i‡(
Êags
 & 
MG_SOCK_STRINGIFY_IP
) {

9426 #i‡
MG_ENABLE_IPV6


9427 c⁄° *
addr
 = 
NULL
;

9428 *
°¨t
 = 
buf
;

9429 
sockÀn_t
 
ˇ∑côy
 = 
Àn
;

9430 i‡(!
is_v6
) {

9431 
addr
 = &
ß
->
sö
.
sö_addr
;

9433 
addr
 = (*Ë&
ß
->
sö6
.
sö6_addr
;

9434 i‡(
Êags
 & 
MG_SOCK_STRINGIFY_PORT
) {

9435 *
buf
 = '[';

9436 
°¨t
++;

9437 
ˇ∑côy
--;

9440 i‡(
	`öë_¡›
(
ß
->ß.
ß_Ámûy
, 
addr
, 
°¨t
, 
ˇ∑côy
Ë=
NULL
) {

9441 
˛ónup
;

9443 #ñi‡
	`deföed
(
_WIN32
Ë|| 
MG_LWIP
 || (
MG_NET_IF
 =
MG_NET_IF_PIC32
)

9445 *
addr_°r
 = 
	`öë_¡ﬂ
(
ß
->
sö
.
sö_addr
);

9446 i‡(
addr_°r
 !
NULL
) {

9447 
	`°∫˝y
(
buf
, 
	`öë_¡ﬂ
(
ß
->
sö
.
sö_addr
), 
Àn
 - 1);

9449 
˛ónup
;

9452 i‡(
	`öë_¡›
(
AF_INET
, (*Ë&
ß
->
sö
.
sö_addr
, 
buf
, 
Àn
 - 1Ë=
NULL
) {

9453 
˛ónup
;

9457 i‡(
Êags
 & 
MG_SOCK_STRINGIFY_PORT
) {

9458 
p‹t
 = 
	`¡ohs
(
ß
->
sö
.
sö_p‹t
);

9459 i‡(
Êags
 & 
MG_SOCK_STRINGIFY_IP
) {

9460 
buf_Àn
 = 
	`°æí
(
buf
);

9461 
	`¢¥ötf
(
buf
 + 
buf_Àn
, 
Àn
 - (buf_À¿+ 1), "%s:%d", (
is_v6
 ? "]" : ""),

9462 
p‹t
);

9464 
	`¢¥ötf
(
buf
, 
Àn
, "%d", 
p‹t
);

9470 
˛ónup
:

9471 *
buf
 = '\0';

9472 
	}
}

9474 
	$mg_c⁄n_addr_to_°r
(
mg_c⁄√˘i⁄
 *
nc
, *
buf
, 
size_t
 
Àn
,

9475 
Êags
) {

9476 
sockë_addªss
 
ß
;

9477 
	`mem£t
(&
ß
, 0, (sa));

9478 
	`mg_if_gë_c⁄n_addr
(
nc
, 
Êags
 & 
MG_SOCK_STRINGIFY_REMOTE
, &
ß
);

9479 
	`mg_sock_addr_to_°r
(&
ß
, 
buf
, 
Àn
, 
Êags
);

9480 
	}
}

9482 #i‡
MG_ENABLE_HEXDUMP


9483 
	$mg_hexdump_n
(c⁄° *
buf
, 
Àn
, *
d°
, 
d°_Àn
,

9484 
off£t
) {

9485 c⁄° *
p
 = (c⁄° *Ë
buf
;

9486 
ascii
[17] = "";

9487 
i
, 
idx
, 
n
 = 0;

9489 
i
 = 0; i < 
Àn
; i++) {

9490 
idx
 = 
i
 % 16;

9491 i‡(
idx
 == 0) {

9492 i‡(
i
 > 0Ë
n
 +
	`¢¥ötf
(
d°
 +Ç, 
	`MAX
(
d°_Àn
 -Ç, 0), " %s\n", 
ascii
);

9493 
n
 +
	`¢¥ötf
(
d°
 +Ç, 
	`MAX
(
d°_Àn
 -Ç, 0), "%04x ", 
i
 + 
off£t
);

9495 i‡(
d°_Àn
 - 
n
 < 0) {

9496  
n
;

9498 
n
 +
	`¢¥ötf
(
d°
 +Ç, 
	`MAX
(
d°_Àn
 -Ç, 0), " %02x", 
p
[
i
]);

9499 
ascii
[
idx
] = 
p
[
i
] < 0x20 ||Ö[i] > 0x7e ? '.' :Ö[i];

9500 
ascii
[
idx
 + 1] = '\0';

9503 
i
++ % 16Ë
n
 +
	`¢¥ötf
(
d°
 +Ç, 
	`MAX
(
d°_Àn
 -Ç, 0), "%s", " ");

9504 
n
 +
	`¢¥ötf
(
d°
 +Ç, 
	`MAX
(
d°_Àn
 -Ç, 0), " %s\n", 
ascii
);

9506  
n
;

9507 
	}
}

9509 
	$mg_hexdump
(c⁄° *
buf
, 
Àn
, *
d°
, 
d°_Àn
) {

9510  
	`mg_hexdump_n
(
buf
, 
Àn
, 
d°
, 
d°_Àn
, 0);

9511 
	}
}

9513 
	$mg_hexdumpf
(
FILE
 *
Â
, c⁄° *
buf
, 
Àn
) {

9514 
tmp
[80];

9515 
off£t
 = 0, 
n
;

9516 
Àn
 > 0) {

9517 
n
 = (
Àn
 < 16 ?Üen : 16);

9518 
	`mg_hexdump_n
(((c⁄° *Ë
buf
Ë+ 
off£t
, 
n
, 
tmp
, (tmp), offset);

9519 
	`Âuts
(
tmp
, 
Â
);

9520 
off£t
 +
n
;

9521 
Àn
 -
n
;

9523 
	}
}

9525 
	$mg_hexdump_c⁄√˘i⁄
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
,

9526 c⁄° *
buf
, 
num_byãs
, 
ev
) {

9527 
FILE
 *
Â
 = 
NULL
;

9528 *
hexbuf
, 
§c
[60], 
d°
[60];

9529 
buf_size
 = 
num_byãs
 * 5 + 100;

9531 i‡(
	`°rcmp
(
∑th
, "-") == 0) {

9532 
Â
 = 
°dout
;

9533 } i‡(
	`°rcmp
(
∑th
, "--") == 0) {

9534 
Â
 = 
°dîr
;

9535 #i‡
MG_ENABLE_FILESYSTEM


9537 
Â
 = 
	`mg_f›í
(
∑th
, "a");

9540 i‡(
Â
 =
NULL
) ;

9542 
	`mg_c⁄n_addr_to_°r
(
nc
, 
§c
, (src),

9543 
MG_SOCK_STRINGIFY_IP
 | 
MG_SOCK_STRINGIFY_PORT
);

9544 
	`mg_c⁄n_addr_to_°r
(
nc
, 
d°
, (d°), 
MG_SOCK_STRINGIFY_IP
 |

9545 
MG_SOCK_STRINGIFY_PORT
 |

9546 
MG_SOCK_STRINGIFY_REMOTE
);

9547 
	`Ârötf
(

9548 
Â
, "%lu %∞%†%†%†%d\n", (Ë
	`mg_time
(), (*Ë
nc
, 
§c
,

9549 
ev
 =
MG_EV_RECV
 ? "<-" :Év =
MG_EV_SEND


9551 : 
ev
 =
MG_EV_ACCEPT


9553 : 
ev
 =
MG_EV_CONNECT
 ? "C>" : "XX",

9554 
d°
, 
num_byãs
);

9555 i‡(
num_byãs
 > 0 && (
hexbuf
 = (*Ë
	`MG_MALLOC
(
buf_size
)Ë!
NULL
) {

9556 
	`mg_hexdump
(
buf
, 
num_byãs
, 
hexbuf
, 
buf_size
);

9557 
	`Ârötf
(
Â
, "%s", 
hexbuf
);

9558 
	`MG_FREE
(
hexbuf
);

9560 i‡(
Â
 !
°dö
 && f∞!
°dout
Ë
	`f˛o£
(fp);

9561 
	}
}

9564 
	$mg_is_big_ídün
() {

9565 c⁄° 
n
 = 1;

9567  ((*Ë&
n
)[0] == 0;

9568 
	}
}

9570 c⁄° *
	$mg_√xt_comma_li°_íåy
(c⁄° *
li°
, 
mg_°r
 *
vÆ
,

9571 
mg_°r
 *
eq_vÆ
) {

9572 i‡(
li°
 =
NULL
 || *list == '\0') {

9574 
li°
 = 
NULL
;

9576 
vÆ
->
p
 = 
li°
;

9577 i‡((
li°
 = 
	`°rchr
(
vÆ
->
p
, ',')Ë!
NULL
) {

9579 
vÆ
->
Àn
 = 
li°
 - vÆ->
p
;

9580 
li°
++;

9583 
li°
 = 
vÆ
->
p
 + 
	`°æí
(val->p);

9584 
vÆ
->
Àn
 = 
li°
 - vÆ->
p
;

9587 i‡(
eq_vÆ
 !
NULL
) {

9590 
eq_vÆ
->
Àn
 = 0;

9591 
eq_vÆ
->
p
 = (c⁄° *Ë
	`memchr
(
vÆ
->p, '=', vÆ->
Àn
);

9592 i‡(
eq_vÆ
->
p
 !
NULL
) {

9593 
eq_vÆ
->
p
++;

9594 
eq_vÆ
->
Àn
 = 
vÆ
->
p
 + val->len -Éq_val->p;

9595 
vÆ
->
Àn
 = (
eq_vÆ
->
p
 - val->p) - 1;

9600  
li°
;

9601 
	}
}

9603 
	$mg_m©ch_¥efix_n
(c⁄° 
mg_°r
 
∑âîn
, c⁄° mg_°∏
°r
) {

9604 c⁄° *
‹_°r
;

9605 
size_t
 
Àn
, 
i
 = 0, 
j
 = 0;

9606 
ªs
;

9608 i‡((
‹_°r
 = (c⁄° *Ë
	`memchr
(
∑âîn
.
p
, '|',Ö©ã∫.
Àn
)Ë!
NULL
) {

9609 
mg_°r
 
p°r
 = {
∑âîn
.
p
, (
size_t
)(
‹_°r
 -Öattern.p)};

9610 
ªs
 = 
	`mg_m©ch_¥efix_n
(
p°r
, 
°r
);

9611 i‡(
ªs
 > 0) Ñes;

9612 
p°r
.
p
 = 
‹_°r
 + 1;

9613 
p°r
.
Àn
 = (
∑âîn
.
p
 +Ö©ã∫.ÀnË- (
‹_°r
 + 1);

9614  
	`mg_m©ch_¥efix_n
(
p°r
, 
°r
);

9617 ; 
i
 < 
∑âîn
.
Àn
; i++, 
j
++) {

9618 i‡(
∑âîn
.
p
[
i
] ='?' && 
j
 !
°r
.
Àn
) {

9620 } i‡(
∑âîn
.
p
[
i
] == '$') {

9621  
j
 =
°r
.
Àn
 ? () j : -1;

9622 } i‡(
∑âîn
.
p
[
i
] == '*') {

9623 
i
++;

9624 i‡(
∑âîn
.
p
[
i
] == '*') {

9625 
i
++;

9626 
Àn
 = 
°r
.À¿- 
j
;

9628 
Àn
 = 0;

9629 
j
 + 
Àn
 !
°r
.À¿&& så.
p
[j +Üen] != '/') {

9630 
Àn
++;

9633 i‡(
i
 =
∑âîn
.
Àn
) {

9634  
j
 + 
Àn
;

9637 c⁄° 
mg_°r
 
p°r
 = {
∑âîn
.
p
 + 
i
,Ö©ã∫.
Àn
 - i};

9638 c⁄° 
mg_°r
 
s°r
 = {
°r
.
p
 + 
j
 + 
Àn
, str.len - j -Üen};

9639 
ªs
 = 
	`mg_m©ch_¥efix_n
(
p°r
, 
s°r
);

9640 } 
ªs
 =-1 && 
Àn
-- > 0);

9641  
ªs
 =-1 ? -1 : (Ë(
j
 +Ñe†+ 
Àn
);

9642 } i‡(
	`lowîˇ£
(&
∑âîn
.
p
[
i
]Ë!lowîˇ£(&
°r
.p[
j
])) {

9646  
j
;

9647 
	}
}

9649 
	$mg_m©ch_¥efix
(c⁄° *
∑âîn
, 
∑âîn_Àn
, c⁄° *
°r
) {

9650 c⁄° 
mg_°r
 
p°r
 = {
∑âîn
, (
size_t
Ë
∑âîn_Àn
};

9651  
	`mg_m©ch_¥efix_n
(
p°r
, 
	`mg_mk_°r
(
°r
));

9652 
	}
}

9654 
DO_NOT_WARN_UNUSED
 
MG_INTERNAL
 
	$mg_gë_î∫o
() {

9655 #i‚de‡
WINCE


9656  
î∫o
;

9659  
	`GëLa°Eº‹
();

9661 
	}
}

9663 
	$mg_mbuf_≠≥nd_ba£64_putc
(
ch
, *
u£r_d©a
) {

9664 
mbuf
 *mbu‡(mbu‡*Ë
u£r_d©a
;

9665 
	`mbuf_≠≥nd
(
mbuf
, &
ch
, (ch));

9666 
	}
}

9668 
	$mg_mbuf_≠≥nd_ba£64
(
mbuf
 *mbuf, c⁄° *
d©a
, 
size_t
 
Àn
) {

9669 
cs_ba£64_˘x
 
˘x
;

9670 
	`cs_ba£64_öô
(&
˘x
, 
mg_mbuf_≠≥nd_ba£64_putc
, 
mbuf
);

9671 
	`cs_ba£64_upd©e
(&
˘x
, (c⁄° *Ë
d©a
, 
Àn
);

9672 
	`cs_ba£64_föish
(&
˘x
);

9673 
	}
}

9675 
	$mg_basic_auth_hódî
(c⁄° *
u£r
, c⁄° *
∑ss
,

9676 
mbuf
 *
buf
) {

9677 c⁄° *
hódî_¥efix
 = "Authorization: Basic ";

9678 c⁄° *
hódî_suffix
 = "\r\n";

9680 
cs_ba£64_˘x
 
˘x
;

9681 
	`cs_ba£64_öô
(&
˘x
, 
mg_mbuf_≠≥nd_ba£64_putc
, 
buf
);

9683 
	`mbuf_≠≥nd
(
buf
, 
hódî_¥efix
, 
	`°æí
(header_prefix));

9685 
	`cs_ba£64_upd©e
(&
˘x
, 
u£r
, 
	`°æí
(user));

9686 i‡(
∑ss
 !
NULL
) {

9687 
	`cs_ba£64_upd©e
(&
˘x
, ":", 1);

9688 
	`cs_ba£64_upd©e
(&
˘x
, 
∑ss
, 
	`°æí
(pass));

9690 
	`cs_ba£64_föish
(&
˘x
);

9691 
	`mbuf_≠≥nd
(
buf
, 
hódî_suffix
, 
	`°æí
(header_suffix));

9692 
	}
}

9693 #ifde‡
MG_MODULE_LINES


9701 #i‡
MG_ENABLE_MQTT


9703 
	~<°rög.h
>

9708 
uöt16_t
 
	$gëu16
(c⁄° *
p
) {

9709 c⁄° 
uöt8_t
 *
up
 = (c⁄° uöt8_à*Ë
p
;

9710  (
up
[0] << 8) + up[1];

9711 
	}
}

9713 c⁄° *
	$sˇ¡o
(c⁄° *
p
, 
mg_°r
 *
s
) {

9714 
s
->
Àn
 = 
	`gëu16
(
p
);

9715 
s
->
p
 =Ö + 2;

9716  
s
->
p
 + s->
Àn
;

9717 
	}
}

9719 
MG_INTERNAL
 
	$∑r£_mqâ
(
mbuf
 *
io
, 
mg_mqâ_mesßge
 *
mm
) {

9720 
uöt8_t
 
hódî
;

9721 
size_t
 
Àn
 = 0;

9722 
cmd
;

9723 c⁄° *
p
 = &
io
->
buf
[1], *
íd
;

9725 i‡(
io
->
Àn
 < 2)  -1;

9726 
hódî
 = 
io
->
buf
[0];

9727 
cmd
 = 
hódî
 >> 4;

9731 
Àn
 +(*
p
 & 127Ë<< 7 * (∞- &
io
->
buf
[1]);

9732 } (*
p
++ & 128Ë!0 && ((
size_t
)’ - 
io
->
buf
Ë<io->
Àn
));

9734 
íd
 = 
p
 + 
Àn
;

9735 i‡(
íd
 > 
io
->
buf
 + io->
Àn
 + 1) {

9739 
mm
->
cmd
 = cmd;

9740 
mm
->
qos
 = 
	`MG_MQTT_GET_QOS
(
hódî
);

9742 
cmd
) {

9743 
MG_MQTT_CMD_CONNECT
: {

9744 
p
 = 
	`sˇ¡o
’, &
mm
->
¥Ÿocﬁ_«me
);

9745 
mm
->
¥Ÿocﬁ_vîsi⁄
 = *(
uöt8_t
 *Ë
p
++;

9746 
mm
->
c⁄√˘_Êags
 = *(
uöt8_t
 *Ë
p
++;

9747 
mm
->
kìp_Æive_timî
 = 
	`gëu16
(
p
);

9748 
p
 += 2;

9749 i‡(
p
 < 
íd
Ë∞
	`sˇ¡o
’, &
mm
->
˛õ¡_id
);

9750 i‡(
p
 < 
íd
 && (
mm
->
c⁄√˘_Êags
 & 
MG_MQTT_HAS_WILL
))

9751 
p
 = 
	`sˇ¡o
’, &
mm
->
wûl_t›ic
);

9752 i‡(
p
 < 
íd
 && (
mm
->
c⁄√˘_Êags
 & 
MG_MQTT_HAS_WILL
))

9753 
p
 = 
	`sˇ¡o
’, &
mm
->
wûl_mesßge
);

9754 i‡(
p
 < 
íd
 && (
mm
->
c⁄√˘_Êags
 & 
MG_MQTT_HAS_USER_NAME
))

9755 
p
 = 
	`sˇ¡o
’, &
mm
->
u£r_«me
);

9756 i‡(
p
 < 
íd
 && (
mm
->
c⁄√˘_Êags
 & 
MG_MQTT_HAS_PASSWORD
))

9757 
p
 = 
	`sˇ¡o
’, &
mm
->
∑ssw‹d
);

9759 
	`LOG
(
LL_DEBUG
,

9762 
Àn
, (Ë
mm
->
c⁄√˘_Êags
, (Ëmm->
kìp_Æive_timî
,

9763 (Ë
mm
->
¥Ÿocﬁ_«me
.
Àn
, mm->¥Ÿocﬁ_«me.
p
,

9764 (Ë
mm
->
˛õ¡_id
.
Àn
, mm->˛õ¡_id.
p
, (Ëmm->
wûl_t›ic
.len,

9765 
mm
->
wûl_t›ic
.
p
, (Ëmm->
wûl_mesßge
.
Àn
, mm->will_message.p,

9766 (Ë
mm
->
u£r_«me
.
Àn
, mm->u£r_«me.
p
, (Ëmm->
∑ssw‹d
.len,

9767 
mm
->
∑ssw‹d
.
p
));

9770 
MG_MQTT_CMD_CONNACK
:

9771 
mm
->
c⁄«ck_ªt_code
 = 
p
[1];

9773 
MG_MQTT_CMD_PUBACK
:

9774 
MG_MQTT_CMD_PUBREC
:

9775 
MG_MQTT_CMD_PUBREL
:

9776 
MG_MQTT_CMD_PUBCOMP
:

9777 
MG_MQTT_CMD_SUBACK
:

9778 
mm
->
mesßge_id
 = 
	`gëu16
(
p
);

9780 
MG_MQTT_CMD_PUBLISH
: {

9781 i‡(
	`MG_MQTT_GET_QOS
(
hódî
) > 0) {

9782 
mm
->
mesßge_id
 = 
	`gëu16
(
p
);

9783 
p
 += 2;

9785 
p
 = 
	`sˇ¡o
’, &
mm
->
t›ic
);

9787 
mm
->
∑ylﬂd
.
p
 =Ö;

9788 
mm
->
∑ylﬂd
.
Àn
 = 
íd
 - 
p
;

9791 
MG_MQTT_CMD_SUBSCRIBE
:

9792 
mm
->
mesßge_id
 = 
	`gëu16
(
p
);

9793 
p
 += 2;

9798 
mm
->
∑ylﬂd
.
p
 =Ö;

9799 
mm
->
∑ylﬂd
.
Àn
 = 
íd
 - 
p
;

9806  
íd
 - 
io
->
buf
;

9807 
	}
}

9809 
	$mqâ_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
, *
ev_d©a
) {

9810 
Àn
;

9811 
mbuf
 *
io
 = &
nc
->
ªcv_mbuf
;

9812 
mg_mqâ_mesßge
 
mm
;

9813 
	`mem£t
(&
mm
, 0, (mm));

9815 
nc
->
	`h™dÀr
“c, 
ev
, 
ev_d©a
);

9817 
ev
) {

9818 
MG_EV_RECV
:

9819 
Àn
 = 
	`∑r£_mqâ
(
io
, &
mm
);

9820 i‡(
Àn
 == -1) ;

9821 
nc
->
	`h™dÀr
“c, 
MG_MQTT_EVENT_BASE
 + 
mm
.
cmd
, &mm);

9822 
	`mbuf_ªmove
(
io
, 
Àn
);

9825 
	}
}

9827 
	$mg_mqâ_¥Ÿo_d©a_de°ru˘‹
(*
¥Ÿo_d©a
) {

9828 
	`MG_FREE
(
¥Ÿo_d©a
);

9829 
	}
}

9831 
	$mg_£t_¥Ÿocﬁ_mqâ
(
mg_c⁄√˘i⁄
 *
nc
) {

9832 
nc
->
¥Ÿo_h™dÀr
 = 
mqâ_h™dÀr
;

9833 
nc
->
¥Ÿo_d©a
 = 
	`MG_CALLOC
(1, (
mg_mqâ_¥Ÿo_d©a
));

9834 
nc
->
¥Ÿo_d©a_de°ru˘‹
 = 
mg_mqâ_¥Ÿo_d©a_de°ru˘‹
;

9835 
	}
}

9837 
	$mg_£nd_mqâ_h™dshake
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
˛õ¡_id
) {

9838 
mg_£nd_mqâ_h™dshake_›ts
 
›ts
;

9839 
	`mg_£nd_mqâ_h™dshake_›t
(
nc
, 
˛õ¡_id
, 
›ts
);

9840 
	}
}

9842 
	$mg_£nd_mqâ_h™dshake_›t
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
˛õ¡_id
,

9843 
mg_£nd_mqâ_h™dshake_›ts
 
›ts
) {

9844 
uöt8_t
 
hódî
 = 
MG_MQTT_CMD_CONNECT
 << 4;

9845 
uöt8_t
 
ªm_Àn
;

9846 
uöt16_t
 
kìp_Æive
;

9847 
uöt16_t
 
Àn
;

9848 
mg_mqâ_¥Ÿo_d©a
 *
pd
 = (mg_mqâ_¥Ÿo_d©®*Ë
nc
->
¥Ÿo_d©a
;

9855 
ªm_Àn
 = 9 + 1 + 2 + 2 + (
uöt8_t
Ë
	`°æí
(
˛õ¡_id
);

9857 i‡(
›ts
.
u£r_«me
 !
NULL
) {

9858 
›ts
.
Êags
 |
MG_MQTT_HAS_USER_NAME
;

9859 
ªm_Àn
 +(
uöt8_t
Ë
	`°æí
(
›ts
.
u£r_«me
) + 2;

9861 i‡(
›ts
.
∑ssw‹d
 !
NULL
) {

9862 
›ts
.
Êags
 |
MG_MQTT_HAS_PASSWORD
;

9863 
ªm_Àn
 +(
uöt8_t
Ë
	`°æí
(
›ts
.
∑ssw‹d
) + 2;

9865 i‡(
›ts
.
wûl_t›ic
 !
NULL
 && o±s.
wûl_mesßge
 != NULL) {

9866 
›ts
.
Êags
 |
MG_MQTT_HAS_WILL
;

9867 
ªm_Àn
 +(
uöt8_t
Ë
	`°æí
(
›ts
.
wûl_t›ic
) + 2;

9868 
ªm_Àn
 +(
uöt8_t
Ë
	`°æí
(
›ts
.
wûl_mesßge
) + 2;

9871 
	`mg_£nd
(
nc
, &
hódî
, 1);

9872 
	`mg_£nd
(
nc
, &
ªm_Àn
, 1);

9873 
	`mg_£nd
(
nc
, "\00\06MQIsdp\03", 9);

9874 
	`mg_£nd
(
nc
, &
›ts
.
Êags
, 1);

9876 i‡(
›ts
.
kìp_Æive
 == 0) {

9877 
›ts
.
kìp_Æive
 = 60;

9880 
kìp_Æive
 = 
	`ht⁄s
(
›ts
.keep_alive);

9881 
	`mg_£nd
(
nc
, &
kìp_Æive
, 2);

9883 
Àn
 = 
	`ht⁄s
((
uöt16_t
Ë
	`°æí
(
˛õ¡_id
));

9884 
	`mg_£nd
(
nc
, &
Àn
, 2);

9885 
	`mg_£nd
(
nc
, 
˛õ¡_id
, 
	`°æí
(client_id));

9887 i‡(
›ts
.
Êags
 & 
MG_MQTT_HAS_WILL
) {

9888 
Àn
 = 
	`ht⁄s
((
uöt16_t
Ë
	`°æí
(
›ts
.
wûl_t›ic
));

9889 
	`mg_£nd
(
nc
, &
Àn
, 2);

9890 
	`mg_£nd
(
nc
, 
›ts
.
wûl_t›ic
, 
	`°æí
(opts.will_topic));

9892 
Àn
 = 
	`ht⁄s
((
uöt16_t
Ë
	`°æí
(
›ts
.
wûl_mesßge
));

9893 
	`mg_£nd
(
nc
, &
Àn
, 2);

9894 
	`mg_£nd
(
nc
, 
›ts
.
wûl_mesßge
, 
	`°æí
(opts.will_message));

9897 i‡(
›ts
.
Êags
 & 
MG_MQTT_HAS_USER_NAME
) {

9898 
Àn
 = 
	`ht⁄s
((
uöt16_t
Ë
	`°æí
(
›ts
.
u£r_«me
));

9899 
	`mg_£nd
(
nc
, &
Àn
, 2);

9900 
	`mg_£nd
(
nc
, 
›ts
.
u£r_«me
, 
	`°æí
(opts.user_name));

9902 i‡(
›ts
.
Êags
 & 
MG_MQTT_HAS_PASSWORD
) {

9903 
Àn
 = 
	`ht⁄s
((
uöt16_t
Ë
	`°æí
(
›ts
.
∑ssw‹d
));

9904 
	`mg_£nd
(
nc
, &
Àn
, 2);

9905 
	`mg_£nd
(
nc
, 
›ts
.
∑ssw‹d
, 
	`°æí
(opts.password));

9908 i‡(
pd
 !
NULL
) {

9909 
pd
->
kìp_Æive
 = 
›ts
.keep_alive;

9911 
	}
}

9913 
	$mg_mqâ_¥ïíd_hódî
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt8_t
 
cmd
,

9914 
uöt8_t
 
Êags
, 
size_t
 
Àn
) {

9915 
size_t
 
off
 = 
nc
->
£nd_mbuf
.
Àn
 -Üen;

9916 
uöt8_t
 
hódî
 = 
cmd
 << 4 | (uöt8_tË
Êags
;

9918 
uöt8_t
 
buf
[1 + (
size_t
)];

9919 
uöt8_t
 *
vÀn
 = &
buf
[1];

9921 
	`as£π
(
nc
->
£nd_mbuf
.
Àn
 >=Üen);

9923 
buf
[0] = 
hódî
;

9927 *
vÀn
 = 
Àn
 % 0x80;

9928 
Àn
 /= 0x80;

9929 i‡(
Àn
 > 0Ë*
vÀn
 |= 0x80;

9930 
vÀn
++;

9931 } 
Àn
 > 0);

9933 
	`mbuf_ö£π
(&
nc
->
£nd_mbuf
, 
off
, 
buf
, 
vÀn
 - buf);

9934 
	}
}

9936 
	$mg_mqâ_publish
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
t›ic
,

9937 
uöt16_t
 
mesßge_id
, 
Êags
, c⁄° *
d©a
,

9938 
size_t
 
Àn
) {

9939 
size_t
 
ﬁd_Àn
 = 
nc
->
£nd_mbuf
.
Àn
;

9941 
uöt16_t
 
t›ic_Àn
 = 
	`ht⁄s
((uöt16_tË
	`°æí
(
t›ic
));

9942 
uöt16_t
 
mesßge_id_√t
 = 
	`ht⁄s
(
mesßge_id
);

9944 
	`mg_£nd
(
nc
, &
t›ic_Àn
, 2);

9945 
	`mg_£nd
(
nc
, 
t›ic
, 
	`°æí
(topic));

9946 i‡(
	`MG_MQTT_GET_QOS
(
Êags
) > 0) {

9947 
	`mg_£nd
(
nc
, &
mesßge_id_√t
, 2);

9949 
	`mg_£nd
(
nc
, 
d©a
, 
Àn
);

9951 
	`mg_mqâ_¥ïíd_hódî
(
nc
, 
MG_MQTT_CMD_PUBLISH
, 
Êags
,

9952 
nc
->
£nd_mbuf
.
Àn
 - 
ﬁd_Àn
);

9953 
	}
}

9955 
	$mg_mqâ_subs¸ibe
(
mg_c⁄√˘i⁄
 *
nc
,

9956 c⁄° 
mg_mqâ_t›ic_ex¥essi⁄
 *
t›ics
,

9957 
size_t
 
t›ics_Àn
, 
uöt16_t
 
mesßge_id
) {

9958 
size_t
 
ﬁd_Àn
 = 
nc
->
£nd_mbuf
.
Àn
;

9960 
uöt16_t
 
mesßge_id_n
 = 
	`ht⁄s
(
mesßge_id
);

9961 
size_t
 
i
;

9963 
	`mg_£nd
(
nc
, (*Ë&
mesßge_id_n
, 2);

9964 
i
 = 0; i < 
t›ics_Àn
; i++) {

9965 
uöt16_t
 
t›ic_Àn_n
 = 
	`ht⁄s
((uöt16_tË
	`°æí
(
t›ics
[
i
].
t›ic
));

9966 
	`mg_£nd
(
nc
, &
t›ic_Àn_n
, 2);

9967 
	`mg_£nd
(
nc
, 
t›ics
[
i
].
t›ic
, 
	`°æí
(topics[i].topic));

9968 
	`mg_£nd
(
nc
, &
t›ics
[
i
].
qos
, 1);

9971 
	`mg_mqâ_¥ïíd_hódî
(
nc
, 
MG_MQTT_CMD_SUBSCRIBE
, 
	`MG_MQTT_QOS
(1),

9972 
nc
->
£nd_mbuf
.
Àn
 - 
ﬁd_Àn
);

9973 
	}
}

9975 
	$mg_mqâ_√xt_subs¸ibe_t›ic
(
mg_mqâ_mesßge
 *
msg
,

9976 
mg_°r
 *
t›ic
, 
uöt8_t
 *
qos
, 
pos
) {

9977 *
buf
 = (*Ë
msg
->
∑ylﬂd
.
p
 + 
pos
;

9979 i‡((
size_t
Ë
pos
 >
msg
->
∑ylﬂd
.
Àn
) {

9983 
t›ic
->
Àn
 = 
buf
[0] << 8 | buf[1];

9984 
t›ic
->
p
 = (*Ë
buf
 + 2;

9985 *
qos
 = 
buf
[2 + 
t›ic
->
Àn
];

9986  
pos
 + 2 + 
t›ic
->
Àn
 + 1;

9987 
	}
}

9989 
	$mg_mqâ_unsubs¸ibe
(
mg_c⁄√˘i⁄
 *
nc
, **
t›ics
,

9990 
size_t
 
t›ics_Àn
, 
uöt16_t
 
mesßge_id
) {

9991 
size_t
 
ﬁd_Àn
 = 
nc
->
£nd_mbuf
.
Àn
;

9993 
uöt16_t
 
mesßge_id_n
 = 
	`ht⁄s
(
mesßge_id
);

9994 
size_t
 
i
;

9996 
	`mg_£nd
(
nc
, (*Ë&
mesßge_id_n
, 2);

9997 
i
 = 0; i < 
t›ics_Àn
; i++) {

9998 
uöt16_t
 
t›ic_Àn_n
 = 
	`ht⁄s
((uöt16_tË
	`°æí
(
t›ics
[
i
]));

9999 
	`mg_£nd
(
nc
, &
t›ic_Àn_n
, 2);

10000 
	`mg_£nd
(
nc
, 
t›ics
[
i
], 
	`°æí
(topics[i]));

10003 
	`mg_mqâ_¥ïíd_hódî
(
nc
, 
MG_MQTT_CMD_UNSUBSCRIBE
, 
	`MG_MQTT_QOS
(1),

10004 
nc
->
£nd_mbuf
.
Àn
 - 
ﬁd_Àn
);

10005 
	}
}

10007 
	$mg_mqâ_c⁄«ck
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt8_t
 
ªtu∫_code
) {

10008 
uöt8_t
 
unu£d
 = 0;

10009 
	`mg_£nd
(
nc
, &
unu£d
, 1);

10010 
	`mg_£nd
(
nc
, &
ªtu∫_code
, 1);

10011 
	`mg_mqâ_¥ïíd_hódî
(
nc
, 
MG_MQTT_CMD_CONNACK
, 0, 2);

10012 
	}
}

10019 
	$mg_£nd_mqâ_sh‹t_comm™d
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt8_t
 
cmd
,

10020 
uöt16_t
 
mesßge_id
) {

10021 
uöt16_t
 
mesßge_id_√t
 = 
	`ht⁄s
(
mesßge_id
);

10022 
	`mg_£nd
(
nc
, &
mesßge_id_√t
, 2);

10023 
	`mg_mqâ_¥ïíd_hódî
(
nc
, 
cmd
, 
	`MG_MQTT_QOS
(1), 2);

10024 
	}
}

10026 
	$mg_mqâ_puback
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt16_t
 
mesßge_id
) {

10027 
	`mg_£nd_mqâ_sh‹t_comm™d
(
nc
, 
MG_MQTT_CMD_PUBACK
, 
mesßge_id
);

10028 
	}
}

10030 
	$mg_mqâ_pubªc
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt16_t
 
mesßge_id
) {

10031 
	`mg_£nd_mqâ_sh‹t_comm™d
(
nc
, 
MG_MQTT_CMD_PUBREC
, 
mesßge_id
);

10032 
	}
}

10034 
	$mg_mqâ_pubªl
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt16_t
 
mesßge_id
) {

10035 
	`mg_£nd_mqâ_sh‹t_comm™d
(
nc
, 
MG_MQTT_CMD_PUBREL
, 
mesßge_id
);

10036 
	}
}

10038 
	$mg_mqâ_pubcomp
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt16_t
 
mesßge_id
) {

10039 
	`mg_£nd_mqâ_sh‹t_comm™d
(
nc
, 
MG_MQTT_CMD_PUBCOMP
, 
mesßge_id
);

10040 
	}
}

10042 
	$mg_mqâ_suback
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt8_t
 *
qoss
, 
size_t
 
qoss_Àn
,

10043 
uöt16_t
 
mesßge_id
) {

10044 
size_t
 
i
;

10045 
uöt16_t
 
mesßge_id_√t
 = 
	`ht⁄s
(
mesßge_id
);

10046 
	`mg_£nd
(
nc
, &
mesßge_id_√t
, 2);

10047 
i
 = 0; i < 
qoss_Àn
; i++) {

10048 
	`mg_£nd
(
nc
, &
qoss
[
i
], 1);

10050 
	`mg_mqâ_¥ïíd_hódî
(
nc
, 
MG_MQTT_CMD_SUBACK
, 
	`MG_MQTT_QOS
(1), 2 + 
qoss_Àn
);

10051 
	}
}

10053 
	$mg_mqâ_unsuback
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt16_t
 
mesßge_id
) {

10054 
	`mg_£nd_mqâ_sh‹t_comm™d
(
nc
, 
MG_MQTT_CMD_UNSUBACK
, 
mesßge_id
);

10055 
	}
}

10057 
	$mg_mqâ_pög
(
mg_c⁄√˘i⁄
 *
nc
) {

10058 
	`mg_mqâ_¥ïíd_hódî
(
nc
, 
MG_MQTT_CMD_PINGREQ
, 0, 0);

10059 
	}
}

10061 
	$mg_mqâ_p⁄g
(
mg_c⁄√˘i⁄
 *
nc
) {

10062 
	`mg_mqâ_¥ïíd_hódî
(
nc
, 
MG_MQTT_CMD_PINGRESP
, 0, 0);

10063 
	}
}

10065 
	$mg_mqâ_disc⁄√˘
(
mg_c⁄√˘i⁄
 *
nc
) {

10066 
	`mg_mqâ_¥ïíd_hódî
(
nc
, 
MG_MQTT_CMD_DISCONNECT
, 0, 0);

10067 
	}
}

10070 #ifde‡
MG_MODULE_LINES


10081 #i‡
MG_ENABLE_MQTT_BROKER


10083 
	$mg_mqâ_£ssi⁄_öô
(
mg_mqâ_brokî
 *
brk
,

10084 
mg_mqâ_£ssi⁄
 *
s
,

10085 
mg_c⁄√˘i⁄
 *
nc
) {

10086 
s
->
brk
 = brk;

10087 
s
->
subs¸ùti⁄s
 = 
NULL
;

10088 
s
->
num_subs¸ùti⁄s
 = 0;

10089 
s
->
nc
 =Çc;

10090 
	}
}

10092 
	$mg_mqâ_add_£ssi⁄
(
mg_mqâ_£ssi⁄
 *
s
) {

10093 
	`LIST_INSERT_HEAD
(&
s
->
brk
->
£ssi⁄s
, s, 
lök
);

10094 
	}
}

10096 
	$mg_mqâ_ªmove_£ssi⁄
(
mg_mqâ_£ssi⁄
 *
s
) {

10097 
	`LIST_REMOVE
(
s
, 
lök
);

10098 
	}
}

10100 
	$mg_mqâ_de°roy_£ssi⁄
(
mg_mqâ_£ssi⁄
 *
s
) {

10101 
size_t
 
i
;

10102 
i
 = 0; i < 
s
->
num_subs¸ùti⁄s
; i++) {

10103 
	`MG_FREE
((*Ë
s
->
subs¸ùti⁄s
[
i
].
t›ic
);

10105 
	`MG_FREE
(
s
->
subs¸ùti⁄s
);

10106 
	`MG_FREE
(
s
);

10107 
	}
}

10109 
	$mg_mqâ_˛o£_£ssi⁄
(
mg_mqâ_£ssi⁄
 *
s
) {

10110 
	`mg_mqâ_ªmove_£ssi⁄
(
s
);

10111 
	`mg_mqâ_de°roy_£ssi⁄
(
s
);

10112 
	}
}

10114 
	$mg_mqâ_brokî_öô
(
mg_mqâ_brokî
 *
brk
, *
u£r_d©a
) {

10115 
	`LIST_INIT
(&
brk
->
£ssi⁄s
);

10116 
brk
->
u£r_d©a
 = user_data;

10117 
	}
}

10119 
	$mg_mqâ_brokî_h™dÀ_c⁄√˘
(
mg_mqâ_brokî
 *
brk
,

10120 
mg_c⁄√˘i⁄
 *
nc
) {

10121 
mg_mqâ_£ssi⁄
 *
s
 = (mg_mqâ_£ssi⁄ *Ë
	`ˇŒoc
(1,  *s);

10122 i‡(
s
 =
NULL
) {

10124 
	`mg_mqâ_c⁄«ck
(
nc
, 
MG_EV_MQTT_CONNACK_SERVER_UNAVAILABLE
);

10131 
	`mg_mqâ_£ssi⁄_öô
(
brk
, 
s
, 
nc
);

10132 
s
->
u£r_d©a
 = 
nc
->user_data;

10133 
nc
->
u£r_d©a
 = 
s
;

10134 
	`mg_mqâ_add_£ssi⁄
(
s
);

10136 
	`mg_mqâ_c⁄«ck
(
nc
, 
MG_EV_MQTT_CONNACK_ACCEPTED
);

10137 
	}
}

10139 
	$mg_mqâ_brokî_h™dÀ_subs¸ibe
(
mg_c⁄√˘i⁄
 *
nc
,

10140 
mg_mqâ_mesßge
 *
msg
) {

10141 
mg_mqâ_£ssi⁄
 *
ss
 = (mg_mqâ_£ssi⁄ *Ë
nc
->
u£r_d©a
;

10142 
uöt8_t
 
qoss
[512];

10143 
size_t
 
qoss_Àn
 = 0;

10144 
mg_°r
 
t›ic
;

10145 
uöt8_t
 
qos
;

10146 
pos
;

10147 
mg_mqâ_t›ic_ex¥essi⁄
 *
ã
;

10149 
pos
 = 0;

10150 (
pos
 = 
	`mg_mqâ_√xt_subs¸ibe_t›ic
(
msg
, &
t›ic
, &
qos
,Öos)) != -1;) {

10151 
qoss
[
qoss_Àn
++] = 
qos
;

10154 
ss
->
subs¸ùti⁄s
 = (
mg_mqâ_t›ic_ex¥essi⁄
 *Ë
	`ªÆloc
(

10155 
ss
->
subs¸ùti⁄s
, (*ss->subs¸ùti⁄sË* 
qoss_Àn
);

10156 
pos
 = 0;

10157 (
pos
 = 
	`mg_mqâ_√xt_subs¸ibe_t›ic
(
msg
, &
t›ic
, &
qos
,Öos)) != -1;

10158 
ss
->
num_subs¸ùti⁄s
++) {

10159 
ã
 = &
ss
->
subs¸ùti⁄s
[ss->
num_subs¸ùti⁄s
];

10160 
ã
->
t›ic
 = (*Ë
	`mÆloc
—›ic.
Àn
 + 1);

10161 
ã
->
qos
 = qos;

10162 
	`°∫˝y
((*Ë
ã
->
t›ic
,Å›ic.
p
,Å›ic.
Àn
 + 1);

10165 
	`mg_mqâ_suback
(
nc
, 
qoss
, 
qoss_Àn
, 
msg
->
mesßge_id
);

10166 
	}
}

10175 
	$mg_mqâ_m©ch_t›ic_ex¥essi⁄
(c⁄° *
exp
,

10176 c⁄° 
mg_°r
 *
t›ic
) {

10178 
size_t
 
Àn
 = 
	`°æí
(
exp
);

10179 i‡(
	`°rchr
(
exp
, '#')) {

10180 
Àn
 -= 2;

10181 i‡(
t›ic
->
Àn
 <Üen) {

10182 
Àn
 = 
t›ic
->len;

10185  
	`°∫cmp
(
t›ic
->
p
, 
exp
, 
Àn
) == 0;

10186 
	}
}

10188 
	$mg_mqâ_brokî_h™dÀ_publish
(
mg_mqâ_brokî
 *
brk
,

10189 
mg_mqâ_mesßge
 *
msg
) {

10190 
mg_mqâ_£ssi⁄
 *
s
;

10191 
size_t
 
i
;

10193 
s
 = 
	`mg_mqâ_√xt
(
brk
, 
NULL
); s != NULL; s = mg_mqtt_next(brk, s)) {

10194 
i
 = 0; i < 
s
->
num_subs¸ùti⁄s
; i++) {

10195 i‡(
	`mg_mqâ_m©ch_t›ic_ex¥essi⁄
(
s
->
subs¸ùti⁄s
[
i
].
t›ic
,

10196 &
msg
->
t›ic
)) {

10197 
buf
[100], *
p
 = buf;

10198 
	`mg_a•rötf
(&
p
, (
buf
), "%.*s", (Ë
msg
->
t›ic
.
Àn
,

10199 
msg
->
t›ic
.
p
);

10200 i‡(
p
 =
NULL
) {

10203 
	`mg_mqâ_publish
(
s
->
nc
, 
p
, 0, 0, 
msg
->
∑ylﬂd
.p, msg->∑ylﬂd.
Àn
);

10204 i‡(
p
 !
buf
) {

10205 
	`MG_FREE
(
p
);

10211 
	}
}

10213 
	$mg_mqâ_brokî
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
, *
d©a
) {

10214 
mg_mqâ_mesßge
 *
msg
 = (mg_mqâ_mesßgê*Ë
d©a
;

10215 
mg_mqâ_brokî
 *
brk
;

10217 i‡(
nc
->
li°íî
) {

10218 
brk
 = (
mg_mqâ_brokî
 *Ë
nc
->
li°íî
->
u£r_d©a
;

10220 
brk
 = (
mg_mqâ_brokî
 *Ë
nc
->
u£r_d©a
;

10223 
ev
) {

10224 
MG_EV_ACCEPT
:

10225 
	`mg_£t_¥Ÿocﬁ_mqâ
(
nc
);

10226 
nc
->
u£r_d©a
 = 
NULL
;

10228 
MG_EV_MQTT_CONNECT
:

10229 
	`mg_mqâ_brokî_h™dÀ_c⁄√˘
(
brk
, 
nc
);

10231 
MG_EV_MQTT_SUBSCRIBE
:

10232 
	`mg_mqâ_brokî_h™dÀ_subs¸ibe
(
nc
, 
msg
);

10234 
MG_EV_MQTT_PUBLISH
:

10235 
	`mg_mqâ_brokî_h™dÀ_publish
(
brk
, 
msg
);

10237 
MG_EV_CLOSE
:

10238 i‡(
nc
->
li°íî
 &&Çc->
u£r_d©a
 !
NULL
) {

10239 
	`mg_mqâ_˛o£_£ssi⁄
((
mg_mqâ_£ssi⁄
 *Ë
nc
->
u£r_d©a
);

10243 
	}
}

10245 
mg_mqâ_£ssi⁄
 *
	$mg_mqâ_√xt
(
mg_mqâ_brokî
 *
brk
,

10246 
mg_mqâ_£ssi⁄
 *
s
) {

10247  
s
 =
NULL
 ? 
	`LIST_FIRST
(&
brk
->
£ssi⁄s
Ë: 
	`LIST_NEXT
(s, 
lök
);

10248 
	}
}

10251 #ifde‡
MG_MODULE_LINES


10259 #i‡
MG_ENABLE_DNS


10264 
	gmg_dns_tid
 = 0xa0;

10266 
	smg_dns_hódî
 {

10267 
uöt16_t
 
	må™ß˘i⁄_id
;

10268 
uöt16_t
 
	mÊags
;

10269 
uöt16_t
 
	mnum_que°i⁄s
;

10270 
uöt16_t
 
	mnum_™swîs
;

10271 
uöt16_t
 
	mnum_auth‹ôy_¥s
;

10272 
uöt16_t
 
	mnum_Ÿhî_¥s
;

10275 
mg_dns_ªsour˚_ªc‹d
 *
	$mg_dns_√xt_ªc‹d
(

10276 
mg_dns_mesßge
 *
msg
, 
quîy
,

10277 
mg_dns_ªsour˚_ªc‹d
 *
¥ev
) {

10278 
mg_dns_ªsour˚_ªc‹d
 *
º
;

10280 
º
 = (
¥ev
 =
NULL
 ? 
msg
->
™swîs
 :Örev + 1);

10281 
º
 - 
msg
->
™swîs
 < msg->
num_™swîs
;Ñr++) {

10282 i‡(
º
->
πy≥
 =
quîy
) {

10283  
º
;

10286  
NULL
;

10287 
	}
}

10289 
	$mg_dns_∑r£_ªc‹d_d©a
(
mg_dns_mesßge
 *
msg
,

10290 
mg_dns_ªsour˚_ªc‹d
 *
º
, *
d©a
,

10291 
size_t
 
d©a_Àn
) {

10292 
º
->
πy≥
) {

10293 
MG_DNS_A_RECORD
:

10294 i‡(
d©a_Àn
 < (
ö_addr
)) {

10297 i‡(
º
->
rd©a
.
p
 + 
d©a_Àn
 > 
msg
->
pkt
.∞+ msg->pkt.
Àn
) {

10300 
	`mem˝y
(
d©a
, 
º
->
rd©a
.
p
, 
d©a_Àn
);

10302 #i‡
MG_ENABLE_IPV6


10303 
MG_DNS_AAAA_RECORD
:

10304 i‡(
d©a_Àn
 < (
ö6_addr
)) {

10307 
	`mem˝y
(
d©a
, 
º
->
rd©a
.
p
, 
d©a_Àn
);

10310 
MG_DNS_CNAME_RECORD
:

10311 
	`mg_dns_uncom¥ess_«me
(
msg
, &
º
->
rd©a
, (*Ë
d©a
, 
d©a_Àn
);

10316 
	}
}

10318 
	$mg_dns_ö£π_hódî
(
mbuf
 *
io
, 
size_t
 
pos
,

10319 
mg_dns_mesßge
 *
msg
) {

10320 
mg_dns_hódî
 
hódî
;

10322 
	`mem£t
(&
hódî
, 0, (header));

10323 
hódî
.
å™ß˘i⁄_id
 = 
msg
->transaction_id;

10324 
hódî
.
Êags
 = 
	`ht⁄s
(
msg
->flags);

10325 
hódî
.
num_que°i⁄s
 = 
	`ht⁄s
(
msg
->num_questions);

10326 
hódî
.
num_™swîs
 = 
	`ht⁄s
(
msg
->num_answers);

10328  
	`mbuf_ö£π
(
io
, 
pos
, &
hódî
, (header));

10329 
	}
}

10331 
	$mg_dns_c›y_que°i⁄s
(
mbuf
 *
io
, 
mg_dns_mesßge
 *
msg
) {

10332 *
begö
, *
íd
;

10333 
mg_dns_ªsour˚_ªc‹d
 *
œ°_q
;

10334 i‡(
msg
->
num_que°i⁄s
 <= 0)  0;

10335 
begö
 = (*Ë
msg
->
pkt
.
p
 + (
mg_dns_hódî
);

10336 
œ°_q
 = &
msg
->
que°i⁄s
[msg->
num_que°i⁄s
 - 1];

10337 
íd
 = (*Ë
œ°_q
->
«me
.
p
 +Üa°_q->«me.
Àn
 + 4;

10338  
	`mbuf_≠≥nd
(
io
, 
begö
, 
íd
 - begin);

10339 
	}
}

10341 
	$mg_dns_ícode_«me
(
mbuf
 *
io
, c⁄° *
«me
, 
size_t
 
Àn
) {

10342 c⁄° *
s
;

10343 
n
;

10344 
size_t
 
pos
 = 
io
->
Àn
;

10347 i‡((
s
 = 
	`°rchr
(
«me
, '.')Ë=
NULL
) {

10348 
s
 = 
«me
 + 
Àn
;

10351 i‡(
s
 - 
«me
 > 127) {

10354 
n
 = 
s
 - 
«me
;

10355 
	`mbuf_≠≥nd
(
io
, &
n
, 1);

10356 
	`mbuf_≠≥nd
(
io
, 
«me
, 
n
);

10358 i‡(*
s
 == '.') {

10359 
n
++;

10362 
«me
 +
n
;

10363 
Àn
 -
n
;

10364 } *
s
 != '\0');

10365 
	`mbuf_≠≥nd
(
io
, "\0", 1);

10367  
io
->
Àn
 - 
pos
;

10368 
	}
}

10370 
	$mg_dns_ícode_ªc‹d
(
mbuf
 *
io
, 
mg_dns_ªsour˚_ªc‹d
 *
º
,

10371 c⁄° *
«me
, 
size_t
 
∆í
, c⁄° *
rd©a
,

10372 
size_t
 
æí
) {

10373 
size_t
 
pos
 = 
io
->
Àn
;

10374 
uöt16_t
 
u16
;

10375 
uöt32_t
 
u32
;

10377 i‡(
º
->
köd
 =
MG_DNS_INVALID_RECORD
) {

10381 i‡(
	`mg_dns_ícode_«me
(
io
, 
«me
, 
∆í
) == -1) {

10385 
u16
 = 
	`ht⁄s
(
º
->
πy≥
);

10386 
	`mbuf_≠≥nd
(
io
, &
u16
, 2);

10387 
u16
 = 
	`ht⁄s
(
º
->
r˛ass
);

10388 
	`mbuf_≠≥nd
(
io
, &
u16
, 2);

10390 i‡(
º
->
köd
 =
MG_DNS_ANSWER
) {

10391 
u32
 = 
	`ht⁄l
(
º
->
âl
);

10392 
	`mbuf_≠≥nd
(
io
, &
u32
, 4);

10394 i‡(
º
->
πy≥
 =
MG_DNS_CNAME_RECORD
) {

10395 
˛í
;

10397 
size_t
 
off
 = 
io
->
Àn
;

10398 
	`mbuf_≠≥nd
(
io
, &
u16
, 2);

10399 i‡((
˛í
 = 
	`mg_dns_ícode_«me
(
io
, (c⁄° *Ë
rd©a
, 
æí
)) == -1) {

10402 
u16
 = 
˛í
;

10403 
io
->
buf
[
off
] = 
u16
 >> 8;

10404 
io
->
buf
[
off
 + 1] = 
u16
 & 0xff;

10406 
u16
 = 
	`ht⁄s
((
uöt16_t
Ë
æí
);

10407 
	`mbuf_≠≥nd
(
io
, &
u16
, 2);

10408 
	`mbuf_≠≥nd
(
io
, 
rd©a
, 
æí
);

10412  
io
->
Àn
 - 
pos
;

10413 
	}
}

10415 
	$mg_£nd_dns_quîy
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
«me
,

10416 
quîy_ty≥
) {

10417 
mg_dns_mesßge
 *
msg
 =

10418 (
mg_dns_mesßge
 *Ë
	`MG_CALLOC
(1, (*
msg
));

10419 
mbuf
 
pkt
;

10420 
mg_dns_ªsour˚_ªc‹d
 *
º
 = &
msg
->
que°i⁄s
[0];

10422 
	`DBG
(("%†%d", 
«me
, 
quîy_ty≥
));

10424 
	`mbuf_öô
(&
pkt
, 64 );

10426 
msg
->
å™ß˘i⁄_id
 = ++
mg_dns_tid
;

10427 
msg
->
Êags
 = 0x100;

10428 
msg
->
num_que°i⁄s
 = 1;

10430 
	`mg_dns_ö£π_hódî
(&
pkt
, 0, 
msg
);

10432 
º
->
πy≥
 = 
quîy_ty≥
;

10433 
º
->
r˛ass
 = 1;

10434 
º
->
köd
 = 
MG_DNS_QUESTION
;

10436 i‡(
	`mg_dns_ícode_ªc‹d
(&
pkt
, 
º
, 
«me
, 
	`°æí
“ame), 
NULL
, 0) == -1) {

10438 
˛ónup
;

10442 i‡(!(
nc
->
Êags
 & 
MG_F_UDP
)) {

10443 
uöt16_t
 
Àn
 = 
	`ht⁄s
((uöt16_tË
pkt
.len);

10444 
	`mbuf_ö£π
(&
pkt
, 0, &
Àn
, 2);

10447 
	`mg_£nd
(
nc
, 
pkt
.
buf
,Ökt.
Àn
);

10448 
	`mbuf_‰ì
(&
pkt
);

10450 
˛ónup
:

10451 
	`MG_FREE
(
msg
);

10452 
	}
}

10454 *
	$mg_∑r£_dns_ªsour˚_ªc‹d
(

10455 *
d©a
, *
íd
, 
mg_dns_ªsour˚_ªc‹d
 *
º
,

10456 
ª∂y
) {

10457 *
«me
 = 
d©a
;

10458 
chunk_Àn
, 
d©a_Àn
;

10460 
d©a
 < 
íd
 && (
chunk_Àn
 = *data)) {

10461 i‡(((*Ë
d©a
)[0] & 0xc0) {

10462 
d©a
 += 1;

10465 
d©a
 +
chunk_Àn
 + 1;

10468 i‡(
d©a
 > 
íd
 - 5) {

10469  
NULL
;

10472 
º
->
«me
.
p
 = (*)Çame;

10473 
º
->
«me
.
Àn
 = 
d©a
 -Çame + 1;

10474 
d©a
++;

10476 
º
->
πy≥
 = 
d©a
[0] << 8 | data[1];

10477 
d©a
 += 2;

10479 
º
->
r˛ass
 = 
d©a
[0] << 8 | data[1];

10480 
d©a
 += 2;

10482 
º
->
köd
 = 
ª∂y
 ? 
MG_DNS_ANSWER
 : 
MG_DNS_QUESTION
;

10483 i‡(
ª∂y
) {

10484 i‡(
d©a
 >
íd
 - 6) {

10485  
NULL
;

10488 
º
->
âl
 = (
uöt32_t
Ë
d©a
[0] << 24 | (uint32_t) data[1] << 16 |

10489 
d©a
[2] << 8 | data[3];

10490 
d©a
 += 4;

10492 
d©a_Àn
 = *
d©a
 << 8 | *(data + 1);

10493 
d©a
 += 2;

10495 
º
->
rd©a
.
p
 = (*Ë
d©a
;

10496 
º
->
rd©a
.
Àn
 = 
d©a_Àn
;

10497 
d©a
 +
d©a_Àn
;

10499  
d©a
;

10500 
	}
}

10502 
	$mg_∑r£_dns
(c⁄° *
buf
, 
Àn
, 
mg_dns_mesßge
 *
msg
) {

10503 
mg_dns_hódî
 *
hódî
 = (mg_dns_hódî *Ë
buf
;

10504 *
d©a
 = (*Ë
buf
 + (*
hódî
);

10505 *
íd
 = (*Ë
buf
 + 
Àn
;

10506 
i
;

10508 
	`mem£t
(
msg
, 0, (*msg));

10509 
msg
->
pkt
.
p
 = 
buf
;

10510 
msg
->
pkt
.
Àn
 =Üen;

10512 i‡(
Àn
 < (Ë(*
hódî
))  -1;

10514 
msg
->
å™ß˘i⁄_id
 = 
hódî
->transaction_id;

10515 
msg
->
Êags
 = 
	`¡ohs
(
hódî
->flags);

10516 
msg
->
num_que°i⁄s
 = 
	`¡ohs
(
hódî
->num_questions);

10517 i‡(
msg
->
num_que°i⁄s
 > (Ë
	`ARRAY_SIZE
(msg->
que°i⁄s
)) {

10518 
msg
->
num_que°i⁄s
 = (Ë
	`ARRAY_SIZE
(msg->
que°i⁄s
);

10520 
msg
->
num_™swîs
 = 
	`¡ohs
(
hódî
->num_answers);

10521 i‡(
msg
->
num_™swîs
 > (Ë
	`ARRAY_SIZE
(msg->
™swîs
)) {

10522 
msg
->
num_™swîs
 = (Ë
	`ARRAY_SIZE
(msg->
™swîs
);

10525 
i
 = 0; i < 
msg
->
num_que°i⁄s
; i++) {

10526 
d©a
 = 
	`mg_∑r£_dns_ªsour˚_ªc‹d
(d©a, 
íd
, &
msg
->
que°i⁄s
[
i
], 0);

10527 i‡(
d©a
 =
NULL
)  -1;

10530 
i
 = 0; i < 
msg
->
num_™swîs
; i++) {

10531 
d©a
 = 
	`mg_∑r£_dns_ªsour˚_ªc‹d
(d©a, 
íd
, &
msg
->
™swîs
[
i
], 1);

10532 i‡(
d©a
 =
NULL
)  -1;

10536 
	}
}

10538 
size_t
 
	$mg_dns_uncom¥ess_«me
(
mg_dns_mesßge
 *
msg
, 
mg_°r
 *
«me
,

10539 *
d°
, 
d°_Àn
) {

10540 
chunk_Àn
;

10541 *
ﬁd_d°
 = 
d°
;

10542 c⁄° *
d©a
 = (*Ë
«me
->
p
;

10543 c⁄° *
íd
 = (*Ë
msg
->
pkt
.
p
 + msg->pkt.
Àn
;

10545 i‡(
d©a
 >
íd
) {

10549 (
chunk_Àn
 = *
d©a
++)) {

10550 
Àeway
 = 
d°_Àn
 - (
d°
 - 
ﬁd_d°
);

10551 i‡(
d©a
 >
íd
) {

10555 i‡(
chunk_Àn
 & 0xc0) {

10556 
uöt16_t
 
off
 = (
d©a
[-1] & (~0xc0)) << 8 | data[0];

10557 i‡(
off
 >
msg
->
pkt
.
Àn
) {

10560 
d©a
 = (*Ë
msg
->
pkt
.
p
 + 
off
;

10563 i‡(
chunk_Àn
 > 
Àeway
) {

10564 
chunk_Àn
 = 
Àeway
;

10567 i‡(
d©a
 + 
chunk_Àn
 >
íd
) {

10571 
	`mem˝y
(
d°
, 
d©a
, 
chunk_Àn
);

10572 
d©a
 +
chunk_Àn
;

10573 
d°
 +
chunk_Àn
;

10574 
Àeway
 -
chunk_Àn
;

10575 i‡(
Àeway
 == 0) {

10576  
d°
 - 
ﬁd_d°
;

10578 *
d°
++ = '.';

10581 i‡(
d°
 !
ﬁd_d°
) {

10582 *--
d°
 = 0;

10584  
d°
 - 
ﬁd_d°
;

10585 
	}
}

10587 
	$dns_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
, *
ev_d©a
) {

10588 
mbuf
 *
io
 = &
nc
->
ªcv_mbuf
;

10589 
mg_dns_mesßge
 
msg
;

10592 
nc
->
	`h™dÀr
“c, 
ev
, 
ev_d©a
);

10594 
ev
) {

10595 
MG_EV_RECV
:

10596 i‡(!(
nc
->
Êags
 & 
MG_F_UDP
)) {

10597 
	`mbuf_ªmove
(&
nc
->
ªcv_mbuf
, 2);

10599 i‡(
	`mg_∑r£_dns
(
nc
->
ªcv_mbuf
.
buf
,Çc->ªcv_mbuf.
Àn
, &
msg
) == -1) {

10601 
	`mem£t
(&
msg
, 0, (msg));

10602 
msg
.
Êags
 = 0x8081;

10603 
	`mg_dns_ö£π_hódî
(
io
, 0, &
msg
);

10604 i‡(!(
nc
->
Êags
 & 
MG_F_UDP
)) {

10605 
uöt16_t
 
Àn
 = 
	`ht⁄s
((uöt16_tË
io
->len);

10606 
	`mbuf_ö£π
(
io
, 0, &
Àn
, 2);

10608 
	`mg_£nd
(
nc
, 
io
->
buf
, io->
Àn
);

10611 
nc
->
	`h™dÀr
“c, 
MG_DNS_MESSAGE
, &
msg
);

10613 
	`mbuf_ªmove
(
io
, io->
Àn
);

10616 
	}
}

10618 
	$mg_£t_¥Ÿocﬁ_dns
(
mg_c⁄√˘i⁄
 *
nc
) {

10619 
nc
->
¥Ÿo_h™dÀr
 = 
dns_h™dÀr
;

10620 
	}
}

10623 #ifde‡
MG_MODULE_LINES


10631 #i‡
MG_ENABLE_DNS_SERVER


10636 
mg_dns_ª∂y
 
	$mg_dns_¸óã_ª∂y
(
mbuf
 *
io
,

10637 
mg_dns_mesßge
 *
msg
) {

10638 
mg_dns_ª∂y
 
ªp
;

10639 
ªp
.
msg
 = msg;

10640 
ªp
.
io
 = io;

10641 
ªp
.
°¨t
 = 
io
->
Àn
;

10644 
msg
->
Êags
 |= 0x8080;

10645 
	`mg_dns_c›y_que°i⁄s
(
io
, 
msg
);

10647 
msg
->
num_™swîs
 = 0;

10648  
ªp
;

10649 
	}
}

10651 
	$mg_dns_£nd_ª∂y
(
mg_c⁄√˘i⁄
 *
nc
, 
mg_dns_ª∂y
 *
r
) {

10652 
size_t
 
£¡
 = 
r
->
io
->
Àn
 -Ñ->
°¨t
;

10653 
	`mg_dns_ö£π_hódî
(
r
->
io
,Ñ->
°¨t
,Ñ->
msg
);

10654 i‡(!(
nc
->
Êags
 & 
MG_F_UDP
)) {

10655 
uöt16_t
 
Àn
 = 
	`ht⁄s
((uöt16_tË
£¡
);

10656 
	`mbuf_ö£π
(
r
->
io
,Ñ->
°¨t
, &
Àn
, 2);

10659 i‡(&
nc
->
£nd_mbuf
 !
r
->
io
) {

10660 
	`mg_£nd
(
nc
, 
r
->
io
->
buf
 +Ñ->
°¨t
,Ñ->io->
Àn
 -Ñ->start);

10661 
r
->
io
->
Àn
 =Ñ->
°¨t
;

10663 
	}
}

10665 
	$mg_dns_ª∂y_ªc‹d
(
mg_dns_ª∂y
 *
ª∂y
,

10666 
mg_dns_ªsour˚_ªc‹d
 *
que°i⁄
,

10667 c⁄° *
«me
, 
πy≥
, 
âl
, c⁄° *
rd©a
,

10668 
size_t
 
rd©a_Àn
) {

10669 
mg_dns_mesßge
 *
msg
 = (mg_dns_mesßgê*Ë
ª∂y
->msg;

10670 
∫ame
[512];

10671 
mg_dns_ªsour˚_ªc‹d
 *
™s
 = &
msg
->
™swîs
[msg->
num_™swîs
];

10672 i‡(
msg
->
num_™swîs
 >
MG_MAX_DNS_ANSWERS
) {

10676 i‡(
«me
 =
NULL
) {

10677 
«me
 = 
∫ame
;

10678 
∫ame
[511] = 0;

10679 
	`mg_dns_uncom¥ess_«me
(
msg
, &
que°i⁄
->
«me
, 
∫ame
, (rname) - 1);

10682 *
™s
 = *
que°i⁄
;

10683 
™s
->
köd
 = 
MG_DNS_ANSWER
;

10684 
™s
->
πy≥
 =Ñtype;

10685 
™s
->
âl
 =Åtl;

10687 i‡(
	`mg_dns_ícode_ªc‹d
(
ª∂y
->
io
, 
™s
, 
«me
, 
	`°æí
“ame), 
rd©a
,

10688 
rd©a_Àn
) == -1) {

10692 
msg
->
num_™swîs
++;

10694 
	}
}

10697 #ifde‡
MG_MODULE_LINES


10705 #i‡
MG_ENABLE_ASYNC_RESOLVER


10710 #i‚de‡
MG_DEFAULT_NAMESERVER


10711 
	#MG_DEFAULT_NAMESERVER
 "8.8.8.8"

	)

10714 c⁄° *
	gmg_deÁu…_dns_£rvî
 = "udp://" 
MG_DEFAULT_NAMESERVER
 ":53";

10716 
MG_INTERNAL
 
	gmg_dns_£rvî
[256];

10718 
	smg_ªsﬁve_async_ªque°
 {

10719 
	m«me
[1024];

10720 
	mquîy
;

10721 
mg_ªsﬁve_ˇŒback_t
 
	mˇŒback
;

10722 *
	md©a
;

10723 
time_t
 
	mtimeout
;

10724 
	mmax_ªåõs
;

10725 
mg_ªsﬁve_îr
 
	mîr
;

10728 
time_t
 
	mœ°_time
;

10729 
	mªåõs
;

10737 
	$mg_gë_ù_addªss_of_«me£rvî
(*
«me
, 
size_t
 
«me_Àn
) {

10738 
ªt
 = -1;

10740 #ifde‡
_WIN32


10741 
i
;

10742 
LONG
 
îr
;

10743 
HKEY
 
hKey
, 
hSub
;

10744 
wch¨_t
 
subkey
[512], 
vÆue
[128],

10745 *
key
 = 
L
"SYSTEM\\ControlSet001\\Services\\Tcpip\\Parameters\\Interfaces";

10747 i‡((
îr
 = 
	`RegO≥nKeyExW
(
HKEY_LOCAL_MACHINE
, 
key
, 0, 
KEY_READ
, &
hKey
)) !=

10748 
ERROR_SUCCESS
) {

10749 
	`Ârötf
(
°dîr
, "ˇ¬Ÿ o≥¿ªg key %S: %ld\n", 
key
, 
îr
);

10750 
ªt
 = -1;

10752 
ªt
 = -1, 
i
 = 0; 1; i++) {

10753 
DWORD
 
subkey_size
 = (
subkey
), 
ty≥
, 
Àn
 = (
vÆue
);

10754 i‡(
	`RegEnumKeyExW
(
hKey
, 
i
, 
subkey
, &
subkey_size
, 
NULL
, NULL, NULL,

10755 
NULL
Ë!
ERROR_SUCCESS
) {

10758 i‡(
	`RegO≥nKeyExW
(
hKey
, 
subkey
, 0, 
KEY_READ
, &
hSub
Ë=
ERROR_SUCCESS
 &&

10759 (
	`RegQuîyVÆueExW
(
hSub
, 
L
"NameSîvî", 0, &
ty≥
, (*Ë
vÆue
,

10760 &
Àn
Ë=
ERROR_SUCCESS
 ||

10761 
	`RegQuîyVÆueExW
(
hSub
, 
L
"Dh˝NameSîvî", 0, &
ty≥
, (*Ë
vÆue
,

10762 &
Àn
Ë=
ERROR_SUCCESS
)) {

10770 
wch¨_t
 *
comma
 = 
	`wcschr
(
vÆue
, ',');

10771 i‡(
vÆue
[0] == '\0') {

10774 i‡(
comma
 !
NULL
) {

10775 *
comma
 = '\0';

10777 
	`¢¥ötf
(
«me
, 
«me_Àn
, "udp://%S:53", 
vÆue
);

10778 
ªt
 = 0;

10779 
	`RegClo£Key
(
hSub
);

10783 
	`RegClo£Key
(
hKey
);

10785 #ñi‡
MG_ENABLE_FILESYSTEM


10786 
FILE
 *
Â
;

10787 
löe
[512];

10789 i‡((
Â
 = 
	`mg_f›í
("/ëc/ªsﬁv.c⁄f", "r")Ë=
NULL
) {

10790 
ªt
 = -1;

10793 
ªt
 = -1; 
	`fgës
(
löe
, ÷öe), 
Â
Ë!
NULL
;) {

10794 
a
, 
b
, 
c
, 
d
;

10795 i‡(
	`ssˇnf
(
löe
, "«me£rvî %u.%u.%u.%u", &
a
, &
b
, &
c
, &
d
) == 4) {

10796 
	`¢¥ötf
(
«me
, 
«me_Àn
, "udp://%u.%u.%u.%u:53", 
a
, 
b
, 
c
, 
d
);

10797 
ªt
 = 0;

10801 (Ë
	`f˛o£
(
Â
);

10804 
	`¢¥ötf
(
«me
, 
«me_Àn
, "%s", 
mg_deÁu…_dns_£rvî
);

10807  
ªt
;

10808 
	}
}

10810 
	$mg_ªsﬁve_‰om_ho°s_fûe
(c⁄° *
«me
, 
sockë_addªss
 *
uß
) {

10811 #i‡
MG_ENABLE_FILESYSTEM


10813 
FILE
 *
Â
;

10814 
löe
[1024];

10815 *
p
;

10816 
Æüs
[256];

10817 
a
, 
b
, 
c
, 
d
;

10818 
Àn
 = 0;

10820 i‡((
Â
 = 
	`mg_f›í
("/ëc/ho°s", "r")Ë=
NULL
) {

10824 ; 
	`fgës
(
löe
, ÷öe), 
Â
Ë!
NULL
;) {

10825 i‡(
löe
[0] == '#') ;

10827 i‡(
	`ssˇnf
(
löe
, "%u.%u.%u.%u%n", &
a
, &
b
, &
c
, &
d
, &
Àn
) == 0) {

10831 
p
 = 
löe
 + 
Àn
; 
	`ssˇnf
’, "%s%n", 
Æüs
, &len) == 1;Ö +=Üen) {

10832 i‡(
	`°rcmp
(
Æüs
, 
«me
) == 0) {

10833 
uß
->
sö
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
a
 << 24 | 
b
 << 16 | 
c
 << 8 | 
d
);

10834 
	`f˛o£
(
Â
);

10840 
	`f˛o£
(
Â
);

10842 (Ë
«me
;

10843 (Ë
uß
;

10847 
	}
}

10849 
	$mg_ªsﬁve_async_eh
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
, *
d©a
) {

10850 
time_t
 
now
 = (time_tË
	`mg_time
();

10851 
mg_ªsﬁve_async_ªque°
 *
ªq
;

10852 
mg_dns_mesßge
 *
msg
;

10853 
fú°
 = 0;

10855 i‡(
ev
 !
MG_EV_POLL
Ë
	`DBG
(("ev=%d u£r_d©a=%p",Év, 
nc
->
u£r_d©a
));

10857 
ªq
 = (
mg_ªsﬁve_async_ªque°
 *Ë
nc
->
u£r_d©a
;

10859 i‡(
ªq
 =
NULL
) {

10863 
ev
) {

10864 
MG_EV_CONNECT
:

10866 
fú°
 = 1;

10868 
MG_EV_POLL
:

10869 i‡(
ªq
->
ªåõs
 >Ñeq->
max_ªåõs
) {

10870 
ªq
->
îr
 = 
MG_RESOLVE_EXCEEDED_RETRY_COUNT
;

10871 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

10874 i‡(
fú°
 || 
now
 - 
ªq
->
œ°_time
 >ªq->
timeout
) {

10875 
	`mg_£nd_dns_quîy
(
nc
, 
ªq
->
«me
,Ñeq->
quîy
);

10876 
ªq
->
œ°_time
 = 
now
;

10877 
ªq
->
ªåõs
++;

10880 
MG_EV_RECV
:

10881 
msg
 = (
mg_dns_mesßge
 *Ë
	`MG_MALLOC
((*msg));

10882 i‡(
	`mg_∑r£_dns
(
nc
->
ªcv_mbuf
.
buf
, *(*Ë
d©a
, 
msg
) == 0 &&

10883 
msg
->
num_™swîs
 > 0) {

10884 
ªq
->
	`ˇŒback
(
msg
,Ñeq->
d©a
, 
MG_RESOLVE_OK
);

10885 
nc
->
u£r_d©a
 = 
NULL
;

10886 
	`MG_FREE
(
ªq
);

10888 
ªq
->
îr
 = 
MG_RESOLVE_NO_ANSWERS
;

10890 
	`MG_FREE
(
msg
);

10891 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

10893 
MG_EV_SEND
:

10898 
nc
->
Êags
 &~
MG_F_CLOSE_IMMEDIATELY
;

10899 
	`mbuf_ªmove
(&
nc
->
£nd_mbuf
,Çc->£nd_mbuf.
Àn
);

10901 
MG_EV_TIMER
:

10902 
ªq
->
îr
 = 
MG_RESOLVE_TIMEOUT
;

10903 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

10905 
MG_EV_CLOSE
:

10907 i‡(
ªq
 !
NULL
) {

10908 
ªq
->
	`ˇŒback
(
NULL
,Ñeq->
d©a
,Ñeq->
îr
);

10909 
nc
->
u£r_d©a
 = 
NULL
;

10910 
	`MG_FREE
(
ªq
);

10914 
	}
}

10916 
	$mg_ªsﬁve_async
(
mg_mgr
 *
mgr
, c⁄° *
«me
, 
quîy
,

10917 
mg_ªsﬁve_ˇŒback_t
 
cb
, *
d©a
) {

10918 
mg_ªsﬁve_async_›ts
 
›ts
;

10919 
	`mem£t
(&
›ts
, 0, (opts));

10920  
	`mg_ªsﬁve_async_›t
(
mgr
, 
«me
, 
quîy
, 
cb
, 
d©a
, 
›ts
);

10921 
	}
}

10923 
	$mg_ªsﬁve_async_›t
(
mg_mgr
 *
mgr
, c⁄° *
«me
, 
quîy
,

10924 
mg_ªsﬁve_ˇŒback_t
 
cb
, *
d©a
,

10925 
mg_ªsﬁve_async_›ts
 
›ts
) {

10926 
mg_ªsﬁve_async_ªque°
 *
ªq
;

10927 
mg_c⁄√˘i⁄
 *
dns_nc
;

10928 c⁄° *
«me£rvî
 = 
›ts
.
«me£rvî_uæ
;

10930 
	`DBG
(("%†%d %p", 
«me
, 
quîy
, 
›ts
.
dns_c⁄n
));

10933 
ªq
 = (
mg_ªsﬁve_async_ªque°
 *Ë
	`MG_CALLOC
(1, (*req));

10934 i‡(
ªq
 =
NULL
) {

10938 
	`°∫˝y
(
ªq
->
«me
,Çame, (req->name));

10939 
ªq
->
quîy
 = query;

10940 
ªq
->
ˇŒback
 = 
cb
;

10941 
ªq
->
d©a
 = data;

10943 
ªq
->
max_ªåõs
 = 
›ts
.max_retries ? opts.max_retries : 2;

10944 
ªq
->
timeout
 = 
›ts
.timeout ? opts.timeout : 5;

10947 i‡(
«me£rvî
 =
NULL
 && 
mg_dns_£rvî
[0] == '\0' &&

10948 
	`mg_gë_ù_addªss_of_«me£rvî
(
mg_dns_£rvî
, (mg_dns_server)) ==

10950 
	`°∫˝y
(
mg_dns_£rvî
, 
mg_deÁu…_dns_£rvî
, (mg_dns_server));

10953 i‡(
«me£rvî
 =
NULL
) {

10954 
«me£rvî
 = 
mg_dns_£rvî
;

10957 
dns_nc
 = 
	`mg_c⁄√˘
(
mgr
, 
«me£rvî
, 
mg_ªsﬁve_async_eh
);

10958 i‡(
dns_nc
 =
NULL
) {

10959 
	`‰ì
(
ªq
);

10962 
dns_nc
->
u£r_d©a
 = 
ªq
;

10963 i‡(
›ts
.
dns_c⁄n
 !
NULL
) {

10964 *
›ts
.
dns_c⁄n
 = 
dns_nc
;

10968 
	}
}

10971 #ifde‡
MG_MODULE_LINES


10994 #i‡
MG_ENABLE_COAP


10996 
	$mg_cﬂp_‰ì_›ti⁄s
(
mg_cﬂp_mesßge
 *
cm
) {

10997 
cm
->
›ti⁄s
 !
NULL
) {

10998 
mg_cﬂp_›ti⁄
 *
√xt
 = 
cm
->
›ti⁄s
->next;

10999 
	`MG_FREE
(
cm
->
›ti⁄s
);

11000 
cm
->
›ti⁄s
 = 
√xt
;

11002 
	}
}

11004 
mg_cﬂp_›ti⁄
 *
	$mg_cﬂp_add_›ti⁄
(
mg_cﬂp_mesßge
 *
cm
,

11005 
uöt32_t
 
numbî
, *
vÆue
,

11006 
size_t
 
Àn
) {

11007 
mg_cﬂp_›ti⁄
 *
√w_›ti⁄
 =

11008 (
mg_cﬂp_›ti⁄
 *Ë
	`MG_CALLOC
(1, (*
√w_›ti⁄
));

11010 
√w_›ti⁄
->
numbî
 =Çumber;

11011 
√w_›ti⁄
->
vÆue
.
p
 = value;

11012 
√w_›ti⁄
->
vÆue
.
Àn
 =Üen;

11014 i‡(
cm
->
›ti⁄s
 =
NULL
) {

11015 
cm
->
›ti⁄s
 = cm->
›tiomg_èû
 = 
√w_›ti⁄
;

11022 i‡(
cm
->
›tiomg_èû
->
numbî
 <
√w_›ti⁄
->number) {

11024 
cm
->
›tiomg_èû
 = cm->›tiomg_èû->
√xt
 = 
√w_›ti⁄
;

11027 
mg_cﬂp_›ti⁄
 *
cuºít_›t
 = 
cm
->
›ti⁄s
;

11028 
mg_cﬂp_›ti⁄
 *
¥ev_›t
 = 0;

11030 
cuºít_›t
 !
NULL
) {

11031 i‡(
cuºít_›t
->
numbî
 > 
√w_›ti⁄
->number) {

11034 
¥ev_›t
 = 
cuºít_›t
;

11035 
cuºít_›t
 = cuºít_›t->
√xt
;

11038 i‡(
¥ev_›t
 !
NULL
) {

11039 
¥ev_›t
->
√xt
 = 
√w_›ti⁄
;

11040 
√w_›ti⁄
->
√xt
 = 
cuºít_›t
;

11043 
√w_›ti⁄
->
√xt
 = 
cm
->
›ti⁄s
;

11044 
cm
->
›ti⁄s
 = 
√w_›ti⁄
;

11049  
√w_›ti⁄
;

11050 
	}
}

11057 *
	$cﬂp_∑r£_hódî
(*
±r
, 
mbuf
 *
io
,

11058 
mg_cﬂp_mesßge
 *
cm
) {

11059 i‡(
io
->
Àn
 < (
uöt32_t
)) {

11060 
cm
->
Êags
 |
MG_COAP_NOT_ENOUGH_DATA
;

11061  
NULL
;

11070 i‡(((
uöt8_t
Ë*
±r
 >> 6) != 1) {

11071 
cm
->
Êags
 |
MG_COAP_IGNORE
;

11072  
NULL
;

11080 
cm
->
msg_ty≥
 = ((
uöt8_t
Ë*
±r
 & 0x30) >> 4;

11081 
cm
->
Êags
 |
MG_COAP_MSG_TYPE_FIELD
;

11089 
cm
->
tokí
.
Àn
 = *
±r
 & 0x0F;

11090 i‡(
cm
->
tokí
.
Àn
 > 8) {

11091 
cm
->
Êags
 |
MG_COAP_FORMAT_ERROR
;

11092  
NULL
;

11095 
±r
++;

11101 
cm
->
code_˛ass
 = (
uöt8_t
Ë*
±r
 >> 5;

11102 
cm
->
code_dëaû
 = *
±r
 & 0x1F;

11103 
cm
->
Êags
 |(
MG_COAP_CODE_CLASS_FIELD
 | 
MG_COAP_CODE_DETAIL_FIELD
);

11105 
±r
++;

11108 
cm
->
msg_id
 = (
uöt8_t
Ë*
±r
 << 8 | (uint8_t) * (ptr + 1);

11109 
cm
->
Êags
 |
MG_COAP_MSG_ID_FIELD
;

11111 
±r
 += 2;

11113  
±r
;

11114 
	}
}

11121 *
	$cﬂp_gë_tokí
(*
±r
, 
mbuf
 *
io
,

11122 
mg_cﬂp_mesßge
 *
cm
) {

11123 i‡(
cm
->
tokí
.
Àn
 != 0) {

11124 i‡(
±r
 + 
cm
->
tokí
.
Àn
 > 
io
->
buf
 + io->len) {

11125 
cm
->
Êags
 |
MG_COAP_NOT_ENOUGH_DATA
;

11126  
NULL
;

11128 
cm
->
tokí
.
p
 = 
±r
;

11129 
±r
 +
cm
->
tokí
.
Àn
;

11130 
cm
->
Êags
 |
MG_COAP_TOKEN_FIELD
;

11134  
±r
;

11135 
	}
}

11142 
	$cﬂp_gë_ext_›t
(*
±r
, 
mbuf
 *
io
, 
uöt16_t
 *
›t_öfo
) {

11143 
ªt
 = 0;

11145 i‡(*
›t_öfo
 == 13) {

11150 i‡(
±r
 < 
io
->
buf
 + io->
Àn
) {

11151 *
›t_öfo
 = (
uöt8_t
Ë*
±r
 + 13;

11152 
ªt
 = (
uöt8_t
);

11154 
ªt
 = -1;

11156 } i‡(*
›t_öfo
 == 14) {

11161 i‡(
±r
 + (
uöt8_t
Ë< 
io
->
buf
 + io->
Àn
) {

11162 *
›t_öfo
 = ((
uöt8_t
Ë*
±r
 << 8 | (uint8_t) * (ptr + 1)) + 269;

11163 
ªt
 = (
uöt16_t
);

11165 
ªt
 = -1;

11169  
ªt
;

11170 
	}
}

11188 *
	$cﬂp_gë_›ti⁄s
(*
±r
, 
mbuf
 *
io
,

11189 
mg_cﬂp_mesßge
 *
cm
) {

11190 
uöt16_t
 
¥ev_›t
 = 0;

11192 i‡(
±r
 =
io
->
buf
 + io->
Àn
) {

11194  
NULL
;

11198 
±r
 < 
io
->
buf
 + io->
Àn
 && (
uöt8_t
) *ptr != 0xFF) {

11199 
uöt16_t
 
›ti⁄_dñè
, 
›ti⁄_Ànght
;

11200 
›töfo_Àn
;

11203 
›ti⁄_dñè
 = ((
uöt8_t
Ë*
±r
 & 0xF0) >> 4;

11205 
›ti⁄_Ànght
 = *
±r
 & 0x0F;

11207 i‡(
›ti⁄_dñè
 =15 || 
›ti⁄_Ànght
 == 15) {

11212 
cm
->
Êags
 |
MG_COAP_FORMAT_ERROR
;

11216 
±r
++;

11219 
›töfo_Àn
 = 
	`cﬂp_gë_ext_›t
(
±r
, 
io
, &
›ti⁄_dñè
);

11220 i‡(
›töfo_Àn
 == -1) {

11221 
cm
->
Êags
 |
MG_COAP_NOT_ENOUGH_DATA
;

11225 
±r
 +
›töfo_Àn
;

11228 
›töfo_Àn
 = 
	`cﬂp_gë_ext_›t
(
±r
, 
io
, &
›ti⁄_Ànght
);

11229 i‡(
›töfo_Àn
 == -1) {

11230 
cm
->
Êags
 |
MG_COAP_NOT_ENOUGH_DATA
;

11234 
±r
 +
›töfo_Àn
;

11241 
›ti⁄_dñè
 +
¥ev_›t
;

11243 
	`mg_cﬂp_add_›ti⁄
(
cm
, 
›ti⁄_dñè
, 
±r
, 
›ti⁄_Ànght
);

11245 
¥ev_›t
 = 
›ti⁄_dñè
;

11247 i‡(
±r
 + 
›ti⁄_Ànght
 > 
io
->
buf
 + io->
Àn
) {

11248 
cm
->
Êags
 |
MG_COAP_NOT_ENOUGH_DATA
;

11252 
±r
 +
›ti⁄_Ànght
;

11255 i‡((
cm
->
Êags
 & 
MG_COAP_ERROR
) != 0) {

11256 
	`mg_cﬂp_‰ì_›ti⁄s
(
cm
);

11257  
NULL
;

11260 
cm
->
Êags
 |
MG_COAP_OPTIOMG_FIELD
;

11262 i‡(
±r
 =
io
->
buf
 + io->
Àn
) {

11264  
NULL
;

11267 
±r
++;

11269  
±r
;

11270 
	}
}

11272 
uöt32_t
 
	$mg_cﬂp_∑r£
(
mbuf
 *
io
, 
mg_cﬂp_mesßge
 *
cm
) {

11273 *
±r
;

11275 
	`mem£t
(
cm
, 0, (*cm));

11277 i‡((
±r
 = 
	`cﬂp_∑r£_hódî
(
io
->
buf
, io, 
cm
)Ë=
NULL
) {

11278  
cm
->
Êags
;

11281 i‡((
±r
 = 
	`cﬂp_gë_tokí
’å, 
io
, 
cm
)Ë=
NULL
) {

11282  
cm
->
Êags
;

11285 i‡((
±r
 = 
	`cﬂp_gë_›ti⁄s
’å, 
io
, 
cm
)Ë=
NULL
) {

11286  
cm
->
Êags
;

11290 
cm
->
∑ylﬂd
.
Àn
 = 
io
->À¿- (
±r
 - io->
buf
);

11291 i‡(
cm
->
∑ylﬂd
.
Àn
 != 0) {

11292 
cm
->
∑ylﬂd
.
p
 = 
±r
;

11293 
cm
->
Êags
 |
MG_COAP_PAYLOAD_FIELD
;

11296  
cm
->
Êags
;

11297 
	}
}

11304 
size_t
 
	$cﬂp_gë_ext_›t_size
(
uöt32_t
 
vÆue
) {

11305 
ªt
 = 0;

11307 i‡(
vÆue
 >= 13 && value <= 0xFF + 13) {

11308 
ªt
 = (
uöt8_t
);

11309 } i‡(
vÆue
 > 0xFF + 13 && value <= 0xFFFF + 269) {

11310 
ªt
 = (
uöt16_t
);

11313  
ªt
;

11314 
	}
}

11321 
	$cﬂp_•lô_›t
(
uöt32_t
 
vÆue
, 
uöt8_t
 *
ba£
, 
uöt16_t
 *
ext
) {

11322 
ªt
 = 0;

11324 i‡(
vÆue
 < 13) {

11325 *
ba£
 = 
vÆue
;

11326 } i‡(
vÆue
 >= 13 && value <= 0xFF + 13) {

11327 *
ba£
 = 13;

11328 *
ext
 = 
vÆue
 - 13;

11329 
ªt
 = (
uöt8_t
);

11330 } i‡(
vÆue
 > 0xFF + 13 && value <= 0xFFFF + 269) {

11331 *
ba£
 = 14;

11332 *
ext
 = 
vÆue
 - 269;

11333 
ªt
 = (
uöt16_t
);

11336  
ªt
;

11337 
	}
}

11344 *
	$cﬂp_add_uöt16
(*
±r
, 
uöt16_t
 
vÆ
) {

11345 *
±r
 = 
vÆ
 >> 8;

11346 
±r
++;

11347 *
±r
 = 
vÆ
 & 0x00FF;

11348 
±r
++;

11349  
±r
;

11350 
	}
}

11357 *
	$cﬂp_add_›t_öfo
(*
±r
, 
uöt16_t
 
vÆ
, 
size_t
 
Àn
) {

11358 i‡(
Àn
 =(
uöt8_t
)) {

11359 *
±r
 = (Ë
vÆ
;

11360 
±r
++;

11361 } i‡(
Àn
 =(
uöt16_t
)) {

11362 
±r
 = 
	`cﬂp_add_uöt16
’å, 
vÆ
);

11365  
±r
;

11366 
	}
}

11373 
uöt32_t
 
	$cﬂp_ˇlcuœã_∑ckë_size
(
mg_cﬂp_mesßge
 *
cm
,

11374 
size_t
 *
Àn
) {

11375 
mg_cﬂp_›ti⁄
 *
›t
;

11376 
uöt32_t
 
¥ev_›t_numbî
;

11378 *
Àn
 = 4;

11379 i‡(
cm
->
msg_ty≥
 > 
MG_COAP_MSG_MAX
) {

11380  
MG_COAP_ERROR
 | 
MG_COAP_MSG_TYPE_FIELD
;

11382 i‡(
cm
->
tokí
.
Àn
 > 8) {

11383  
MG_COAP_ERROR
 | 
MG_COAP_TOKEN_FIELD
;

11385 i‡(
cm
->
code_˛ass
 > 7) {

11386  
MG_COAP_ERROR
 | 
MG_COAP_CODE_CLASS_FIELD
;

11388 i‡(
cm
->
code_dëaû
 > 31) {

11389  
MG_COAP_ERROR
 | 
MG_COAP_CODE_DETAIL_FIELD
;

11392 *
Àn
 +
cm
->
tokí
.len;

11393 i‡(
cm
->
∑ylﬂd
.
Àn
 != 0) {

11394 *
Àn
 +
cm
->
∑ylﬂd
.len + 1;

11397 
›t
 = 
cm
->
›ti⁄s
;

11398 
¥ev_›t_numbî
 = 0;

11399 
›t
 !
NULL
) {

11400 *
Àn
 += 1;

11401 *
Àn
 +
	`cﬂp_gë_ext_›t_size
(
›t
->
numbî
 - 
¥ev_›t_numbî
);

11402 *
Àn
 +
	`cﬂp_gë_ext_›t_size
((
uöt32_t
Ë
›t
->
vÆue
.len);

11409 i‡((
›t
->
√xt
 !
NULL
 && o±->
numbî
 > opt->next->number) ||

11410 
›t
->
vÆue
.
Àn
 > 0xFFFF + 269 ||

11411 
›t
->
numbî
 - 
¥ev_›t_numbî
 > 0xFFFF + 269) {

11412  
MG_COAP_ERROR
 | 
MG_COAP_OPTIOMG_FIELD
;

11414 *
Àn
 +
›t
->
vÆue
.len;

11415 
¥ev_›t_numbî
 = 
›t
->
numbî
;

11416 
›t
 = o±->
√xt
;

11420 
	}
}

11422 
uöt32_t
 
	$mg_cﬂp_compo£
(
mg_cﬂp_mesßge
 *
cm
, 
mbuf
 *
io
) {

11423 
mg_cﬂp_›ti⁄
 *
›t
;

11424 
uöt32_t
 
ªs
, 
¥ev_›t_numbî
;

11425 
size_t
 
¥ev_io_Àn
, 
∑ckë_size
;

11426 *
±r
;

11428 
ªs
 = 
	`cﬂp_ˇlcuœã_∑ckë_size
(
cm
, &
∑ckë_size
);

11429 i‡(
ªs
 != 0) {

11430  
ªs
;

11434 
¥ev_io_Àn
 = 
io
->
Àn
;

11435 
	`mbuf_≠≥nd
(
io
, 
NULL
, 
∑ckë_size
);

11436 
±r
 = 
io
->
buf
 + 
¥ev_io_Àn
;

11444 *
±r
 = (1 << 6Ë| (
cm
->
msg_ty≥
 << 4Ë| (
uöt8_t
)(cm->
tokí
.
Àn
);

11445 
±r
++;

11448 *
±r
 = (
cm
->
code_˛ass
 << 5Ë| (cm->
code_dëaû
);

11449 
±r
++;

11451 
±r
 = 
	`cﬂp_add_uöt16
’å, 
cm
->
msg_id
);

11453 i‡(
cm
->
tokí
.
Àn
 != 0) {

11454 
	`mem˝y
(
±r
, 
cm
->
tokí
.
p
, cm->tokí.
Àn
);

11455 
±r
 +
cm
->
tokí
.
Àn
;

11458 
›t
 = 
cm
->
›ti⁄s
;

11459 
¥ev_›t_numbî
 = 0;

11460 
›t
 !
NULL
) {

11461 
uöt8_t
 
dñè_ba£
 = 0, 
Àngth_ba£
 = 0;

11462 
uöt16_t
 
dñè_ext
 = 0, 
Àngth_ext
 = 0;

11464 
size_t
 
›t_dñè_Àn
 =

11465 
	`cﬂp_•lô_›t
(
›t
->
numbî
 - 
¥ev_›t_numbî
, &
dñè_ba£
, &
dñè_ext
);

11466 
size_t
 
›t_Ànght_Àn
 =

11467 
	`cﬂp_•lô_›t
((
uöt32_t
Ë
›t
->
vÆue
.
Àn
, &
Àngth_ba£
, &
Àngth_ext
);

11469 *
±r
 = (
dñè_ba£
 << 4Ë| 
Àngth_ba£
;

11470 
±r
++;

11472 
±r
 = 
	`cﬂp_add_›t_öfo
’å, 
dñè_ext
, 
›t_dñè_Àn
);

11473 
±r
 = 
	`cﬂp_add_›t_öfo
’å, 
Àngth_ext
, 
›t_Ànght_Àn
);

11475 i‡(
›t
->
vÆue
.
Àn
 != 0) {

11476 
	`mem˝y
(
±r
, 
›t
->
vÆue
.
p
, o±->vÆue.
Àn
);

11477 
±r
 +
›t
->
vÆue
.
Àn
;

11480 
¥ev_›t_numbî
 = 
›t
->
numbî
;

11481 
›t
 = o±->
√xt
;

11484 i‡(
cm
->
∑ylﬂd
.
Àn
 != 0) {

11485 *
±r
 = () -1;

11486 
±r
++;

11487 
	`mem˝y
(
±r
, 
cm
->
∑ylﬂd
.
p
, cm->∑ylﬂd.
Àn
);

11491 
	}
}

11493 
uöt32_t
 
	$mg_cﬂp_£nd_mesßge
(
mg_c⁄√˘i⁄
 *
nc
,

11494 
mg_cﬂp_mesßge
 *
cm
) {

11495 
mbuf
 
∑ckë_out
;

11496 
uöt32_t
 
compo£_ªs
;

11498 
	`mbuf_öô
(&
∑ckë_out
, 0);

11499 
compo£_ªs
 = 
	`mg_cﬂp_compo£
(
cm
, &
∑ckë_out
);

11500 i‡(
compo£_ªs
 != 0) {

11501  
compo£_ªs
;

11504 
	`mg_£nd
(
nc
, 
∑ckë_out
.
buf
, (Ë∑ckë_out.
Àn
);

11505 
	`mbuf_‰ì
(&
∑ckë_out
);

11508 
	}
}

11510 
uöt32_t
 
	$mg_cﬂp_£nd_ack
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt16_t
 
msg_id
) {

11511 
mg_cﬂp_mesßge
 
cm
;

11512 
	`mem£t
(&
cm
, 0, (cm));

11513 
cm
.
msg_ty≥
 = 
MG_COAP_MSG_ACK
;

11514 
cm
.
msg_id
 = msg_id;

11516  
	`mg_cﬂp_£nd_mesßge
(
nc
, &
cm
);

11517 
	}
}

11519 
	$cﬂp_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
, *
ev_d©a
) {

11520 
mbuf
 *
io
 = &
nc
->
ªcv_mbuf
;

11521 
mg_cﬂp_mesßge
 
cm
;

11522 
uöt32_t
 
∑r£_ªs
;

11524 
	`mem£t
(&
cm
, 0, (cm));

11526 
nc
->
	`h™dÀr
“c, 
ev
, 
ev_d©a
);

11528 
ev
) {

11529 
MG_EV_RECV
:

11530 
∑r£_ªs
 = 
	`mg_cﬂp_∑r£
(
io
, &
cm
);

11531 i‡((
∑r£_ªs
 & 
MG_COAP_IGNORE
) == 0) {

11532 i‡((
cm
.
Êags
 & 
MG_COAP_NOT_ENOUGH_DATA
) != 0) {

11537 
cm
.
Êags
 |
MG_COAP_FORMAT_ERROR
;

11539 
nc
->
	`h™dÀr
“c, 
MG_COAP_EVENT_BASE
 + 
cm
.
msg_ty≥
, &cm);

11542 
	`mg_cﬂp_‰ì_›ti⁄s
(&
cm
);

11543 
	`mbuf_ªmove
(
io
, io->
Àn
);

11546 
	}
}

11557 
	$mg_£t_¥Ÿocﬁ_cﬂp
(
mg_c⁄√˘i⁄
 *
nc
) {

11559 i‡((
nc
->
Êags
 & 
MG_F_UDP
) == 0) {

11563 
nc
->
¥Ÿo_h™dÀr
 = 
cﬂp_h™dÀr
;

11566 
	}
}

11569 #ifde‡
MG_MODULE_LINES


11577 #i‡
MG_ENABLE_TUN


11587 
mg_tun_ªc⁄√˘
(
mg_tun_˛õ¡
 *
˛õ¡
, 
timeout
);

11589 
	$mg_tun_öô_˛õ¡
(
mg_tun_˛õ¡
 *
˛õ¡
, 
mg_mgr
 *
mgr
,

11590 
mg_iÁ˚
 *
iÁ˚
, c⁄° *
di•©chî
,

11591 
mg_tun_s¶_›ts
 
s¶
) {

11592 
˛õ¡
->
mgr
 = mgr;

11593 
˛õ¡
->
iÁ˚
 = iface;

11594 
˛õ¡
->
di•_uæ
 = 
di•©chî
;

11595 
˛õ¡
->
œ°_°ªam_id
 = 0;

11596 
˛õ¡
->
s¶
 = ssl;

11598 
˛õ¡
->
di•
 = 
NULL
;

11599 
˛õ¡
->
li°íî
 = 
NULL
;

11600 
˛õ¡
->
ªc⁄√˘
 = 
NULL
;

11601 
	}
}

11603 
	$mg_tun_log_‰ame
(
mg_tun_‰ame
 *
‰ame
) {

11604 
	`LOG
(
LL_DEBUG
, ("Got TUN frame:Åype=0x%x, flags=0x%x stream_id=0x%lx, "

11606 
‰ame
->
ty≥
, føme->
Êags
, føme->
°ªam_id
, føme->
body
.
Àn
));

11607 #i‡
MG_ENABLE_HEXDUMP


11609 
hex
[512];

11610 
	`mg_hexdump
(
‰ame
->
body
.
p
, føme->body.
Àn
, 
hex
, (hex) - 1);

11611 
hex
[(hex) - 1] = '\0';

11612 
	`LOG
(
LL_DEBUG
, ("body:\n%s", 
hex
));

11615 
	`LOG
(
LL_DEBUG
, ("body: '%.*s'", (Ë
‰ame
->
body
.
Àn
, føme->body.
p
));

11617 
	}
}

11619 
	$mg_tun_˛o£_Æl
(
mg_tun_˛õ¡
 *
˛õ¡
) {

11620 
mg_c⁄√˘i⁄
 *
nc
;

11621 
nc
 = 
˛õ¡
->
mgr
->
a˘ive_c⁄√˘i⁄s
;Ç¯!
NULL
;Ç¯nc->
√xt
) {

11622 i‡(
nc
->
iÁ˚
 =
˛õ¡
->iÁ˚ && !“c->
Êags
 & 
MG_F_LISTENING
)) {

11623 
	`LOG
(
LL_DEBUG
, ("ClosögÅu¬ñed c⁄√˘i⁄ %p", 
nc
));

11624 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

11628 
	}
}

11630 
	$mg_tun_˛õ¡_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
,

11631 *
ev_d©a
) {

11632 
mg_tun_˛õ¡
 *
˛õ¡
 = (mg_tun_˛õ¡ *Ë
nc
->
u£r_d©a
;

11634 
ev
) {

11635 
MG_EV_CONNECT
: {

11636 
îr
 = *(*Ë
ev_d©a
;

11638 i‡(
îr
) {

11639 
	`LOG
(
LL_ERROR
, ("C™nŸ c⁄√˘Åÿthêtu¬ñ di•©chî: %d", 
îr
));

11641 
	`LOG
(
LL_INFO
, ("ConnectedÅoÅheÅunnel dispatcher"));

11645 
MG_EV_HTTP_REPLY
: {

11646 
hâp_mesßge
 *
hm
 = (hâp_mesßgê*Ë
ev_d©a
;

11648 i‡(
hm
->
ª•_code
 != 200) {

11649 
	`LOG
(
LL_ERROR
,

11650 ("Tu¬ñ di•©chîÑïlyÇ⁄-OK sètu†codê%d", 
hm
->
ª•_code
));

11654 
MG_EV_WEBSOCKET_HANDSHAKE_DONE
: {

11655 
	`LOG
(
LL_INFO
, ("Tunnel dispatcher handshake done"));

11658 
MG_EV_WEBSOCKET_FRAME
: {

11659 
websockë_mesßge
 *
wm
 = (websockë_mesßgê*Ë
ev_d©a
;

11660 
mg_c⁄√˘i⁄
 *
tc
;

11661 
mg_tun_‰ame
 
‰ame
;

11663 i‡(
	`mg_tun_∑r£_‰ame
(
wm
->
d©a
, wm->
size
, &
‰ame
) == -1) {

11664 
	`LOG
(
LL_ERROR
, ("GŸ invÆidÅu¿‰amêdr›pög", 
wm
->
size
));

11668 
	`mg_tun_log_‰ame
(&
‰ame
);

11670 
tc
 = 
	`mg_tun_if_föd_c⁄n
(
˛õ¡
, 
‰ame
.
°ªam_id
);

11671 i‡(
tc
 =
NULL
) {

11672 i‡(
‰ame
.
body
.
Àn
 > 0) {

11673 
	`LOG
(
LL_DEBUG
, ("Got frameáfterÑeceivingÉnd has been closed"));

11677 i‡(
‰ame
.
body
.
Àn
 > 0) {

11678 
	`mg_if_ªcv_t˝_cb
(
tc
, (*Ë
‰ame
.
body
.
p
, føme.body.
Àn
,

11681 i‡(
‰ame
.
Êags
 & 
MG_TUN_F_END_STREAM
) {

11682 
	`LOG
(
LL_DEBUG
, ("ClosingÅunneled connection because gotÉnd of stream "

11684 
tc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

11685 
	`mg_˛o£_c⁄n
(
tc
);

11689 
MG_EV_CLOSE
: {

11690 
	`LOG
(
LL_DEBUG
, ("ClosingállÅunneled connections"));

11695 i‡(
˛õ¡
 !
NULL
) {

11696 
	`mg_tun_˛o£_Æl
(
˛õ¡
);

11697 
˛õ¡
->
di•
 = 
NULL
;

11698 
	`LOG
(
LL_INFO
, ("Dispatcher connection isÇo more,Ñeconnecting"));

11700 
	`mg_tun_ªc⁄√˘
(
˛õ¡
, 
MG_TUN_RECONNECT_INTERVAL
);

11707 
	}
}

11709 
	$mg_tun_do_ªc⁄√˘
(
mg_tun_˛õ¡
 *
˛õ¡
) {

11710 
mg_c⁄√˘i⁄
 *
dc
;

11711 
mg_c⁄√˘_›ts
 
›ts
;

11712 
	`mem£t
(&
›ts
, 0, (opts));

11713 #i‡
MG_ENABLE_SSL


11714 
›ts
.
s¶_˚π
 = 
˛õ¡
->
s¶
.ssl_cert;

11715 
›ts
.
s¶_key
 = 
˛õ¡
->
s¶
.ssl_key;

11716 
›ts
.
s¶_ˇ_˚π
 = 
˛õ¡
->
s¶
.ssl_ca_cert;

11719 i‡((
dc
 = 
	`mg_c⁄√˘_ws_›t
(
˛õ¡
->
mgr
, 
mg_tun_˛õ¡_h™dÀr
, 
›ts
,

11720 
˛õ¡
->
di•_uæ
, 
MG_TUN_PROTO_NAME
, 
NULL
)) ==

11721 
NULL
) {

11722 
	`LOG
(
LL_ERROR
,

11723 ("C™nŸ c⁄√˘ÅÿWS sîvî o¿add∏[%s]\n", 
˛õ¡
->
di•_uæ
));

11727 
˛õ¡
->
di•
 = 
dc
;

11728 
dc
->
u£r_d©a
 = 
˛õ¡
;

11729 
	}
}

11731 
	$mg_tun_ªc⁄√˘_ev_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
,

11732 *
ev_d©a
) {

11733 
mg_tun_˛õ¡
 *
˛õ¡
 = (mg_tun_˛õ¡ *Ë
nc
->
u£r_d©a
;

11734 (Ë
ev_d©a
;

11736 
ev
) {

11737 
MG_EV_TIMER
:

11738 i‡(!(
˛õ¡
->
li°íî
->
Êags
 & 
MG_F_TUN_DO_NOT_RECONNECT
)) {

11739 
	`mg_tun_do_ªc⁄√˘
(
˛õ¡
);

11742 
	`mg_tun_ªc⁄√˘
(
˛õ¡
, 0);

11746 
	}
}

11748 
	$mg_tun_ªc⁄√˘
(
mg_tun_˛õ¡
 *
˛õ¡
, 
timeout
) {

11749 i‡(
˛õ¡
->
ªc⁄√˘
 =
NULL
) {

11750 
˛õ¡
->
ªc⁄√˘
 =

11751 
	`mg_add_sock
(
˛õ¡
->
mgr
, 
INVALID_SOCKET
, 
mg_tun_ªc⁄√˘_ev_h™dÀr
);

11752 
˛õ¡
->
ªc⁄√˘
->
u£r_d©a
 = client;

11754 
˛õ¡
->
ªc⁄√˘
->
ev_timî_time
 = 
	`mg_time
(Ë+ 
timeout
;

11755 
	}
}

11757 
mg_tun_˛õ¡
 *
	$mg_tun_¸óã_˛õ¡
(
mg_mgr
 *
mgr
,

11758 c⁄° *
di•©chî
,

11759 
mg_tun_s¶_›ts
 
s¶
) {

11760 
mg_tun_˛õ¡
 *
˛õ¡
 = 
NULL
;

11761 
mg_iÁ˚
 *
iÁ˚
 = 
	`mg_föd_iÁ˚
(
mgr
, &
mg_tun_iÁ˚_vèbÀ
, 
NULL
);

11762 i‡(
iÁ˚
 =
NULL
) {

11763 
	`LOG
(
LL_ERROR
, ("TheÅun featureÑequiresÅhe managerÅo haveáÅun "

11765  
NULL
;

11768 
˛õ¡
 = (
mg_tun_˛õ¡
 *Ë
	`MG_MALLOC
((*client));

11769 
	`mg_tun_öô_˛õ¡
(
˛õ¡
, 
mgr
, 
iÁ˚
, 
di•©chî
, 
s¶
);

11770 
iÁ˚
->
d©a
 = 
˛õ¡
;

11777 
	`mg_tun_ªc⁄√˘
(
˛õ¡
, 0);

11778  
˛õ¡
;

11779 
	}
}

11781 
	$mg_tun_de°roy_˛õ¡
(
mg_tun_˛õ¡
 *
˛õ¡
) {

11789 i‡(
˛õ¡
 !
NULL
 && clõ¡->
di•
 != NULL) {

11791 
˛õ¡
->
di•
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

11793 
˛õ¡
->
di•
->
u£r_d©a
 = 
NULL
;

11796 i‡(
˛õ¡
 !
NULL
 && clõ¡->
ªc⁄√˘
 != NULL) {

11797 
˛õ¡
->
ªc⁄√˘
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

11800 i‡(
˛õ¡
 !
NULL
 && clõ¡->
iÁ˚
 != NULL) {

11801 
˛õ¡
->
iÁ˚
->
d©a
 = 
NULL
;

11804 
	`MG_FREE
(
˛õ¡
);

11805 
	}
}

11807 
mg_c⁄√˘i⁄
 *
	$mg_tun_do_böd
(
mg_tun_˛õ¡
 *
˛õ¡
,

11808 
mg_evít_h™dÀr_t
 
h™dÀr
,

11809 
mg_böd_›ts
 
›ts
) {

11810 
mg_c⁄√˘i⁄
 *
lc
;

11811 
›ts
.
iÁ˚
 = 
˛õ¡
->iface;

11812 
lc
 = 
	`mg_böd_›t
(
˛õ¡
->
mgr
, ":1234" , 
h™dÀr
, 
›ts
);

11813 
˛õ¡
->
li°íî
 = 
lc
;

11814  
lc
;

11815 
	}
}

11817 
mg_c⁄√˘i⁄
 *
	$mg_tun_böd_›t
(
mg_mgr
 *
mgr
,

11818 c⁄° *
di•©chî
,

11819 
mg_evít_h™dÀr_t
 
h™dÀr
,

11820 
mg_böd_›ts
 
›ts
) {

11821 #i‡
MG_ENABLE_SSL


11822 
mg_tun_s¶_›ts
 
s¶
 = {
›ts
.
s¶_˚π
, o±s.
s¶_key
, o±s.
s¶_ˇ_˚π
};

11824 
mg_tun_s¶_›ts
 
s¶
 = {0};

11826 
mg_tun_˛õ¡
 *
˛õ¡
 = 
	`mg_tun_¸óã_˛õ¡
(
mgr
, 
di•©chî
, 
s¶
);

11827 i‡(
˛õ¡
 =
NULL
) {

11828  
NULL
;

11830 #i‡
MG_ENABLE_SSL


11832 
›ts
.
s¶_˚π
 = 
NULL
;

11833 
›ts
.
s¶_key
 = 
NULL
;

11834 
›ts
.
s¶_ˇ_˚π
 = 
NULL
;

11836  
	`mg_tun_do_böd
(
˛õ¡
, 
h™dÀr
, 
›ts
);

11837 
	}
}

11839 
	$mg_tun_∑r£_‰ame
(*
d©a
, 
size_t
 
Àn
, 
mg_tun_‰ame
 *
‰ame
) {

11840 c⁄° 
size_t
 
hódî_size
 = (
uöt32_t
Ë+ (
uöt8_t
) * 2;

11841 i‡(
Àn
 < 
hódî_size
) {

11845 
‰ame
->
ty≥
 = *(
uöt8_t
 *Ë(
d©a
);

11846 
‰ame
->
Êags
 = *(
uöt8_t
 *Ë((*Ë
d©a
 + 1);

11847 
	`mem˝y
(&
‰ame
->
°ªam_id
, (*Ë
d©a
 + 2, (
uöt32_t
));

11848 
‰ame
->
°ªam_id
 = 
	`¡ohl
(frame->stream_id);

11849 
‰ame
->
body
.
p
 = (*Ë
d©a
 + 
hódî_size
;

11850 
‰ame
->
body
.
Àn
 =Üí - 
hódî_size
;

11852 
	}
}

11854 
	$mg_tun_£nd_‰ame
(
mg_c⁄√˘i⁄
 *
ws
, 
uöt32_t
 
°ªam_id
,

11855 
uöt8_t
 
ty≥
, uöt8_à
Êags
, 
mg_°r
 
msg
) {

11856 
°ªam_id
 = 
	`ht⁄l
(stream_id);

11858 
mg_°r
 
∑πs
[] = {

11859 {(*Ë&
ty≥
, (type)},

11860 {(*Ë&
Êags
, (flags)},

11861 {(*Ë&
°ªam_id
, (stream_id)},

11862 {
msg
.
p
, msg.
Àn
} };

11863 
	`mg_£nd_websockë_‰amev
(
ws
, 
WEBSOCKET_OP_BINARY
, 
∑πs
,

11864 (
∑πs
) / (parts[0]));

11866 
	}
}

11869 #ifde‡
MG_MODULE_LINES


11881 #i‡
MG_ENABLE_SNTP


11883 
	#SNTP_TIME_OFFSET
 2208988800

	)

11885 #i‚de‡
SNTP_TIMEOUT


11886 
	#SNTP_TIMEOUT
 10

	)

11889 #i‚de‡
SNTP_ATTEMPTS


11890 
	#SNTP_ATTEMPTS
 3

	)

11893 
uöt64_t
 
	$mg_gë_£c
(
uöt64_t
 
vÆ
) {

11894  (
vÆ
 & 0xFFFFFFFF00000000) >> 32;

11895 
	}
}

11897 
uöt64_t
 
	$mg_gë_u£c
(
uöt64_t
 
vÆ
) {

11898 
uöt64_t
 
tmp
 = (
vÆ
 & 0x00000000FFFFFFFF);

11899 
tmp
 *= 1000000;

11900 
tmp
 >>= 32;

11901  
tmp
;

11902 
	}
}

11904 
	$mg_¡p_to_tv
(
uöt64_t
 
vÆ
, 
timevÆ
 *
tv
) {

11905 
uöt64_t
 
tmp
;

11906 
tmp
 = 
	`mg_gë_£c
(
vÆ
);

11907 
tmp
 -
SNTP_TIME_OFFSET
;

11908 
tv
->
tv_£c
 = 
tmp
;

11909 
tv
->
tv_u£c
 = 
	`mg_gë_u£c
(
vÆ
);

11910 
	}
}

11912 
	$mg_gë_¡p_ts
(c⁄° *
¡p
, 
uöt64_t
 *
vÆ
) {

11913 
uöt32_t
 
tmp
;

11914 
	`mem˝y
(&
tmp
, 
¡p
, (tmp));

11915 
tmp
 = 
	`¡ohl
(tmp);

11916 *
vÆ
 = (
uöt64_t
Ë
tmp
 << 32;

11917 
	`mem˝y
(&
tmp
, 
¡p
 + 4, (tmp));

11918 
tmp
 = 
	`¡ohl
(tmp);

11919 *
vÆ
 |
tmp
;

11920 
	}
}

11922 
	$mg_¢ç_£nd_ªque°
(
mg_c⁄√˘i⁄
 *
c
) {

11923 
buf
[48] = {0};

11929 
buf
[0] = (3 << 6) | (4 << 3) | 3;

11951 #i‚de‡
MG_SNMP_NO_DELAY_CORRECTION


11952 
uöt32_t
 
£c
;

11953 
£c
 = 
	`ht⁄l
(
	`mg_time
(Ë+ 
SNTP_TIME_OFFSET
);

11954 
	`mem˝y
(&
buf
[40], &
£c
, (sec));

11957 
	`mg_£nd
(
c
, 
buf
, (buf));

11958 
	}
}

11960 #i‚de‡
MG_SNMP_NO_DELAY_CORRECTION


11961 
uöt64_t
 
	$mg_ˇlcuœã_dñay
(
uöt64_t
 
t1
, uöt64_à
t2
, uöt64_à
t3
) {

11963 
uöt64_t
 
d1
 = ((
	`mg_time
(Ë+ 
SNTP_TIME_OFFSET
) * 1000000) -

11964 (
	`mg_gë_£c
(
t1
Ë* 1000000 + 
	`mg_gë_u£c
(t1));

11965 
uöt64_t
 
d2
 = (
	`mg_gë_£c
(
t3
Ë* 1000000 + 
	`mg_gë_u£c
(t3)) -

11966 (
	`mg_gë_£c
(
t2
Ë* 1000000 + 
	`mg_gë_u£c
(t2));

11968  (
d1
 > 
d2
) ? d1 - d2 : 0;

11969 
	}
}

11972 
MG_INTERNAL
 
	$mg_¢ç_∑r£_ª∂y
(c⁄° *
buf
, 
Àn
,

11973 
mg_¢ç_mesßge
 *
msg
) {

11974 
uöt8_t
 
hdr
;

11975 
uöt64_t
 
‹ig_ts_T1
, 
ªcv_ts_T2
, 
åsm_ts_T3
, 
dñay
 = 0;

11976 
mode
;

11977 
timevÆ
 
tv
;

11979 (Ë
‹ig_ts_T1
;

11980 (Ë
ªcv_ts_T2
;

11981 i‡(
Àn
 < 48) {

11985 
hdr
 = 
buf
[0];

11987 i‡((
hdr
 & 0x38) >> 3 != 4) {

11992 
mode
 = 
hdr
 & 0x7;

11993 i‡(
mode
 != 4 && mode != 5) {

11998 
	`mem£t
(
msg
, 0, (*msg));

12000 
msg
->
kiss_of_dóth
 = (
buf
[1] == 0);

12002 
	`mg_gë_¡p_ts
(&
buf
[40], &
åsm_ts_T3
);

12004 #i‚de‡
MG_SNMP_NO_DELAY_CORRECTION


12005 
	`mg_gë_¡p_ts
(&
buf
[24], &
‹ig_ts_T1
);

12006 
	`mg_gë_¡p_ts
(&
buf
[32], &
ªcv_ts_T2
);

12007 
dñay
 = 
	`mg_ˇlcuœã_dñay
(
‹ig_ts_T1
, 
ªcv_ts_T2
, 
åsm_ts_T3
);

12010 
	`mg_¡p_to_tv
(
åsm_ts_T3
, &
tv
);

12012 
msg
->
time
 = (Ë
tv
.
tv_£c
 + (((Ëtv.
tv_u£c
 + 
dñay
) / 1000000.0);

12015 
	}
}

12017 
	$mg_¢ç_h™dÀr
(
mg_c⁄√˘i⁄
 *
c
, 
ev
, *
ev_d©a
) {

12018 
mbuf
 *
io
 = &
c
->
ªcv_mbuf
;

12019 
mg_¢ç_mesßge
 
msg
;

12021 
c
->
	`h™dÀr
(c, 
ev
, 
ev_d©a
);

12023 
ev
) {

12024 
MG_EV_RECV
: {

12025 i‡(
	`mg_¢ç_∑r£_ª∂y
(
io
->
buf
, io->
Àn
, &
msg
) < 0) {

12026 
	`DBG
(("InvÆid SNTPÖackëÑe˚ived (%d)", (Ë
io
->
Àn
));

12027 
c
->
	`h™dÀr
(c, 
MG_SNTP_MALFORMED_REPLY
, 
NULL
);

12029 
c
->
	`h™dÀr
(c, 
MG_SNTP_REPLY
, (*Ë&
msg
);

12032 
	`mbuf_ªmove
(
io
, io->
Àn
);

12036 
	}
}

12038 
	$mg_£t_¥Ÿocﬁ_¢ç
(
mg_c⁄√˘i⁄
 *
c
) {

12039 i‡((
c
->
Êags
 & 
MG_F_UDP
) == 0) {

12043 
c
->
¥Ÿo_h™dÀr
 = 
mg_¢ç_h™dÀr
;

12046 
	}
}

12048 
mg_c⁄√˘i⁄
 *
	$mg_¢ç_c⁄√˘
(
mg_mgr
 *
mgr
,

12049 
mg_evít_h™dÀr_t
 
evít_h™dÀr
,

12050 c⁄° *
¢ç_£rvî_«me
) {

12051 
mg_c⁄√˘i⁄
 *
c
 = 
NULL
;

12052 
uæ
[100], *
p_uæ
 = url;

12053 c⁄° *
¥Ÿo
 = "", *
p‹t
 = "", *
tmp
;

12056 
tmp
 = 
	`°rchr
(
¢ç_£rvî_«me
, ':');

12057 i‡(
tmp
 !
NULL
 && *(tmp + 1) == '/') {

12058 
tmp
 = 
	`°rchr
(tmp + 1, ':');

12061 i‡(
tmp
 =
NULL
) {

12062 
p‹t
 = ":123";

12066 i‡(
	`°∫cmp
(
¢ç_£rvî_«me
, "udp://", 6) != 0) {

12067 
¥Ÿo
 = "udp://";

12070 
	`mg_a•rötf
(&
p_uæ
, (
uæ
), "%s%s%s", 
¥Ÿo
, 
¢ç_£rvî_«me
, 
p‹t
);

12072 
c
 = 
	`mg_c⁄√˘
(
mgr
, 
p_uæ
, 
evít_h™dÀr
);

12074 i‡(
c
 =
NULL
) {

12075 
˛ónup
;

12078 
	`mg_£t_¥Ÿocﬁ_¢ç
(
c
);

12080 
˛ónup
:

12081 i‡(
p_uæ
 !
uæ
) {

12082 
	`MG_FREE
(
p_uæ
);

12085  
c
;

12086 
	}
}

12088 
	s¢ç_d©a
 {

12089 
mg_evít_h™dÀr_t
 
	mh™dî
;

12090 
	mcou¡
;

12093 
	$mg_¢ç_utû_ev_h™dÀr
(
mg_c⁄√˘i⁄
 *
c
, 
ev
,

12094 *
ev_d©a
) {

12095 
¢ç_d©a
 *
sd
 = (¢ç_d©®*Ë
c
->
u£r_d©a
;

12097 
ev
) {

12098 
MG_EV_CONNECT
:

12099 i‡(*(*Ë
ev_d©a
 != 0) {

12100 
	`mg_ˇŒ
(
c
, 
sd
->
h™dî
, 
MG_SNTP_FAILED
, 
NULL
);

12104 
MG_EV_TIMER
:

12105 i‡(
sd
->
cou¡
 <
SNTP_ATTEMPTS
) {

12106 
	`mg_¢ç_£nd_ªque°
(
c
);

12107 
	`mg_£t_timî
(
c
, 
	`mg_time
() + 10);

12108 
sd
->
cou¡
++;

12110 
	`mg_ˇŒ
(
c
, 
sd
->
h™dî
, 
MG_SNTP_FAILED
, 
NULL
);

12111 
c
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

12114 
MG_SNTP_MALFORMED_REPLY
:

12115 
	`mg_ˇŒ
(
c
, 
sd
->
h™dî
, 
MG_SNTP_FAILED
, 
NULL
);

12116 
c
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

12118 
MG_SNTP_REPLY
:

12119 
	`mg_ˇŒ
(
c
, 
sd
->
h™dî
, 
MG_SNTP_REPLY
, 
ev_d©a
);

12120 
c
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

12122 
MG_EV_CLOSE
:

12123 
	`MG_FREE
(
c
->
u£r_d©a
);

12124 
c
->
u£r_d©a
 = 
NULL
;

12127 
	}
}

12129 
mg_c⁄√˘i⁄
 *
	$mg_¢ç_gë_time
(
mg_mgr
 *
mgr
,

12130 
mg_evít_h™dÀr_t
 
evít_h™dÀr
,

12131 c⁄° *
¢ç_£rvî_«me
) {

12132 
mg_c⁄√˘i⁄
 *
c
;

12133 
¢ç_d©a
 *
sd
 = (¢ç_d©®*Ë
	`MG_CALLOC
(1, (*sd));

12134 i‡(
sd
 =
NULL
) {

12135  
NULL
;

12138 
c
 = 
	`mg_¢ç_c⁄√˘
(
mgr
, 
mg_¢ç_utû_ev_h™dÀr
, 
¢ç_£rvî_«me
);

12139 i‡(
c
 =
NULL
) {

12140 
	`MG_FREE
(
sd
);

12141  
NULL
;

12144 
sd
->
h™dî
 = 
evít_h™dÀr
;

12145 
c
->
u£r_d©a
 = 
sd
;

12147  
c
;

12148 
	}
}

12151 #ifde‡
MG_MODULE_LINES


12159 #i‡
CS_PLATFORM
 =
CS_P_CC3200


12161 
	~<°dio.h
>

12162 
	~<°rög.h
>

12164 #i‚de‡
__TI_COMPILER_VERSION__


12165 
	~<ªít.h
>

12166 
	~<sys/°©.h
>

12167 
	~<sys/time.h
>

12168 
	~<uni°d.h
>

12171 
	~<öc/hw_ty≥s.h
>

12172 
	~<öc/hw_memm≠.h
>

12173 
	~<drivîlib/¥cm.h
>

12174 
	~<drivîlib/rom.h
>

12175 
	~<drivîlib/rom_m≠.h
>

12176 
	~<drivîlib/u¨t.h
>

12177 
	~<drivîlib/utûs.h
>

12179 
	#CONSOLE_UART
 
UARTA0_BASE


	)

12181 #ifde‡
__TI_COMPILER_VERSION__


12182 
	$a•rötf
(**
°Ω
, c⁄° *
fmt
, ...) {

12183 
va_li°
 
≠
;

12184 
Àn
;

12186 *
°Ω
 = 
	`mÆloc
(
BUFSIZ
);

12187 i‡(*
°Ω
 =
NULL
)  -1;

12189 
	`va_°¨t
(
≠
, 
fmt
);

12190 
Àn
 = 
	`v¢¥ötf
(*
°Ω
, 
BUFSIZ
, 
fmt
, 
≠
);

12191 
	`va_íd
(
≠
);

12193 i‡(
Àn
 > 0) {

12194 *
°Ω
 = 
	`ªÆloc
(*°Ω, 
Àn
 + 1);

12195 i‡(*
°Ω
 =
NULL
)  -1;

12198 i‡(
Àn
 >
BUFSIZ
) {

12199 
	`va_°¨t
(
≠
, 
fmt
);

12200 
Àn
 = 
	`v¢¥ötf
(*
°Ω
,Üí + 1, 
fmt
, 
≠
);

12201 
	`va_íd
(
≠
);

12204  
Àn
;

12205 
	}
}

12207 #i‡
MG_TI_NO_HOST_INTERFACE


12208 
time_t
 
	$HOSTtime
() {

12209 
timevÆ
 
ç
;

12210 
	`gëtimeofday
(&
ç
, 
NULL
);

12211  
ç
.
tv_£c
;

12212 
	}
}

12217 #i‚de‡
__TI_COMPILER_VERSION__


12218 
	$_gëtimeofday_r
(
_ªít
 *
r
, 
timevÆ
 *
ç
, *
tzp
) {

12220 
	$gëtimeofday
(
timevÆ
 *
ç
, *
tzp
) {

12222 
r1
 = 0, 
r2
;

12225 
r2
 = 
r1
;

12226 
r1
 = 
	`PRCMSlowClkCåFa°Gë
();

12227 } 
r1
 !
r2
);

12229 
ç
->
tv_£c
 = (
r1
 >> 15);

12232 
ç
->
tv_u£c
 = (
r1
 & 0x7FFF) * 30;

12234 
	}
}

12236 
	$Âröt_°r
(
FILE
 *
Â
, c⁄° *
°r
) {

12237 *
°r
 != '\0') {

12238 i‡(*
°r
 ='\n'Ë
	`MAP_UARTCh¨Put
(
CONSOLE_UART
, '\r');

12239 
	`MAP_UARTCh¨Put
(
CONSOLE_UART
, *
°r
++);

12241 
	}
}

12243 
	$_exô
(
°©us
) {

12244 
	`Âröt_°r
(
°dîr
, "_exit\n");

12246 *(*Ë1 = 
°©us
;

12249 
	}
}

12251 
	$_nŸ_im∂emíãd
(c⁄° *
wh©
) {

12252 
	`Âröt_°r
(
°dîr
, 
wh©
);

12253 
	`Âröt_°r
(
°dîr
, " isÇot implemented\n");

12254 
	`_exô
(42);

12255 
	}
}

12257 
	$_kûl
(
pid
, 
sig
) {

12258 (Ë
pid
;

12259 (Ë
sig
;

12260 
	`_nŸ_im∂emíãd
("_kill");

12262 
	}
}

12264 
	$_gëpid
() {

12265 
	`Âröt_°r
(
°dîr
, "_getpid isÇot implemented\n");

12267 
	}
}

12269 
	$_ißây
(
fd
) {

12271  
fd
 < 2;

12272 
	}
}

12275 #ifde‡
MG_MODULE_LINES


12283 #i‡
CS_PLATFORM
 =
CS_P_MSP432


12285 
	~<ti/sysbios/BIOS.h
>

12286 
	~<ti/sysbios/k∆/Clock.h
>

12288 
	$gëtimeofday
(
timevÆ
 *
ç
, *
tzp
) {

12289 
uöt32_t
 
ticks
 = 
	`Clock_gëTicks
();

12290 
ç
->
tv_£c
 = 
ticks
 / 1000;

12291 
ç
->
tv_u£c
 = (
ticks
 % 1000) * 1000;

12293 
	}
}

12296 #ifde‡
MG_MODULE_LINES


12304 #i‡(
CS_PLATFORM
 =
CS_P_NRF51
 || CS_PLATFORM =
CS_P_NRF52
) && \

12305 
	$deföed
(
__ARMCC_VERSION
)

12306 
	$gëtimeofday
(
timevÆ
 *
ç
, *
tzp
) {

12308 
ç
->
tv_£c
 = 0;

12309 
ç
->
tv_u£c
 = 0;

12311 
	}
}

12313 #ifde‡
MG_MODULE_LINES


12321 #i‚de‡
CS_COMMON_PLATFORMS_SIMPLELINK_SL_FS_SLFS_H_


12322 
	#CS_COMMON_PLATFORMS_SIMPLELINK_SL_FS_SLFS_H_


	)

12324 #i‡
deföed
(
MG_FS_SLFS
)

12326 
	~<°dio.h
>

12327 #i‚de‡
__TI_COMPILER_VERSION__


12328 
	~<uni°d.h
>

12329 
	~<sys/°©.h
>

12332 
	#MAX_OPEN_SLFS_FILES
 8

	)

12335 
fs_¶fs_›í
(c⁄° *
∑th«me
, 
Êags
, 
mode_t
 
mode
);

12336 
fs_¶fs_˛o£
(
fd
);

12337 
ssize_t
 
fs_¶fs_ªad
(
fd
, *
buf
, 
size_t
 
cou¡
);

12338 
ssize_t
 
fs_¶fs_wrôe
(
fd
, c⁄° *
buf
, 
size_t
 
cou¡
);

12339 
fs_¶fs_°©
(c⁄° *
∑th«me
, 
°©
 *
s
);

12340 
fs_¶fs_f°©
(
fd
, 
°©
 *
s
);

12341 
off_t
 
fs_¶fs_l£ek
(
fd
, off_à
off£t
, 
whí˚
);

12342 
fs_¶fs_u∆ök
(c⁄° *
fûíame
);

12343 
fs_¶fs_ª«me
(c⁄° *
‰om
, c⁄° *
to
);

12345 
fs_¶fs_£t_√w_fûe_size
(c⁄° *
«me
, 
size_t
 
size
);

12350 #ifde‡
MG_MODULE_LINES


12360 #i‡
deföed
(
MG_FS_SLFS
Ë|| deföed(
CC3200_FS_SLFS
)

12364 
	~<î∫o.h
>

12366 #i‡
CS_PLATFORM
 =
CS_P_CC3200


12367 
	~<öc/hw_ty≥s.h
>

12369 
	~<sim∂ñök/ö˛ude/sim∂ñök.h
>

12370 
	~<sim∂ñök/ö˛ude/fs.h
>

12375 
£t_î∫o
(
e
);

12376 c⁄° *
dr›_dú
(c⁄° *
‚ame
, 
boﬁ
 *
is_¶fs
);

12382 #i‚de‡
FS_SLFS_MAX_FILE_SIZE


12383 
	#FS_SLFS_MAX_FILE_SIZE
 (64 * 1024)

	)

12386 
	s¶_fûe_size_höt
 {

12387 *
	m«me
;

12388 
size_t
 
	msize
;

12391 
	s¶_fd_öfo
 {

12392 
_i32
 
	mfh
;

12393 
_off_t
 
	mpos
;

12394 
size_t
 
	msize
;

12397 
¶_fd_öfo
 
	gs_¶_fds
[
MAX_OPEN_SLFS_FILES
];

12398 
¶_fûe_size_höt
 
	gs_¶_fûe_size_höts
[
MAX_OPEN_SLFS_FILES
];

12400 
	$¶_fs_to_î∫o
(
_i32
 
r
) {

12401 
	`DBG
(("SLÉº‹: %d", (Ë
r
));

12402 
r
) {

12403 
SL_FS_OK
:

12405 
SL_FS_FILE_NAME_EXIST
:

12406  
EEXIST
;

12407 
SL_FS_WRONG_FILE_NAME
:

12408  
EINVAL
;

12409 
SL_FS_ERR_NO_AVAILABLE_NV_INDEX
:

12410 
SL_FS_ERR_NO_AVAILABLE_BLOCKS
:

12411  
ENOSPC
;

12412 
SL_FS_ERR_FAILED_TO_ALLOCATE_MEM
:

12413  
ENOMEM
;

12414 
SL_FS_ERR_FILE_NOT_EXISTS
:

12415  
ENOENT
;

12416 
SL_FS_ERR_NOT_SUPPORTED
:

12417  
ENOTSUP
;

12419  
ENXIO
;

12420 
	}
}

12422 
	$fs_¶fs_›í
(c⁄° *
∑th«me
, 
Êags
, 
mode_t
 
mode
) {

12423 
fd
;

12424 
fd
 = 0; fd < 
MAX_OPEN_SLFS_FILES
; fd++) {

12425 i‡(
s_¶_fds
[
fd
].
fh
 <= 0) ;

12427 i‡(
fd
 >
MAX_OPEN_SLFS_FILES
Ë 
	`£t_î∫o
(
ENOMEM
);

12428 
¶_fd_öfo
 *
fi
 = &
s_¶_fds
[
fd
];

12434 
∑th«me
 = 
	`dr›_dú
’©h«me, 
NULL
);

12436 
_u32
 
am
 = 0;

12437 
fi
->
size
 = (
size_t
) -1;

12438 
rw
 = (
Êags
 & 3);

12439 i‡(
rw
 =
O_RDONLY
) {

12440 
SlFsFûeInfo_t
 
¶_fi
;

12441 
_i32
 
r
 = 
	`¶_FsGëInfo
((c⁄° 
_u8
 *Ë
∑th«me
, 0, &
¶_fi
);

12442 i‡(
r
 =
SL_FS_OK
) {

12443 
fi
->
size
 = 
¶_fi
.
FûeLí
;

12445 
am
 = 
FS_MODE_OPEN_READ
;

12447 i‡(!(
Êags
 & 
O_TRUNC
Ë|| (Êag†& 
O_APPEND
)) {

12450  
	`£t_î∫o
(
ENOTSUP
);

12452 i‡(
Êags
 & 
O_CREAT
) {

12453 
size_t
 
i
, 
size
 = 
FS_SLFS_MAX_FILE_SIZE
;

12454 
i
 = 0; i < 
MAX_OPEN_SLFS_FILES
; i++) {

12455 i‡(
s_¶_fûe_size_höts
[
i
].
«me
 !
NULL
 &&

12456 
	`°rcmp
(
s_¶_fûe_size_höts
[
i
].
«me
, 
∑th«me
) == 0) {

12457 
size
 = 
s_¶_fûe_size_höts
[
i
].size;

12458 
	`‰ì
(
s_¶_fûe_size_höts
[
i
].
«me
);

12459 
s_¶_fûe_size_höts
[
i
].
«me
 = 
NULL
;

12463 
	`DBG
(("¸ótög %†wôh max sizê%d", 
∑th«me
, (Ë
size
));

12464 
am
 = 
	`FS_MODE_OPEN_CREATE
(
size
, 0);

12466 
am
 = 
FS_MODE_OPEN_WRITE
;

12469 
_i32
 
r
 = 
	`¶_FsO≥n
((
_u8
 *Ë
∑th«me
, 
am
, 
NULL
, &
fi
->
fh
);

12470 
	`DBG
(("¶_FsO≥n(%s, 0x%xË%d, %d", 
∑th«me
, (Ë
am
, (Ë
r
,

12471 (Ë
fi
->
fh
));

12472 i‡(
r
 =
SL_FS_OK
) {

12473 
fi
->
pos
 = 0;

12474 
r
 = 
fd
;

12476 
fi
->
fh
 = -1;

12477 
r
 = 
	`£t_î∫o
(
	`¶_fs_to_î∫o
(r));

12479  
r
;

12480 
	}
}

12482 
	$fs_¶fs_˛o£
(
fd
) {

12483 
¶_fd_öfo
 *
fi
 = &
s_¶_fds
[
fd
];

12484 i‡(
fi
->
fh
 <0Ë 
	`£t_î∫o
(
EBADF
);

12485 
_i32
 
r
 = 
	`¶_FsClo£
(
fi
->
fh
, 
NULL
, NULL, 0);

12486 
	`DBG
(("¶_FsClo£(%dË%d", (Ë
fi
->
fh
, (Ë
r
));

12487 
s_¶_fds
[
fd
].
fh
 = -1;

12488  
	`£t_î∫o
(
	`¶_fs_to_î∫o
(
r
));

12489 
	}
}

12491 
ssize_t
 
	$fs_¶fs_ªad
(
fd
, *
buf
, 
size_t
 
cou¡
) {

12492 
¶_fd_öfo
 *
fi
 = &
s_¶_fds
[
fd
];

12493 i‡(
fi
->
fh
 <0Ë 
	`£t_î∫o
(
EBADF
);

12496 i‡(
fi
->
pos
 =fi->
size
)  0;

12497 
_i32
 
r
 = 
	`¶_FsRód
(
fi
->
fh
, fi->
pos
, 
buf
, 
cou¡
);

12498 
	`DBG
(("¶_FsRód(%d, %d, %dË%d", (Ë
fi
->
fh
, (Ëfi->
pos
, (Ë
cou¡
,

12499 (Ë
r
));

12500 i‡(
r
 >= 0) {

12501 
fi
->
pos
 +
r
;

12502  
r
;

12504  
	`£t_î∫o
(
	`¶_fs_to_î∫o
(
r
));

12505 
	}
}

12507 
ssize_t
 
	$fs_¶fs_wrôe
(
fd
, c⁄° *
buf
, 
size_t
 
cou¡
) {

12508 
¶_fd_öfo
 *
fi
 = &
s_¶_fds
[
fd
];

12509 i‡(
fi
->
fh
 <0Ë 
	`£t_î∫o
(
EBADF
);

12510 
_i32
 
r
 = 
	`¶_FsWrôe
(
fi
->
fh
, fi->
pos
, (
_u8
 *Ë
buf
, 
cou¡
);

12511 
	`DBG
(("¶_FsWrôe(%d, %d, %dË%d", (Ë
fi
->
fh
, (Ëfi->
pos
, (Ë
cou¡
,

12512 (Ë
r
));

12513 i‡(
r
 >= 0) {

12514 
fi
->
pos
 +
r
;

12515  
r
;

12517  
	`£t_î∫o
(
	`¶_fs_to_î∫o
(
r
));

12518 
	}
}

12520 
	$fs_¶fs_°©
(c⁄° *
∑th«me
, 
°©
 *
s
) {

12521 
SlFsFûeInfo_t
 
¶_fi
;

12526 
∑th«me
 = 
	`dr›_dú
’©h«me, 
NULL
);

12527 
_i32
 
r
 = 
	`¶_FsGëInfo
((c⁄° 
_u8
 *Ë
∑th«me
, 0, &
¶_fi
);

12528 i‡(
r
 =
SL_FS_OK
) {

12529 
s
->
°_mode
 = 
S_IFREG
 | 0666;

12530 
s
->
°_∆ök
 = 1;

12531 
s
->
°_size
 = 
¶_fi
.
FûeLí
;

12534  
	`£t_î∫o
(
	`¶_fs_to_î∫o
(
r
));

12535 
	}
}

12537 
	$fs_¶fs_f°©
(
fd
, 
°©
 *
s
) {

12538 
¶_fd_öfo
 *
fi
 = &
s_¶_fds
[
fd
];

12539 i‡(
fi
->
fh
 <0Ë 
	`£t_î∫o
(
EBADF
);

12540 
s
->
°_mode
 = 0666;

12541 
s
->
°_mode
 = 
S_IFREG
 | 0666;

12542 
s
->
°_∆ök
 = 1;

12543 
s
->
°_size
 = 
fi
->
size
;

12545 
	}
}

12547 
off_t
 
	$fs_¶fs_l£ek
(
fd
, 
off_t
 
off£t
, 
whí˚
) {

12548 i‡(
s_¶_fds
[
fd
].
fh
 <0Ë 
	`£t_î∫o
(
EBADF
);

12549 
whí˚
) {

12550 
SEEK_SET
:

12551 
s_¶_fds
[
fd
].
pos
 = 
off£t
;

12553 
SEEK_CUR
:

12554 
s_¶_fds
[
fd
].
pos
 +
off£t
;

12556 
SEEK_END
:

12557  
	`£t_î∫o
(
ENOTSUP
);

12560 
	}
}

12562 
	$fs_¶fs_u∆ök
(c⁄° *
∑th«me
) {

12567 
∑th«me
 = 
	`dr›_dú
’©h«me, 
NULL
);

12568  
	`£t_î∫o
(
	`¶_fs_to_î∫o
(
	`¶_FsDñ
((c⁄° 
_u8
 *Ë
∑th«me
, 0)));

12569 
	}
}

12571 
	$fs_¶fs_ª«me
(c⁄° *
‰om
, c⁄° *
to
) {

12572  
	`£t_î∫o
(
ENOTSUP
);

12573 
	}
}

12575 
	$fs_¶fs_£t_√w_fûe_size
(c⁄° *
«me
, 
size_t
 
size
) {

12576 
i
;

12577 
i
 = 0; i < 
MAX_OPEN_SLFS_FILES
; i++) {

12578 i‡(
s_¶_fûe_size_höts
[
i
].
«me
 =
NULL
) {

12579 
	`DBG
(("Fûêsizêhöt: %†%d", 
«me
, (Ë
size
));

12580 
s_¶_fûe_size_höts
[
i
].
«me
 = 
	`°rdup
(name);

12581 
s_¶_fûe_size_höts
[
i
].
size
 = size;

12585 
	}
}

12588 #ifde‡
MG_MODULE_LINES


12596 #i‡
MG_NET_IF
 =
MG_NET_IF_SIMPLELINK
 && \

12597 (
deföed
(
MG_FS_SLFS
Ë|| 
	$deföed
(
MG_FS_SPIFFS
))

12599 
	~<î∫o.h
>

12600 
	~<°dboﬁ.h
>

12601 
	~<°dio.h
>

12602 
	~<°dlib.h
>

12603 
	~<°rög.h
>

12604 #ifde‡
__TI_COMPILER_VERSION__


12605 
	~<fûe.h
>

12611 #ifde‡
CC3200_FS_SPIFFS


12615 #ifde‡
MG_FS_SLFS


12619 
	#NUM_SYS_FDS
 3

	)

12620 
	#SPIFFS_FD_BASE
 10

	)

12621 
	#SLFS_FD_BASE
 100

	)

12623 #i‚de‡
MG_UART_CHAR_PUT


12624 #i‡
CS_PLATFORM
 =
CS_P_CC3200


12625 
	~<öc/hw_ty≥s.h
>

12626 
	~<öc/hw_memm≠.h
>

12627 
	~<drivîlib/rom.h
>

12628 
	~<drivîlib/rom_m≠.h
>

12629 
	~<drivîlib/u¨t.h
>

12630 
	#MG_UART_CHAR_PUT
(
fd
, 
c
Ë
	`MAP_UARTCh¨Put
(
UARTA0_BASE
, c);

	)

12632 
	#MG_UART_CHAR_PUT
(
fd
, 
c
)

	)

12636 
	$£t_î∫o
(
e
) {

12637 
î∫o
 = 
e
;

12638  (
e
 == 0 ? 0 : -1);

12639 
	}
}

12641 c⁄° *
	$dr›_dú
(c⁄° *
‚ame
, 
boﬁ
 *
is_¶fs
) {

12642 i‡(
is_¶fs
 !
NULL
) {

12643 *
is_¶fs
 = (
	`°∫cmp
(
‚ame
, "SL:", 3) == 0);

12644 i‡(*
is_¶fs
Ë
‚ame
 += 3;

12647 i‡(
‚ame
[0] == '.' && fname[1] == '/') {

12648 
‚ame
 += 2;

12654 i‡(
‚ame
[0] ='/' && 
	`°rchr
(‚amê+ 1, '/'Ë=
NULL
) {

12655 
‚ame
++;

12657  
‚ame
;

12658 
	}
}

12660 
	efd_ty≥
 {

12661 
	mFD_INVALID
,

12662 
	mFD_SYS
,

12663 #ifde‡
CC3200_FS_SPIFFS


12664 
	mFD_SPIFFS
,

12666 #ifde‡
MG_FS_SLFS


12667 
	mFD_SLFS


12670 
	$fd_ty≥
(
fd
) {

12671 i‡(
fd
 >0 && fd < 
NUM_SYS_FDS
Ë 
FD_SYS
;

12672 #ifde‡
CC3200_FS_SPIFFS


12673 i‡(
fd
 >
SPIFFS_FD_BASE
 && fd < SPIFFS_FD_BASE + 
MAX_OPEN_SPIFFS_FILES
) {

12674  
FD_SPIFFS
;

12677 #ifde‡
MG_FS_SLFS


12678 i‡(
fd
 >
SLFS_FD_BASE
 && fd < SLFS_FD_BASE + 
MAX_OPEN_SLFS_FILES
) {

12679  
FD_SLFS
;

12682  
FD_INVALID
;

12683 
	}
}

12685 #i‡
MG_TI_NO_HOST_INTERFACE


12686 
	$›í
(c⁄° *
∑th«me
, 
Êags
, 
mode
) {

12688 
	$_›í
(c⁄° *
∑th«me
, 
Êags
, 
mode_t
 
mode
) {

12690 
fd
 = -1;

12691 
boﬁ
 
is_¶
;

12692 c⁄° *
‚ame
 = 
	`dr›_dú
(
∑th«me
, &
is_¶
);

12693 i‡(
is_¶
) {

12694 #ifde‡
MG_FS_SLFS


12695 
fd
 = 
	`fs_¶fs_›í
(
‚ame
, 
Êags
, 
mode
);

12696 i‡(
fd
 >0Ëfd +
SLFS_FD_BASE
;

12699 #ifde‡
CC3200_FS_SPIFFS


12700 
fd
 = 
	`fs_•iffs_›í
(
‚ame
, 
Êags
, 
mode
);

12701 i‡(
fd
 >0Ëfd +
SPIFFS_FD_BASE
;

12704 
	`LOG
(
LL_DEBUG
,

12705 ("›í(%s, 0x%xË%d, f«mê%s", 
∑th«me
, 
Êags
, 
fd
, 
‚ame
));

12706  
fd
;

12707 
	}
}

12709 
	$_°©
(c⁄° *
∑th«me
, 
°©
 *
°
) {

12710 
ªs
 = -1;

12711 
boﬁ
 
is_¶
;

12712 c⁄° *
‚ame
 = 
	`dr›_dú
(
∑th«me
, &
is_¶
);

12713 
	`mem£t
(
°
, 0, (*st));

12715 i‡(
‚ame
[0] ='\0' || 
	`°rcmp
(fname, ".") == 0) {

12716 
°
->
°_öo
 = 0;

12717 
°
->
°_mode
 = 
S_IFDIR
 | 0777;

12718 
°
->
°_∆ök
 = 1;

12719 
°
->
°_size
 = 0;

12722 i‡(
is_¶
) {

12723 #ifde‡
MG_FS_SLFS


12724 
ªs
 = 
	`fs_¶fs_°©
(
‚ame
, 
°
);

12727 #ifde‡
CC3200_FS_SPIFFS


12728 
ªs
 = 
	`fs_•iffs_°©
(
‚ame
, 
°
);

12731 
	`LOG
(
LL_DEBUG
, ("°©(%sË%d; f«mê%s", 
∑th«me
, 
ªs
, 
‚ame
));

12732  
ªs
;

12733 
	}
}

12735 #i‡
MG_TI_NO_HOST_INTERFACE


12736 
	$˛o£
(
fd
) {

12738 
	$_˛o£
(
fd
) {

12740 
r
 = -1;

12741 
	`fd_ty≥
(
fd
)) {

12742 
FD_INVALID
:

12743 
r
 = 
	`£t_î∫o
(
EBADF
);

12745 
FD_SYS
:

12746 
r
 = 
	`£t_î∫o
(
EACCES
);

12748 #ifde‡
CC3200_FS_SPIFFS


12749 
FD_SPIFFS
:

12750 
r
 = 
	`fs_•iffs_˛o£
(
fd
 - 
SPIFFS_FD_BASE
);

12753 #ifde‡
MG_FS_SLFS


12754 
FD_SLFS
:

12755 
r
 = 
	`fs_¶fs_˛o£
(
fd
 - 
SLFS_FD_BASE
);

12759 
	`DBG
(("˛o£(%dË%d", 
fd
, 
r
));

12760  
r
;

12761 
	}
}

12763 #i‡
MG_TI_NO_HOST_INTERFACE


12764 
off_t
 
	$l£ek
(
fd
, 
off_t
 
off£t
, 
whí˚
) {

12766 
off_t
 
	$_l£ek
(
fd
, 
off_t
 
off£t
, 
whí˚
) {

12768 
r
 = -1;

12769 
	`fd_ty≥
(
fd
)) {

12770 
FD_INVALID
:

12771 
r
 = 
	`£t_î∫o
(
EBADF
);

12773 
FD_SYS
:

12774 
r
 = 
	`£t_î∫o
(
ESPIPE
);

12776 #ifde‡
CC3200_FS_SPIFFS


12777 
FD_SPIFFS
:

12778 
r
 = 
	`fs_•iffs_l£ek
(
fd
 - 
SPIFFS_FD_BASE
, 
off£t
, 
whí˚
);

12781 #ifde‡
MG_FS_SLFS


12782 
FD_SLFS
:

12783 
r
 = 
	`fs_¶fs_l£ek
(
fd
 - 
SLFS_FD_BASE
, 
off£t
, 
whí˚
);

12787 
	`DBG
(("l£ek(%d, %d, %dË%d", 
fd
, (Ë
off£t
, 
whí˚
, 
r
));

12788  
r
;

12789 
	}
}

12791 
	$_f°©
(
fd
, 
°©
 *
s
) {

12792 
r
 = -1;

12793 
	`mem£t
(
s
, 0, (*s));

12794 
	`fd_ty≥
(
fd
)) {

12795 
FD_INVALID
:

12796 
r
 = 
	`£t_î∫o
(
EBADF
);

12798 
FD_SYS
: {

12800 
	`mem£t
(
s
, 0, (*s));

12801 
s
->
°_öo
 = 
fd
;

12802 
s
->
°_mode
 = 
S_IFCHR
 | 0666;

12803 
r
 = 0;

12806 #ifde‡
CC3200_FS_SPIFFS


12807 
FD_SPIFFS
:

12808 
r
 = 
	`fs_•iffs_f°©
(
fd
 - 
SPIFFS_FD_BASE
, 
s
);

12811 #ifde‡
MG_FS_SLFS


12812 
FD_SLFS
:

12813 
r
 = 
	`fs_¶fs_f°©
(
fd
 - 
SLFS_FD_BASE
, 
s
);

12817 
	`DBG
(("f°©(%dË%d", 
fd
, 
r
));

12818  
r
;

12819 
	}
}

12821 #i‡
MG_TI_NO_HOST_INTERFACE


12822 
	$ªad
(
fd
, *
buf
, 
cou¡
) {

12824 
ssize_t
 
	$_ªad
(
fd
, *
buf
, 
size_t
 
cou¡
) {

12826 
r
 = -1;

12827 
	`fd_ty≥
(
fd
)) {

12828 
FD_INVALID
:

12829 
r
 = 
	`£t_î∫o
(
EBADF
);

12831 
FD_SYS
: {

12832 i‡(
fd
 != 0) {

12833 
r
 = 
	`£t_î∫o
(
EACCES
);

12837 
r
 = 
	`£t_î∫o
(
ENOTSUP
);

12840 #ifde‡
CC3200_FS_SPIFFS


12841 
FD_SPIFFS
:

12842 
r
 = 
	`fs_•iffs_ªad
(
fd
 - 
SPIFFS_FD_BASE
, 
buf
, 
cou¡
);

12845 #ifde‡
MG_FS_SLFS


12846 
FD_SLFS
:

12847 
r
 = 
	`fs_¶fs_ªad
(
fd
 - 
SLFS_FD_BASE
, 
buf
, 
cou¡
);

12851 
	`DBG
(("ªad(%d, %uË%d", 
fd
, 
cou¡
, 
r
));

12852  
r
;

12853 
	}
}

12855 #i‡
MG_TI_NO_HOST_INTERFACE


12856 
	$wrôe
(
fd
, c⁄° *
buf
, 
cou¡
) {

12858 
ssize_t
 
	$_wrôe
(
fd
, c⁄° *
buf
, 
size_t
 
cou¡
) {

12860 
r
 = -1;

12861 
size_t
 
i
 = 0;

12862 
	`fd_ty≥
(
fd
)) {

12863 
FD_INVALID
:

12864 
r
 = 
	`£t_î∫o
(
EBADF
);

12866 
FD_SYS
: {

12867 i‡(
fd
 == 0) {

12868 
r
 = 
	`£t_î∫o
(
EACCES
);

12871 
i
 = 0; i < 
cou¡
; i++) {

12872 c⁄° 
c
 = ((c⁄° *Ë
buf
)[
i
];

12873 i‡(
c
 ='\n'Ë
	`MG_UART_CHAR_PUT
(
fd
, '\r');

12874 
	`MG_UART_CHAR_PUT
(
fd
, 
c
);

12876 
r
 = 
cou¡
;

12879 #ifde‡
CC3200_FS_SPIFFS


12880 
FD_SPIFFS
:

12881 
r
 = 
	`fs_•iffs_wrôe
(
fd
 - 
SPIFFS_FD_BASE
, 
buf
, 
cou¡
);

12884 #ifde‡
MG_FS_SLFS


12885 
FD_SLFS
:

12886 
r
 = 
	`fs_¶fs_wrôe
(
fd
 - 
SLFS_FD_BASE
, 
buf
, 
cou¡
);

12890  
r
;

12891 
	}
}

12897 #i‡
MG_TI_NO_HOST_INTERFACE
 || 
deföed
(
_NEWLIB_VERSION
)

12898 
	$ª«me
(c⁄° *
‰om∑th
, c⁄° *
t›©h
) {

12899 
r
 = -1;

12900 
boﬁ
 
is_¶_‰om
, 
is_¶_to
;

12901 c⁄° *
‰om
 = 
	`dr›_dú
(
‰om∑th
, &
is_¶_‰om
);

12902 c⁄° *
to
 = 
	`dr›_dú
(
t›©h
, &
is_¶_to
);

12903 i‡(
is_¶_‰om
 || 
is_¶_to
) {

12904 
	`£t_î∫o
(
ENOTSUP
);

12906 #ifde‡
CC3200_FS_SPIFFS


12907 
r
 = 
	`fs_•iffs_ª«me
(
‰om
, 
to
);

12910 
	`DBG
(("ª«me(%s, %sË%d", 
‰om
, 
to
, 
r
));

12911  
r
;

12912 
	}
}

12915 #i‡
MG_TI_NO_HOST_INTERFACE


12916 
	$u∆ök
(c⁄° *
∑th«me
) {

12918 
	$_u∆ök
(c⁄° *
∑th«me
) {

12920 
r
 = -1;

12921 
boﬁ
 
is_¶
;

12922 c⁄° *
‚ame
 = 
	`dr›_dú
(
∑th«me
, &
is_¶
);

12923 i‡(
is_¶
) {

12924 #ifde‡
MG_FS_SLFS


12925 
r
 = 
	`fs_¶fs_u∆ök
(
‚ame
);

12928 #ifde‡
CC3200_FS_SPIFFS


12929 
r
 = 
	`fs_•iffs_u∆ök
(
‚ame
);

12932 
	`DBG
(("u∆ök(%sË%d, f«mê%s", 
∑th«me
, 
r
, 
‚ame
));

12933  
r
;

12934 
	}
}

12936 #ifde‡
CC3200_FS_SPIFFS


12937 
DIR
 *
	$›ídú
(c⁄° *
dú_«me
) {

12938 
DIR
 *
r
 = 
NULL
;

12939 
boﬁ
 
is_¶
;

12940 
	`dr›_dú
(
dú_«me
, &
is_¶
);

12941 i‡(
is_¶
) {

12942 
r
 = 
NULL
;

12943 
	`£t_î∫o
(
ENOTSUP
);

12945 
r
 = 
	`fs_•iffs_›ídú
(
dú_«me
);

12947 
	`DBG
(("›ídú(%sË%p", 
dú_«me
, 
r
));

12948  
r
;

12949 
	}
}

12951 
dúít
 *
	$ªaddú
(
DIR
 *
dú
) {

12952 
dúít
 *
ªs
 = 
	`fs_•iffs_ªaddú
(
dú
);

12953 
	`DBG
(("ªaddú(%pË%p", 
dú
, 
ªs
));

12954  
ªs
;

12955 
	}
}

12957 
	$˛o£dú
(
DIR
 *
dú
) {

12958 
ªs
 = 
	`fs_•iffs_˛o£dú
(
dú
);

12959 
	`DBG
(("˛o£dú(%pË%d", 
dú
, 
ªs
));

12960  
ªs
;

12961 
	}
}

12963 
	$rmdú
(c⁄° *
∑th
) {

12964  
	`fs_•iffs_rmdú
(
∑th
);

12965 
	}
}

12967 
	$mkdú
(c⁄° *
∑th
, 
mode_t
 
mode
) {

12968 (Ë
∑th
;

12969 (Ë
mode
;

12971  (
	`°æí
(
∑th
Ë=1 && *∑th ='.'Ë? 0 : 
ENOTDIR
;

12972 
	}
}

12975 
	$¶_fs_öô
() {

12976 
ªt
 = 1;

12977 #ifde‡
__TI_COMPILER_VERSION__


12978 #ifde‡
MG_FS_SLFS


12979 #¥agm®
düg_push


12980 #¥agm®
düg_suµªss
 169

12982 
ªt
 = (
	`add_devi˚
("SL", 
_MSA
, 
fs_¶fs_›í
, 
fs_¶fs_˛o£
, 
fs_¶fs_ªad
,

12983 
fs_¶fs_wrôe
, 
fs_¶fs_l£ek
, 
fs_¶fs_u∆ök
,

12984 
fs_¶fs_ª«me
) == 0);

12985 #¥agm®
düg_p›


12988  
ªt
;

12989 
	}
}

12992 
deföed
(
MG_FS_SPIFFS
)) */

12993 #ifde‡
MG_MODULE_LINES


13001 #i‡
MG_NET_IF
 =
MG_NET_IF_SIMPLELINK


13003 
	~<î∫o.h
>

13004 
	~<°dio.h
>

13008 c⁄° *
	$öë_¡›
(
af
, c⁄° *
§c
, *
d°
, 
sockÀn_t
 
size
) {

13009 
ªs
;

13010 
ö_addr
 *
ö
 = (ö_add∏*Ë
§c
;

13011 i‡(
af
 !
AF_INET
) {

13012 
î∫o
 = 
EAFNOSUPPORT
;

13013  
NULL
;

13015 
ªs
 = 
	`¢¥ötf
(
d°
, 
size
, "%lu.%lu.%lu.%lu", 
	`SL_IPV4_BYTE
(
ö
->
s_addr
, 0),

13016 
	`SL_IPV4_BYTE
(
ö
->
s_addr
, 1), SL_IPV4_BYTE(in->s_addr, 2),

13017 
	`SL_IPV4_BYTE
(
ö
->
s_addr
, 3));

13018  
ªs
 > 0 ? 
d°
 : 
NULL
;

13019 
	}
}

13021 *
	$öë_¡ﬂ
(
ö_addr
 
n
) {

13022 
a
[16];

13023  (*Ë
	`öë_¡›
(
AF_INET
, &
n
, 
a
, (a));

13024 
	}
}

13026 
	$öë_±⁄
(
af
, c⁄° *
§c
, *
d°
) {

13027 
uöt32_t
 
a0
, 
a1
, 
a2
, 
a3
;

13028 
uöt8_t
 *
db
 = (uöt8_à*Ë
d°
;

13029 i‡(
af
 !
AF_INET
) {

13030 
î∫o
 = 
EAFNOSUPPORT
;

13033 i‡(
	`ssˇnf
(
§c
, "%lu.%lu.%lu.%lu", &
a0
, &
a1
, &
a2
, &
a3
) != 4) {

13036 *
db
 = 
a3
;

13037 *(
db
 + 1Ë
a2
;

13038 *(
db
 + 2Ë
a1
;

13039 *(
db
 + 3Ë
a0
;

13041 
	}
}

13044 #ifde‡
MG_MODULE_LINES


13047 #i‡
MG_NET_IF
 =
MG_NET_IF_SIMPLELINK
 && !
deföed
(
MG_SIMPLELINK_NO_OSI
)

13051 
	~<o¶ib/osi.h
>

13053 
	emg_q_msg_ty≥
 {

13054 
	mMG_Q_MSG_CB
,

13056 
	smg_q_msg
 {

13057 
mg_q_msg_ty≥
 
	mty≥
;

13058 (*
	mcb
)(
mg_mgr
 *
	mmgr
, *
	m¨g
);

13059 *
	m¨g
;

13061 
OsiMsgQ_t
 
	gs_mg_q
;

13062 
mg_èsk
(*
¨g
);

13064 
boﬁ
 
	$mg_°¨t_èsk
(
¥i‹ôy
, 
°ack_size
, 
mg_öô_cb
 
mg_öô
) {

13065 i‡(
	`osi_MsgQCª©e
(&
s_mg_q
, "MG", (
mg_q_msg
), 16Ë!
OSI_OK
) {

13066  
Ál£
;

13068 i‡(
	`osi_TaskCª©e
(
mg_èsk
, (c⁄° sig√d *Ë"MG", 
°ack_size
,

13069 (*Ë
mg_öô
, 
¥i‹ôy
, 
NULL
Ë!
OSI_OK
) {

13070  
Ál£
;

13072  
åue
;

13073 
	}
}

13075 
	$mg_èsk
(*
¨g
) {

13076 
mg_mgr
 
mgr
;

13077 
mg_öô_cb
 
mg_öô
 = (mg_öô_cbË
¨g
;

13078 
	`mg_mgr_öô
(&
mgr
, 
NULL
);

13079 
	`mg_öô
(&
mgr
);

13081 
mg_q_msg
 
msg
;

13082 
	`mg_mgr_pﬁl
(&
mgr
, 1);

13083 i‡(
	`osi_MsgQRód
(&
s_mg_q
, &
msg
, 1Ë!
OSI_OK
) ;

13084 
msg
.
ty≥
) {

13085 
MG_Q_MSG_CB
: {

13086 
msg
.
	`cb
(&
mgr
, msg.
¨g
);

13090 
	}
}

13092 
mg_run_ö_èsk
((*
cb
)(
mg_mgr
 *
mgr
, *
¨g
), *
cb_¨g
) {

13093 
mg_q_msg
 
msg
 = {
MG_Q_MSG_CB
, 
cb
, 
cb_¨g
};

13094 
	`osi_MsgQWrôe
(&
s_mg_q
, &
msg
, 
OSI_NO_WAIT
);

13095 
	}
}

13099 #ifde‡
MG_MODULE_LINES


13107 #i‚de‡
CS_COMMON_PLATFORMS_SIMPLELINK_SL_NET_IF_H_


13108 
	#CS_COMMON_PLATFORMS_SIMPLELINK_SL_NET_IF_H_


	)

13112 #ifde‡
__˝lu•lus


13116 #i‚de‡
MG_ENABLE_NET_IF_SIMPLELINK


13117 
	#MG_ENABLE_NET_IF_SIMPLELINK
 
MG_NET_IF
 =
MG_NET_IF_SIMPLELINK


	)

13120 
mg_iÁ˚_vèbÀ
 
mg_sim∂ñök_iÁ˚_vèbÀ
;

13122 #ifde‡
__˝lu•lus


13127 #ifde‡
MG_MODULE_LINES


13137 #i‡
MG_ENABLE_NET_IF_SIMPLELINK


13142 
	#MG_TCP_RECV_BUFFER_SIZE
 1024

	)

13143 
	#MG_UDP_RECV_BUFFER_SIZE
 1500

	)

13145 
sock_t
 
mg_›í_li°íög_sockë
(
sockë_addªss
 *
ß
, 
ty≥
,

13146 
¥Ÿo
);

13148 
¶_£t_s¶_›ts
(
mg_c⁄√˘i⁄
 *
nc
);

13150 
	$mg_£t_n⁄_blockög_mode
(
sock_t
 
sock
) {

13151 
SlSockN⁄blockög_t
 
›t
;

13152 
›t
.
N⁄blockögE«bÀd
 = 1;

13153 
	`¶_SëSockO±
(
sock
, 
SL_SOL_SOCKET
, 
SL_SO_NONBLOCKING
, &
›t
, (opt));

13154 
	}
}

13156 
	$mg_is_îr‹
(
n
) {

13157  (
n
 < 0 &&Ç !
SL_EALREADY
 &&Ç !
SL_EAGAIN
);

13158 
	}
}

13160 
	$mg_¶_if_c⁄√˘_t˝
(
mg_c⁄√˘i⁄
 *
nc
,

13161 c⁄° 
sockë_addªss
 *
ß
) {

13162 
¥Ÿo
 = 0;

13163 i‡(
nc
->
Êags
 & 
MG_F_SSL
Ë
¥Ÿo
 = 
SL_SEC_SOCKET
;

13164 
sock_t
 
sock
 = 
	`¶_Sockë
(
AF_INET
, 
SOCK_STREAM
, 
¥Ÿo
);

13165 i‡(
sock
 < 0) {

13166 
nc
->
îr
 = 
sock
;

13167 
out
;

13169 
	`mg_sock_£t
(
nc
, 
sock
);

13170 #i‡
MG_ENABLE_SSL


13171 
nc
->
îr
 = 
	`¶_£t_s¶_›ts
(nc);

13172 i‡(
nc
->
îr
 !0Ë
out
;

13174 
nc
->
îr
 = 
	`¶_C⁄√˘
(
sock
, &
ß
->ß, (ß->
sö
));

13175 
out
:

13176 
	`DBG
(("%∞tÿ%s:%d sock %d %dÉº %d", 
nc
, 
	`öë_¡ﬂ
(
ß
->
sö
.
sö_addr
),

13177 
	`¡ohs
(
ß
->
sö
.
sö_p‹t
), 
nc
->
sock
, 
¥Ÿo
,Çc->
îr
));

13178 
	}
}

13180 
	$mg_¶_if_c⁄√˘_udp
(
mg_c⁄√˘i⁄
 *
nc
) {

13181 
sock_t
 
sock
 = 
	`¶_Sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

13182 i‡(
sock
 < 0) {

13183 
nc
->
îr
 = 
sock
;

13186 
	`mg_sock_£t
(
nc
, 
sock
);

13187 
nc
->
îr
 = 0;

13188 
	}
}

13190 
	$mg_¶_if_li°í_t˝
(
mg_c⁄√˘i⁄
 *
nc
, 
sockë_addªss
 *
ß
) {

13191 
¥Ÿo
 = 0;

13192 i‡(
nc
->
Êags
 & 
MG_F_SSL
Ë
¥Ÿo
 = 
SL_SEC_SOCKET
;

13193 
sock_t
 
sock
 = 
	`mg_›í_li°íög_sockë
(
ß
, 
SOCK_STREAM
, 
¥Ÿo
);

13194 i‡(
sock
 < 0)  sock;

13195 
	`mg_sock_£t
(
nc
, 
sock
);

13196 #i‡
MG_ENABLE_SSL


13197  
	`¶_£t_s¶_›ts
(
nc
);

13201 
	}
}

13203 
	$mg_¶_if_li°í_udp
(
mg_c⁄√˘i⁄
 *
nc
, 
sockë_addªss
 *
ß
) {

13204 
sock_t
 
sock
 = 
	`mg_›í_li°íög_sockë
(
ß
, 
SOCK_DGRAM
, 0);

13205 i‡(
sock
 =
INVALID_SOCKET
Ë (
î∫o
 ?Érrno : 1);

13206 
	`mg_sock_£t
(
nc
, 
sock
);

13208 
	}
}

13210 
	$mg_¶_if_t˝_£nd
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
buf
, 
size_t
 
Àn
) {

13211 
	`mbuf_≠≥nd
(&
nc
->
£nd_mbuf
, 
buf
, 
Àn
);

13212 
	}
}

13214 
	$mg_¶_if_udp_£nd
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
buf
, 
size_t
 
Àn
) {

13215 
	`mbuf_≠≥nd
(&
nc
->
£nd_mbuf
, 
buf
, 
Àn
);

13216 
	}
}

13218 
	$mg_¶_if_ªcved
(
mg_c⁄√˘i⁄
 *
nc
, 
size_t
 
Àn
) {

13219 (Ë
nc
;

13220 (Ë
Àn
;

13221 
	}
}

13223 
	$mg_¶_if_¸óã_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

13224 (Ë
nc
;

13226 
	}
}

13228 
	$mg_¶_if_de°roy_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

13229 i‡(
nc
->
sock
 =
INVALID_SOCKET
) ;

13231 i‡(!(
nc
->
Êags
 & 
MG_F_UDP
Ë||Çc->
li°íî
 =
NULL
) {

13232 
	`¶_Clo£
(
nc
->
sock
);

13234 
nc
->
sock
 = 
INVALID_SOCKET
;

13235 
	}
}

13237 
	$mg_ac˚±_c⁄n
(
mg_c⁄√˘i⁄
 *
lc
) {

13238 
mg_c⁄√˘i⁄
 *
nc
;

13239 
sockë_addªss
 
ß
;

13240 
sockÀn_t
 
ß_Àn
 = (
ß
);

13241 
sock_t
 
sock
 = 
	`¶_Ac˚±
(
lc
->sock, &
ß
.ß, &
ß_Àn
);

13242 i‡(
sock
 < 0) {

13243 
	`DBG
(("%p: faûedÅÿac˚±: %d", 
lc
, 
sock
));

13246 
nc
 = 
	`mg_if_ac˚±_√w_c⁄n
(
lc
);

13247 i‡(
nc
 =
NULL
) {

13248 
	`¶_Clo£
(
sock
);

13251 
	`DBG
(("%∞c⁄¿‰om %s:%d", 
nc
, 
	`öë_¡ﬂ
(
ß
.
sö
.
sö_addr
),

13252 
	`¡ohs
(
ß
.
sö
.
sö_p‹t
)));

13253 
	`mg_sock_£t
(
nc
, 
sock
);

13254 i‡(
nc
->
Êags
 & 
MG_F_SSL
Ënc->Êag†|
MG_F_SSL_HANDSHAKE_DONE
;

13255 
	`mg_if_ac˚±_t˝_cb
(
nc
, &
ß
, 
ß_Àn
);

13257 
	}
}

13260 
sock_t
 
	$mg_›í_li°íög_sockë
(
sockë_addªss
 *
ß
, 
ty≥
,

13261 
¥Ÿo
) {

13262 
r
;

13263 
sockÀn_t
 
ß_Àn
 =

13264 (
ß
->ß.
ß_Ámûy
 =
AF_INET
Ë? (ß->
sö
Ë: (ß->
sö6
);

13265 
sock_t
 
sock
 = 
	`¶_Sockë
(
ß
->ß.
ß_Ámûy
, 
ty≥
, 
¥Ÿo
);

13266 i‡(
sock
 < 0)  sock;

13267 i‡((
r
 = 
	`¶_Böd
(
sock
, &
ß
->ß, 
ß_Àn
)) < 0) {

13268 
	`¶_Clo£
(
sock
);

13269  
r
;

13271 i‡(
ty≥
 !
SOCK_DGRAM
 && (
r
 = 
	`¶_Li°í
(
sock
, 
SOMAXCONN
)) < 0) {

13272 
	`¶_Clo£
(
sock
);

13273  
r
;

13275 
	`mg_£t_n⁄_blockög_mode
(
sock
);

13276  
sock
;

13277 
	}
}

13279 
	$mg_wrôe_to_sockë
(
mg_c⁄√˘i⁄
 *
nc
) {

13280 
mbuf
 *
io
 = &
nc
->
£nd_mbuf
;

13281 
n
 = 0;

13283 i‡(
nc
->
Êags
 & 
MG_F_UDP
) {

13284 
n
 = 
	`¶_SídTo
(
nc
->
sock
, 
io
->
buf
, io->
Àn
, 0, &nc->
ß
.sa,

13285 (
nc
->
ß
.
sö
));

13286 
	`DBG
(("%∞%d %d %d %s:%hu", 
nc
,Çc->
sock
, 
n
, 
î∫o
,

13287 
	`öë_¡ﬂ
(
nc
->
ß
.
sö
.
sö_addr
), 
	`¡ohs
“c->ß.sö.
sö_p‹t
)));

13289 
n
 = (Ë
	`¶_Síd
(
nc
->
sock
, 
io
->
buf
, io->
Àn
, 0);

13290 
	`DBG
(("%∞%d byã†-> %d", 
nc
, 
n
,Çc->
sock
));

13293 i‡(
n
 > 0) {

13294 
	`mbuf_ªmove
(
io
, 
n
);

13295 
	`mg_if_£¡_cb
(
nc
, 
n
);

13296 } i‡(
n
 < 0 && 
	`mg_is_îr‹
(n)) {

13298 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

13300 
	}
}

13302 
MG_INTERNAL
 
size_t
 
	$ªcv_avaû_size
(
mg_c⁄√˘i⁄
 *
c⁄n
, 
size_t
 
max
) {

13303 
size_t
 
avaû
;

13304 i‡(
c⁄n
->
ªcv_mbuf_limô
 < c⁄n->
ªcv_mbuf
.
Àn
)  0;

13305 
avaû
 = 
c⁄n
->
ªcv_mbuf_limô
 - c⁄n->
ªcv_mbuf
.
Àn
;

13306  
avaû
 > 
max
 ? max :ávail;

13307 
	}
}

13309 
	$mg_h™dÀ_t˝_ªad
(
mg_c⁄√˘i⁄
 *
c⁄n
) {

13310 
n
 = 0;

13311 *
buf
 = (*Ë
	`MG_MALLOC
(
MG_TCP_RECV_BUFFER_SIZE
);

13313 i‡(
buf
 =
NULL
) {

13314 
	`DBG
(("OOM"));

13318 
n
 = (Ë
	`¶_Recv
(
c⁄n
->
sock
, 
buf
,

13319 
	`ªcv_avaû_size
(
c⁄n
, 
MG_TCP_RECV_BUFFER_SIZE
), 0);

13320 
	`DBG
(("%∞%d byã†<- %d", 
c⁄n
, 
n
, c⁄n->
sock
));

13321 i‡(
n
 > 0) {

13322 
	`mg_if_ªcv_t˝_cb
(
c⁄n
, 
buf
, 
n
, 1 );

13324 
	`MG_FREE
(
buf
);

13326 i‡(
n
 == 0) {

13328 
c⁄n
->
Êags
 |
MG_F_SEND_AND_CLOSE
;

13329 } i‡(
	`mg_is_îr‹
(
n
)) {

13330 
c⁄n
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

13332 
	}
}

13334 
	$mg_h™dÀ_udp_ªad
(
mg_c⁄√˘i⁄
 *
nc
) {

13335 *
buf
 = (*Ë
	`MG_MALLOC
(
MG_UDP_RECV_BUFFER_SIZE
);

13336 i‡(
buf
 =
NULL
) ;

13337 
sockë_addªss
 
ß
;

13338 
sockÀn_t
 
ß_Àn
 = (
ß
);

13339 
n
 = 
	`¶_RecvFrom
(
nc
->
sock
, 
buf
, 
MG_UDP_RECV_BUFFER_SIZE
, 0,

13340 (
SlSockAddr_t
 *Ë&
ß
, &
ß_Àn
);

13341 
	`DBG
(("%∞%d byã†‰om %s:%d", 
nc
, 
n
, 
	`öë_¡ﬂ
“c->
ß
.
sö
.
sö_addr
),

13342 
	`¡ohs
(
nc
->
ß
.
sö
.
sö_p‹t
)));

13343 i‡(
n
 > 0) {

13344 
	`mg_if_ªcv_udp_cb
(
nc
, 
buf
, 
n
, &
ß
, 
ß_Àn
);

13346 
	`MG_FREE
(
buf
);

13348 
	}
}

13350 
	#_MG_F_FD_CAN_READ
 1

	)

13351 
	#_MG_F_FD_CAN_WRITE
 1 << 1

	)

13352 
	#_MG_F_FD_ERROR
 1 << 2

	)

13354 
	$mg_mgr_h™dÀ_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
, 
fd_Êags
, 
now
) {

13355 
	`DBG
(("%∞fd=%d fd_Êags=%dÇc_Êags=%luÑmbl=%d smbl=%d", 
nc
,Çc->
sock
,

13356 
fd_Êags
, 
nc
->
Êags
, (Ënc->
ªcv_mbuf
.
Àn
, (Ënc->
£nd_mbuf
.len));

13358 i‡(
nc
->
Êags
 & 
MG_F_CONNECTING
) {

13359 i‡(
nc
->
Êags
 & 
MG_F_UDP
 ||Çc->
îr
 !
SL_EALREADY
) {

13360 
	`mg_if_c⁄√˘_cb
(
nc
,Çc->
îr
);

13365 i‡(
fd_Êags
 & 
_MG_F_FD_CAN_WRITE
) {

13366 
nc
->
îr
 = 
	`¶_C⁄√˘
“c->
sock
, &nc->
ß
.ß, “c->ß.
sö
));

13367 
	`DBG
(("%∞c⁄¿ªs=%d", 
nc
,Çc->
îr
));

13368 i‡(
nc
->
îr
 =
SL_ESECSNOVERIFY
 ||

13370 
nc
->
îr
 =
SL_ESECDATEERROR
) {

13371 
nc
->
îr
 = 0;

13373 i‡(
nc
->
Êags
 & 
MG_F_SSL
 &&Çc->
îr
 == 0) {

13374 
nc
->
Êags
 |
MG_F_SSL_HANDSHAKE_DONE
;

13376 
	`mg_if_c⁄√˘_cb
(
nc
,Çc->
îr
);

13380 
fd_Êags
 &~(
_MG_F_FD_CAN_READ
 | 
_MG_F_FD_CAN_WRITE
);

13383 i‡(
fd_Êags
 & 
_MG_F_FD_CAN_READ
) {

13384 i‡(
nc
->
Êags
 & 
MG_F_UDP
) {

13385 
	`mg_h™dÀ_udp_ªad
(
nc
);

13387 i‡(
nc
->
Êags
 & 
MG_F_LISTENING
) {

13388 
	`mg_ac˚±_c⁄n
(
nc
);

13390 
	`mg_h™dÀ_t˝_ªad
(
nc
);

13395 i‡(!(
nc
->
Êags
 & 
MG_F_CLOSE_IMMEDIATELY
)) {

13396 i‡((
fd_Êags
 & 
_MG_F_FD_CAN_WRITE
Ë&& 
nc
->
£nd_mbuf
.
Àn
 > 0) {

13397 
	`mg_wrôe_to_sockë
(
nc
);

13400 i‡(!(
fd_Êags
 & (
_MG_F_FD_CAN_READ
 | 
_MG_F_FD_CAN_WRITE
))) {

13401 
	`mg_if_pﬁl
(
nc
, 
now
);

13403 
	`mg_if_timî
(
nc
, 
now
);

13406 
	`DBG
(("%∞a·î fd=%dÇc_Êags=%luÑmbl=%d smbl=%d", 
nc
,Çc->
sock
,Çc->
Êags
,

13407 (Ë
nc
->
ªcv_mbuf
.
Àn
, (Ënc->
£nd_mbuf
.len));

13408 
	}
}

13411 
	$mg_¶_if_sock_£t
(
mg_c⁄√˘i⁄
 *
nc
, 
sock_t
 
sock
) {

13412 
	`mg_£t_n⁄_blockög_mode
(
sock
);

13413 
nc
->
sock
 = sock;

13414 
	`DBG
(("%∞%d", 
nc
, 
sock
));

13415 
	}
}

13417 
	$mg_¶_if_öô
(
mg_iÁ˚
 *
iÁ˚
) {

13418 (Ë
iÁ˚
;

13419 
	`DBG
(("%∞usög sl_Sñe˘()", 
iÁ˚
->
mgr
));

13420 
	}
}

13422 
	$mg_¶_if_‰ì
(
mg_iÁ˚
 *
iÁ˚
) {

13423 (Ë
iÁ˚
;

13424 
	}
}

13426 
	$mg_¶_if_add_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

13427 (Ë
nc
;

13428 
	}
}

13430 
	$mg_¶_if_ªmove_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

13431 (Ë
nc
;

13432 
	}
}

13434 
time_t
 
	$mg_¶_if_pﬁl
(
mg_iÁ˚
 *
iÁ˚
, 
timeout_ms
) {

13435 
mg_mgr
 *
mgr
 = 
iÁ˚
->mgr;

13436 
now
 = 
	`mg_time
();

13437 
mö_timî
;

13438 
mg_c⁄√˘i⁄
 *
nc
, *
tmp
;

13439 
SlTimevÆ_t
 
tv
;

13440 
SlFdSë_t
 
ªad_£t
, 
wrôe_£t
, 
îr_£t
;

13441 
sock_t
 
max_fd
 = 
INVALID_SOCKET
;

13442 
num_fds
, 
num_ev
 = 0, 
num_timîs
 = 0;

13444 
	`SL_FD_ZERO
(&
ªad_£t
);

13445 
	`SL_FD_ZERO
(&
wrôe_£t
);

13446 
	`SL_FD_ZERO
(&
îr_£t
);

13452 
mö_timî
 = 0;

13453 
nc
 = 
mgr
->
a˘ive_c⁄√˘i⁄s
, 
num_fds
 = 0;Ç¯!
NULL
;Ç¯
tmp
) {

13454 
tmp
 = 
nc
->
√xt
;

13456 i‡(
nc
->
sock
 !
INVALID_SOCKET
) {

13457 
num_fds
++;

13459 i‡(!(
nc
->
Êags
 & 
MG_F_WANT_WRITE
) &&

13460 
nc
->
ªcv_mbuf
.
Àn
 <Çc->
ªcv_mbuf_limô
 &&

13461 (!(
nc
->
Êags
 & 
MG_F_UDP
Ë||Çc->
li°íî
 =
NULL
)) {

13462 
	`SL_FD_SET
(
nc
->
sock
, &
ªad_£t
);

13463 i‡(
max_fd
 =
INVALID_SOCKET
 || 
nc
->
sock
 > max_fd) max_fd =Çc->sock;

13466 i‡(((
nc
->
Êags
 & 
MG_F_CONNECTING
Ë&& !“c->Êag†& 
MG_F_WANT_READ
)) ||

13467 (
nc
->
£nd_mbuf
.
Àn
 > 0 && !“c->
Êags
 & 
MG_F_CONNECTING
))) {

13468 
	`SL_FD_SET
(
nc
->
sock
, &
wrôe_£t
);

13469 
	`SL_FD_SET
(
nc
->
sock
, &
îr_£t
);

13470 i‡(
max_fd
 =
INVALID_SOCKET
 || 
nc
->
sock
 > max_fd) max_fd =Çc->sock;

13474 i‡(
nc
->
ev_timî_time
 > 0) {

13475 i‡(
num_timîs
 =0 || 
nc
->
ev_timî_time
 < 
mö_timî
) {

13476 
mö_timî
 = 
nc
->
ev_timî_time
;

13478 
num_timîs
++;

13486 i‡(
num_timîs
 > 0) {

13487 
timî_timeout_ms
 = (
mö_timî
 - 
	`mg_time
()) * 1000 + 1 ;

13488 i‡(
timî_timeout_ms
 < 
timeout_ms
) {

13489 
timeout_ms
 = 
timî_timeout_ms
;

13492 i‡(
timeout_ms
 < 0)Åimeout_ms = 0;

13494 
tv
.
tv_£c
 = 
timeout_ms
 / 1000;

13495 
tv
.
tv_u£c
 = (
timeout_ms
 % 1000) * 1000;

13497 i‡(
num_fds
 > 0) {

13498 
num_ev
 = 
	`¶_Sñe˘
((Ë
max_fd
 + 1, &
ªad_£t
, &
wrôe_£t
, &
îr_£t
, &
tv
);

13501 
now
 = 
	`mg_time
();

13502 
	`DBG
(("¶_Sñe˘ @ %ldÇum_ev=%d o‡%d,Åimeout=%d", (Ë
now
, 
num_ev
,

13503 
num_fds
, 
timeout_ms
));

13505 
nc
 = 
mgr
->
a˘ive_c⁄√˘i⁄s
;Ç¯!
NULL
;Ç¯
tmp
) {

13506 
fd_Êags
 = 0;

13507 i‡(
nc
->
sock
 !
INVALID_SOCKET
) {

13508 i‡(
num_ev
 > 0) {

13509 
fd_Êags
 =

13510 (
	`SL_FD_ISSET
(
nc
->
sock
, &
ªad_£t
) &&

13511 (!(
nc
->
Êags
 & 
MG_F_UDP
Ë||Çc->
li°íî
 =
NULL
)

13512 ? 
_MG_F_FD_CAN_READ


13514 (
	`SL_FD_ISSET
(
nc
->
sock
, &
wrôe_£t
Ë? 
_MG_F_FD_CAN_WRITE
 : 0) |

13515 (
	`SL_FD_ISSET
(
nc
->
sock
, &
îr_£t
Ë? 
_MG_F_FD_ERROR
 : 0);

13518 i‡(
nc
->
Êags
 & 
MG_F_UDP
 &&Çc->
£nd_mbuf
.
Àn
 > 0) {

13519 
fd_Êags
 |
_MG_F_FD_CAN_WRITE
;

13522 
tmp
 = 
nc
->
√xt
;

13523 
	`mg_mgr_h™dÀ_c⁄n
(
nc
, 
fd_Êags
, 
now
);

13526 
nc
 = 
mgr
->
a˘ive_c⁄√˘i⁄s
;Ç¯!
NULL
;Ç¯
tmp
) {

13527 
tmp
 = 
nc
->
√xt
;

13528 i‡((
nc
->
Êags
 & 
MG_F_CLOSE_IMMEDIATELY
) ||

13529 (
nc
->
£nd_mbuf
.
Àn
 =0 && (nc->
Êags
 & 
MG_F_SEND_AND_CLOSE
))) {

13530 
	`mg_˛o£_c⁄n
(
nc
);

13534  
now
;

13535 
	}
}

13537 
	$mg_¶_if_gë_c⁄n_addr
(
mg_c⁄√˘i⁄
 *
nc
, 
ªmŸe
,

13538 
sockë_addªss
 *
ß
) {

13542 i‡(
ªmŸe
Ë
	`mem˝y
(
ß
, &
nc
->sa, (*sa));

13543 
	}
}

13545 
	$¶_ª°¨t_cb
(
mg_mgr
 *
mgr
) {

13551 
mg_c⁄√˘i⁄
 *
nc
;

13552 
nc
 = 
	`mg_√xt
(
mgr
, 
NULL
);Çc != NULL;Çc = mg_next(mgr,Çc)) {

13553 i‡(
nc
->
sock
 =
INVALID_SOCKET
) ;

13554 i‡(
nc
->
Êags
 & 
MG_F_LISTENING
) {

13555 
	`DBG
(("ª°¨tög %∞%s:%d", 
nc
, 
	`öë_¡ﬂ
“c->
ß
.
sö
.
sö_addr
),

13556 
	`¡ohs
(
nc
->
ß
.
sö
.
sö_p‹t
)));

13557 
ªs
 = (
nc
->
Êags
 & 
MG_F_UDP
 ? 
	`mg_¶_if_li°í_udp
“c, &nc->
ß
)

13558 : 
	`mg_¶_if_li°í_t˝
(
nc
, &nc->
ß
));

13559 i‡(
ªs
 == 0) ;

13562 
nc
->
sock
 = 
INVALID_SOCKET
;

13563 
	`DBG
(("ãrmö©ög %∞%s:%d", 
nc
, 
	`öë_¡ﬂ
“c->
ß
.
sö
.
sö_addr
),

13564 
	`¡ohs
(
nc
->
ß
.
sö
.
sö_p‹t
)));

13566 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

13568 
	}
}

13571 
	#MG_SL_IFACE_VTABLE
 \

13573 
mg_¶_if_öô
, \

13574 
mg_¶_if_‰ì
, \

13575 
mg_¶_if_add_c⁄n
, \

13576 
mg_¶_if_ªmove_c⁄n
, \

13577 
mg_¶_if_pﬁl
, \

13578 
mg_¶_if_li°í_t˝
, \

13579 
mg_¶_if_li°í_udp
, \

13580 
mg_¶_if_c⁄√˘_t˝
, \

13581 
mg_¶_if_c⁄√˘_udp
, \

13582 
mg_¶_if_t˝_£nd
, \

13583 
mg_¶_if_udp_£nd
, \

13584 
mg_¶_if_ªcved
, \

13585 
mg_¶_if_¸óã_c⁄n
, \

13586 
mg_¶_if_de°roy_c⁄n
, \

13587 
mg_¶_if_sock_£t
, \

13588 
mg_¶_if_gë_c⁄n_addr
, \

13589 }

	)

13592 
mg_iÁ˚_vèbÀ
 
	gmg_sim∂ñök_iÁ˚_vèbÀ
 = 
MG_SL_IFACE_VTABLE
;

13593 #i‡
MG_NET_IF
 =
MG_NET_IF_SIMPLELINK


13594 
mg_iÁ˚_vèbÀ
 
	gmg_deÁu…_iÁ˚_vèbÀ
 = 
MG_SL_IFACE_VTABLE
;

13598 #ifde‡
MG_MODULE_LINES


13606 #i‡
MG_ENABLE_SSL
 && 
MG_SSL_IF
 =
MG_SSL_IF_SIMPLELINK


13608 
	smg_s¶_if_˘x
 {

13609 *
	ms¶_˚π
;

13610 *
	ms¶_key
;

13611 *
	ms¶_ˇ_˚π
;

13612 *
	ms¶_£rvî_«me
;

13615 
	$mg_s¶_if_öô
() {

13616 
	}
}

13618 
mg_s¶_if_ªsu…
 
	$mg_s¶_if_c⁄n_öô
(

13619 
mg_c⁄√˘i⁄
 *
nc
, c⁄° 
mg_s¶_if_c⁄n_∑øms
 *
∑øms
,

13620 c⁄° **
îr_msg
) {

13621 
mg_s¶_if_˘x
 *
˘x
 =

13622 (
mg_s¶_if_˘x
 *Ë
	`MG_CALLOC
(1, (*
˘x
));

13623 i‡(
˘x
 =
NULL
) {

13624 
	`MG_SET_PTRPTR
(
îr_msg
, "Out of memory");

13625  
MG_SSL_ERROR
;

13627 
nc
->
s¶_if_d©a
 = 
˘x
;

13629 i‡(
∑øms
->
˚π
 !
NULL
 ||Ö¨ams->
key
 != NULL) {

13630 i‡(
∑øms
->
˚π
 !
NULL
 &&Ö¨ams->
key
 != NULL) {

13631 
˘x
->
s¶_˚π
 = 
	`°rdup
(
∑øms
->
˚π
);

13632 
˘x
->
s¶_key
 = 
	`°rdup
(
∑øms
->
key
);

13634 
	`MG_SET_PTRPTR
(
îr_msg
, "Both certánd keyáreÑequired.");

13635  
MG_SSL_ERROR
;

13638 i‡(
∑øms
->
ˇ_˚π
 !
NULL
 && 
	`°rcmp
(params->ca_cert, "*") != 0) {

13639 
˘x
->
s¶_ˇ_˚π
 = 
	`°rdup
(
∑øms
->
ˇ_˚π
);

13642 i‡(
∑øms
->
£rvî_«me
 !
NULL
) {

13643 
˘x
->
s¶_£rvî_«me
 = 
	`°rdup
(
∑øms
->
£rvî_«me
);

13645  
MG_SSL_OK
;

13646 
	}
}

13648 
	$mg_s¶_if_c⁄n_‰ì
(
mg_c⁄√˘i⁄
 *
nc
) {

13649 
mg_s¶_if_˘x
 *
˘x
 = (mg_s¶_if_˘x *Ë
nc
->
s¶_if_d©a
;

13650 i‡(
˘x
 =
NULL
) ;

13651 
nc
->
s¶_if_d©a
 = 
NULL
;

13652 
	`MG_FREE
(
˘x
->
s¶_˚π
);

13653 
	`MG_FREE
(
˘x
->
s¶_key
);

13654 
	`MG_FREE
(
˘x
->
s¶_ˇ_˚π
);

13655 
	`MG_FREE
(
˘x
->
s¶_£rvî_«me
);

13656 
	`mem£t
(
˘x
, 0, (*ctx));

13657 
	`MG_FREE
(
˘x
);

13658 
	}
}

13660 
boﬁ
 
	$≥m_to_dî
(c⁄° *
≥m_fûe
, c⁄° *
dî_fûe
) {

13661 
boﬁ
 
ªt
 = 
Ál£
;

13662 
FILE
 *
pf
 = 
NULL
, *
df
 = NULL;

13663 
boﬁ
 
wrôög
 = 
Ál£
;

13664 
pf
 = 
	`f›í
(
≥m_fûe
, "r");

13665 i‡(
pf
 =
NULL
Ë
˛ón
;

13666 
	`ªmove
(
dî_fûe
);

13667 
	`fs_¶fs_£t_√w_fûe_size
(
dî_fûe
 + 3, 2048);

13668 
df
 = 
	`f›í
(
dî_fûe
, "w");

13669 i‡(
df
 =
NULL
Ë
˛ón
;

13671 
≥m_buf
[70];

13672 
dî_buf
[48];

13673 i‡(!
	`fgës
(
≥m_buf
, ’em_buf), 
pf
)) ;

13674 i‡(
wrôög
) {

13675 i‡(
	`°r°r
(
≥m_buf
, "-----END "Ë!
NULL
) {

13676 
ªt
 = 
åue
;

13679 
l
 = 0;

13680 !
	`is•a˚
((Ë
≥m_buf
[
l
]))Ü++;

13681 
dî_Àn
 = 0;

13682 
	`cs_ba£64_decode
((c⁄° *Ë
≥m_buf
, (pem_buf),

13683 
dî_buf
, &
dî_Àn
);

13684 i‡(
dî_Àn
 <= 0) ;

13685 i‡(
	`fwrôe
(
dî_buf
, 1, 
dî_Àn
, 
df
) != der_len) ;

13686 } i‡(
	`°r°r
(
≥m_buf
, "-----BEGIN "Ë!
NULL
) {

13687 
wrôög
 = 
åue
;

13691 
˛ón
:

13692 i‡(
pf
 !
NULL
Ë
	`f˛o£
(pf);

13693 i‡(
df
 !
NULL
) {

13694 
	`f˛o£
(
df
);

13695 i‡(!
ªt
Ë
	`ªmove
(
dî_fûe
);

13697  
ªt
;

13698 
	}
}

13700 #i‡
MG_ENABLE_FILESYSTEM
 && 
deföed
(
MG_FS_SLFS
)

13702 *
	$¶_≥m2dî
(c⁄° *
≥m_fûe
) {

13703 c⁄° *
≥m_ext
 = 
	`°r°r
(
≥m_fûe
, ".pem");

13704 i‡(
≥m_ext
 =
NULL
 || *(pem_ext + 4) != '\0') {

13705  
	`°rdup
(
≥m_fûe
);

13707 *
dî_fûe
 = 
NULL
;

13709 
l
 = 
	`mg_a•rötf
(&
dî_fûe
, 0, "SL:%.*s.dî", (Ë(
≥m_ext
 - 
≥m_fûe
),

13710 
≥m_fûe
);

13711 i‡(
dî_fûe
 =
NULL
)  NULL;

13712 
boﬁ
 
ªsu…
 = 
Ál£
;

13713 
cs_°©_t
 
°
;

13714 i‡(
	`mg_°©
(
dî_fûe
, &
°
) != 0) {

13715 
ªsu…
 = 
	`≥m_to_dî
(
≥m_fûe
, 
dî_fûe
);

13716 
	`LOG
(
LL_DEBUG
, ("%†-> %†%d", 
≥m_fûe
, 
dî_fûe
, 
ªsu…
));

13719 
ªsu…
 = 
åue
;

13721 i‡(
ªsu…
) {

13723 
	`memmove
(
dî_fûe
, dî_fûê+ 3, 
l
 - 2 );

13725 
	`‰ì
(
dî_fûe
);

13726 
dî_fûe
 = 
NULL
;

13728  
dî_fûe
;

13729 
	}
}

13731 *
	$¶_≥m2dî
(c⁄° *
≥m_fûe
) {

13732  
	`°rdup
(
≥m_fûe
);

13733 
	}
}

13736 
	$¶_£t_s¶_›ts
(
mg_c⁄√˘i⁄
 *
nc
) {

13737 
îr
;

13738 
mg_s¶_if_˘x
 *
˘x
 = (mg_s¶_if_˘x *Ë
nc
->
s¶_if_d©a
;

13739 
	`DBG
(("%∞s¶ ctx: %p", 
nc
, 
˘x
));

13741 i‡(
˘x
 !
NULL
) {

13742 
	`DBG
(("%∞%s,%s,%s,%s", 
nc
, (
˘x
->
s¶_˚π
 ? ctx->ssl_cert : "-"),

13743 (
˘x
->
s¶_key
 ? ctx->
s¶_˚π
 : "-"),

13744 (
˘x
->
s¶_ˇ_˚π
 ? ctx->ssl_ca_cert : "-"),

13745 (
˘x
->
s¶_£rvî_«me
 ? ctx->ssl_server_name : "-")));

13746 i‡(
˘x
->
s¶_˚π
 !
NULL
 && ctx->
s¶_key
 != NULL) {

13747 *
s¶_˚π
 = 
	`¶_≥m2dî
(
˘x
->ssl_cert);

13748 *
s¶_key
 = 
	`¶_≥m2dî
(
˘x
->ssl_key);

13749 i‡(
s¶_˚π
 !
NULL
 && 
s¶_key
 != NULL) {

13750 
îr
 = 
	`¶_SëSockO±
(
nc
->
sock
, 
SL_SOL_SOCKET
,

13751 
SL_SO_SECURE_FILES_CERTIFICATE_FILE_NAME
, 
s¶_˚π
,

13752 
	`°æí
(
s¶_˚π
));

13753 
	`LOG
(
LL_INFO
, ("CERTIFICATE_FILE_NAME %†-> %d", 
s¶_˚π
, 
îr
));

13754 
îr
 = 
	`¶_SëSockO±
(
nc
->
sock
, 
SL_SOL_SOCKET
,

13755 
SL_SO_SECURE_FILES_PRIVATE_KEY_FILE_NAME
, 
s¶_key
,

13756 
	`°æí
(
s¶_key
));

13757 
	`LOG
(
LL_INFO
, ("PRIVATE_KEY_FILE_NAME %†-> %d", 
s¶_key
, 
îr
));

13759 
îr
 = -1;

13761 
	`‰ì
(
s¶_˚π
);

13762 
	`‰ì
(
s¶_key
);

13763 i‡(
îr
 != 0) Érr;

13765 i‡(
˘x
->
s¶_ˇ_˚π
 !
NULL
) {

13766 i‡(
˘x
->
s¶_ˇ_˚π
[0] != '\0') {

13767 *
s¶_ˇ_˚π
 = 
	`¶_≥m2dî
(
˘x
->ssl_ca_cert);

13768 i‡(
s¶_ˇ_˚π
 !
NULL
) {

13769 
îr
 = 
	`¶_SëSockO±
(
nc
->
sock
, 
SL_SOL_SOCKET
,

13770 
SL_SO_SECURE_FILES_CA_FILE_NAME
, 
s¶_ˇ_˚π
,

13771 
	`°æí
(
s¶_ˇ_˚π
));

13772 
	`LOG
(
LL_INFO
, ("CA_FILE_NAME %†-> %d", 
s¶_ˇ_˚π
, 
îr
));

13774 
îr
 = -1;

13776 
	`‰ì
(
s¶_ˇ_˚π
);

13777 i‡(
îr
 != 0) Érr;

13780 i‡(
˘x
->
s¶_£rvî_«me
 !
NULL
) {

13781 
îr
 = 
	`¶_SëSockO±
(
nc
->
sock
, 
SL_SOL_SOCKET
,

13782 
SO_SECURE_DOMAIN_NAME_VERIFICATION
,

13783 
˘x
->
s¶_£rvî_«me
, 
	`°æí
(ctx->ssl_server_name));

13784 
	`DBG
(("DOMAIN_NAME_VERIFICATION %†-> %d", 
˘x
->
s¶_£rvî_«me
, 
îr
));

13788 i‡(
îr
 !0 &&Éº !
SL_ENOPROTOOPT
) Érr;

13792 
	}
}

13795 #ifde‡
MG_MODULE_LINES


13803 #i‚de‡
CS_COMMON_PLATFORMS_LWIP_MG_NET_IF_LWIP_H_


13804 
	#CS_COMMON_PLATFORMS_LWIP_MG_NET_IF_LWIP_H_


	)

13806 #i‚de‡
MG_ENABLE_NET_IF_LWIP_LOW_LEVEL


13807 
	#MG_ENABLE_NET_IF_LWIP_LOW_LEVEL
 
MG_NET_IF
 =
MG_NET_IF_LWIP_LOW_LEVEL


	)

13810 #i‡
MG_ENABLE_NET_IF_LWIP_LOW_LEVEL


13812 
	~<°döt.h
>

13814 
mg_iÁ˚_vèbÀ
 
mg_lwù_iÁ˚_vèbÀ
;

13816 
	smg_lwù_c⁄n_°©e
 {

13817 
mg_c⁄√˘i⁄
 *
	mnc
;

13818 
mg_c⁄√˘i⁄
 *
	mlc
;

13820 
t˝_pcb
 *
	mt˝
;

13821 
udp_pcb
 *
	mudp
;

13822 } 
	mpcb
;

13823 
îr_t
 
	mîr
;

13824 
size_t
 
	mnum_£¡
;

13825 
pbuf
 *
	mrx_chaö
;

13826 
size_t
 
	mrx_off£t
;

13828 
	mœ°_s¶_wrôe_size
;

13830 
	mªcv_≥ndög
;

13833 
	emg_sig_ty≥
 {

13834 
	mMG_SIG_CONNECT_RESULT
 = 1,

13835 
	mMG_SIG_RECV
 = 2,

13836 
	mMG_SIG_SENT_CB
 = 3,

13837 
	mMG_SIG_CLOSE_CONN
 = 4,

13838 
	mMG_SIG_TOMBSTONE
 = 5,

13839 
	mMG_SIG_ACCEPT
 = 6,

13842 
mg_lwù_po°_sig«l
(
mg_sig_ty≥
 
sig
, 
mg_c⁄√˘i⁄
 *
nc
);

13845 
mg_lwù_mgr_scheduÀ_pﬁl
(
mg_mgr
 *
mgr
);

13850 #ifde‡
MG_MODULE_LINES


13858 #i‡
MG_ENABLE_NET_IF_LWIP_LOW_LEVEL


13860 
	~<lwù/pbuf.h
>

13861 
	~<lwù/t˝.h
>

13862 #i‡
CS_PLATFORM
 !
CS_P_STM32


13863 
	~<lwù/t˝_im∂.h
>

13865 
	~<lwù/udp.h
>

13873 #i‡
MG_ENABLE_IPV6


13874 
	#TCP_NEW
 
t˝_√w_ù6


	)

13875 
	#TCP_BIND
 
t˝_böd_ù6


	)

13876 
	#UDP_BIND
 
udp_böd_ù6


	)

13877 
	#IPADDR_NTOA
(
x
Ë
	`ù6addr_¡ﬂ
((c⁄° 
ù6_addr_t
 *)(x))

	)

13878 
	#SET_ADDR
(
d°
, 
§c
) \

13879 
	`mem˝y
((
d°
)->
sö6
.
sö6_addr
.
s6_addr
, (
§c
)->
ù6
.
addr
, \

13880 ((
d°
)->
sö6
.
sö6_addr
.
s6_addr
))

	)

13882 
	#TCP_NEW
 
t˝_√w


	)

13883 
	#TCP_BIND
 
t˝_böd


	)

13884 
	#UDP_BIND
 
udp_böd


	)

13885 
	#IPADDR_NTOA
 
ùaddr_¡ﬂ


	)

13886 
	#SET_ADDR
(
d°
, 
§c
Ë(d°)->
sö
.
sö_addr
.
s_addr
 = 
	`GET_IPV4
(§c)

	)

13892 #i‡!
deföed
(
LWIP_IPV6
) || !LWIP_IPV6

13893 
	#GET_IPV4
(
ùX_addr
Ë((ùX_addr)->
addr
)

	)

13895 
	#GET_IPV4
(
ùX_addr
Ë((ùX_addr)->
ù4
.
addr
)

	)

13898 
mg_lwù_s¶_do_hs
(
mg_c⁄√˘i⁄
 *
nc
);

13899 
mg_lwù_s¶_£nd
(
mg_c⁄√˘i⁄
 *
nc
);

13900 
mg_lwù_s¶_ªcv
(
mg_c⁄√˘i⁄
 *
nc
);

13902 
mg_lwù_if_öô
(
mg_iÁ˚
 *
iÁ˚
);

13903 
mg_lwù_if_‰ì
(
mg_iÁ˚
 *
iÁ˚
);

13904 
mg_lwù_if_add_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
);

13905 
mg_lwù_if_ªmove_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
);

13906 
time_t
 
mg_lwù_if_pﬁl
(
mg_iÁ˚
 *
iÁ˚
, 
timeout_ms
);

13908 #ifde‡
RTOS_SDK


13909 
mgos_lock
();

13910 
mgos_u∆ock
();

13912 
	#mgos_lock
()

	)

13913 
	#mgos_u∆ock
()

	)

13916 
mg_lwù_ªcv_comm⁄
(
mg_c⁄√˘i⁄
 *
nc
, 
pbuf
 *
p
);

13918 #i‡
LWIP_TCP_KEEPALIVE


13919 
	$mg_lwù_£t_kì∑live_∑øms
(
mg_c⁄√˘i⁄
 *
nc
, 
idÀ
,

13920 
öãrvÆ
, 
cou¡
) {

13921 i‡(
nc
->
sock
 =
INVALID_SOCKET
 ||Çc->
Êags
 & 
MG_F_UDP
) {

13924 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

13925 
t˝_pcb
 *
çcb
 = 
cs
->
pcb
.
t˝
;

13926 i‡(
idÀ
 > 0 && 
öãrvÆ
 > 0 && 
cou¡
 > 0) {

13927 
çcb
->
kìp_idÀ
 = 
idÀ
 * 1000;

13928 
çcb
->
kìp_ötvl
 = 
öãrvÆ
 * 1000;

13929 
çcb
->
kìp_˙t
 = 
cou¡
;

13930 
çcb
->
so_›ti⁄s
 |
SOF_KEEPALIVE
;

13932 
çcb
->
so_›ti⁄s
 &~
SOF_KEEPALIVE
;

13934 
	}
}

13935 #ñi‡!
deföed
(
MG_NO_LWIP_TCP_KEEPALIVE
)

13936 #w¨nög 
LWIP
 
TCP
 
kì∑live
 
is
 
dißbÀd
. 
PÀa£
 
c⁄sidî
 
íablög
 
ô
.

13939 
îr_t
 
	$mg_lwù_t˝_c⁄n_cb
(*
¨g
, 
t˝_pcb
 *
çcb
, 
îr_t
 
îr
) {

13940 
mg_c⁄√˘i⁄
 *
nc
 = (mg_c⁄√˘i⁄ *Ë
¨g
;

13941 
	`DBG
(("%∞c⁄√˘Åÿ%s:%u = %d", 
nc
, 
	`IPADDR_NTOA
(
	`ùX_2_ù
(&
çcb
->
ªmŸe_ù
)),

13942 
çcb
->
ªmŸe_p‹t
, 
îr
));

13943 i‡(
nc
 =
NULL
) {

13944 
	`t˝_ab‹t
(
çcb
);

13945  
ERR_ARG
;

13947 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

13948 
cs
->
îr
 =Érr;

13949 #i‡
LWIP_TCP_KEEPALIVE


13950 i‡(
îr
 =0Ë
	`mg_lwù_£t_kì∑live_∑øms
(
nc
, 60, 10, 6);

13952 
	`mg_lwù_po°_sig«l
(
MG_SIG_CONNECT_RESULT
, 
nc
);

13953  
ERR_OK
;

13954 
	}
}

13956 
	$mg_lwù_t˝_îr‹_cb
(*
¨g
, 
îr_t
 
îr
) {

13957 
mg_c⁄√˘i⁄
 *
nc
 = (mg_c⁄√˘i⁄ *Ë
¨g
;

13958 
	`DBG
(("%∞c⁄¿îr‹ %d", 
nc
, 
îr
));

13959 i‡(
nc
 =
NULL
) ;

13960 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

13961 
cs
->
pcb
.
t˝
 = 
NULL
;

13962 i‡(
nc
->
Êags
 & 
MG_F_CONNECTING
) {

13963 
cs
->
îr
 =Érr;

13964 
	`mg_lwù_po°_sig«l
(
MG_SIG_CONNECT_RESULT
, 
nc
);

13966 
	`mg_lwù_po°_sig«l
(
MG_SIG_CLOSE_CONN
, 
nc
);

13968 
	}
}

13970 
îr_t
 
	$mg_lwù_t˝_ªcv_cb
(*
¨g
, 
t˝_pcb
 *
çcb
,

13971 
pbuf
 *
p
, 
îr_t
 
îr
) {

13972 
mg_c⁄√˘i⁄
 *
nc
 = (mg_c⁄√˘i⁄ *Ë
¨g
;

13973 
	`DBG
(("%∞%∞%u %d", 
nc
, 
çcb
, (
p
 !
NULL
 ?Ö->
tŸ_Àn
 : 0), 
îr
));

13974 i‡(
p
 =
NULL
) {

13975 i‡(
nc
 !
NULL
) {

13976 
	`mg_lwù_po°_sig«l
(
MG_SIG_CLOSE_CONN
, 
nc
);

13980  
ERR_OK
;

13981 } i‡(
nc
 =
NULL
) {

13982 
	`t˝_ab‹t
(
çcb
);

13983  
ERR_ARG
;

13985 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

13990 i‡(
p
->
√xt
 !
NULL
) {

13991 
pbuf
 *
q
 = 
p
->
√xt
;

13992 ; 
q
 !
NULL
; q = q->
√xt
Ë
	`pbuf_ªf
(q);

13994 i‡(
cs
->
rx_chaö
 =
NULL
) {

13995 
cs
->
rx_off£t
 = 0;

13996 } i‡(
	`pbuf_˛í
(
cs
->
rx_chaö
) >= 4) {

14000 
pbuf
 *
≈
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
p
->
tŸ_Àn
, 
PBUF_RAM
);

14001 i‡(
≈
 !
NULL
) {

14002 
	`pbuf_c›y
(
≈
, 
p
);

14003 
	`pbuf_‰ì
(
p
);

14004 
p
 = 
≈
;

14007 
	`mg_lwù_ªcv_comm⁄
(
nc
, 
p
);

14008  
ERR_OK
;

14009 
	}
}

14011 
	$mg_lwù_h™dÀ_ªcv_t˝
(
mg_c⁄√˘i⁄
 *
nc
) {

14012 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14014 #i‡
MG_ENABLE_SSL


14015 i‡(
nc
->
Êags
 & 
MG_F_SSL
) {

14016 i‡(
nc
->
Êags
 & 
MG_F_SSL_HANDSHAKE_DONE
) {

14017 
	`mg_lwù_s¶_ªcv
(
nc
);

14019 
	`mg_lwù_s¶_do_hs
(
nc
);

14025 
	`mgos_lock
();

14026 
cs
->
rx_chaö
 !
NULL
) {

14027 
pbuf
 *
£g
 = 
cs
->
rx_chaö
;

14028 
size_t
 
Àn
 = (
£g
->À¿- 
cs
->
rx_off£t
);

14029 *
d©a
 = (*Ë
	`mÆloc
(
Àn
);

14030 i‡(
d©a
 =
NULL
) {

14031 
	`mgos_u∆ock
();

14032 
	`DBG
(("OOM"));

14035 
	`pbuf_c›y_∑πül
(
£g
, 
d©a
, 
Àn
, 
cs
->
rx_off£t
);

14036 
	`mgos_u∆ock
();

14037 
	`mg_if_ªcv_t˝_cb
(
nc
, 
d©a
, 
Àn
, 1 );

14038 
	`mgos_lock
();

14039 
cs
->
rx_off£t
 +
Àn
;

14040 i‡(
cs
->
rx_off£t
 =cs->
rx_chaö
->
Àn
) {

14041 
cs
->
rx_chaö
 = 
	`pbuf_dechaö
(cs->rx_chain);

14042 
	`pbuf_‰ì
(
£g
);

14043 
cs
->
rx_off£t
 = 0;

14046 
	`mgos_u∆ock
();

14048 i‡(
nc
->
£nd_mbuf
.
Àn
 > 0) {

14049 
	`mg_lwù_mgr_scheduÀ_pﬁl
(
nc
->
mgr
);

14051 
	}
}

14053 
îr_t
 
	$mg_lwù_t˝_£¡_cb
(*
¨g
, 
t˝_pcb
 *
çcb
,

14054 
u16_t
 
num_£¡
) {

14055 
mg_c⁄√˘i⁄
 *
nc
 = (mg_c⁄√˘i⁄ *Ë
¨g
;

14056 
	`DBG
(("%∞%∞%u", 
nc
, 
çcb
, 
num_£¡
));

14057 i‡(
nc
 =
NULL
) {

14058 
	`t˝_ab‹t
(
çcb
);

14059  
ERR_ABRT
;

14061 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14062 
cs
->
num_£¡
 +=Çum_sent;

14064 
	`mg_lwù_po°_sig«l
(
MG_SIG_SENT_CB
, 
nc
);

14065  
ERR_OK
;

14066 
	}
}

14068 
	$mg_lwù_if_c⁄√˘_t˝
(
mg_c⁄√˘i⁄
 *
nc
,

14069 c⁄° 
sockë_addªss
 *
ß
) {

14070 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14071 
t˝_pcb
 *
çcb
 = 
	`TCP_NEW
();

14072 
cs
->
pcb
.
t˝
 = 
çcb
;

14073 
ù_addr_t
 *
ù
 = (ù_addr_à*Ë&
ß
->
sö
.
sö_addr
.
s_addr
;

14074 
u16_t
 
p‹t
 = 
	`¡ohs
(
ß
->
sö
.
sö_p‹t
);

14075 
	`t˝_¨g
(
çcb
, 
nc
);

14076 
	`t˝_îr
(
çcb
, 
mg_lwù_t˝_îr‹_cb
);

14077 
	`t˝_£¡
(
çcb
, 
mg_lwù_t˝_£¡_cb
);

14078 
	`t˝_ªcv
(
çcb
, 
mg_lwù_t˝_ªcv_cb
);

14079 
cs
->
îr
 = 
	`TCP_BIND
(
çcb
, 
IP_ADDR_ANY
, 0 );

14080 
	`DBG
(("%∞t˝_böd = %d", 
nc
, 
cs
->
îr
));

14081 i‡(
cs
->
îr
 !
ERR_OK
) {

14082 
	`mg_lwù_po°_sig«l
(
MG_SIG_CONNECT_RESULT
, 
nc
);

14085 
cs
->
îr
 = 
	`t˝_c⁄√˘
(
çcb
, 
ù
, 
p‹t
, 
mg_lwù_t˝_c⁄n_cb
);

14086 
	`DBG
(("%∞t˝_c⁄√˘ %∞%d", 
nc
, 
çcb
, 
cs
->
îr
));

14087 i‡(
cs
->
îr
 !
ERR_OK
) {

14088 
	`mg_lwù_po°_sig«l
(
MG_SIG_CONNECT_RESULT
, 
nc
);

14091 
	}
}

14097 #i‡
CS_PLATFORM
 =
CS_P_NRF51
 || CS_PLATFORM =
CS_P_NRF52
 || \

14098 
	gCS_PLATFORM
 =
CS_P_STM32


14099 
	$mg_lwù_udp_ªcv_cb
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

14100 c⁄° 
ù_addr_t
 *
addr
, 
u16_t
 
p‹t
)

14102 
	$mg_lwù_udp_ªcv_cb
(*
¨g
, 
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

14103 
ù_addr_t
 *
addr
, 
u16_t
 
p‹t
)

14106 
mg_c⁄√˘i⁄
 *
nc
 = (mg_c⁄√˘i⁄ *Ë
¨g
;

14107 
	`DBG
(("%∞%s:%u %∞%u %u", 
nc
, 
	`IPADDR_NTOA
(
addr
), 
p‹t
, 
p
,Ö->
ªf
,Ö->
Àn
));

14109 
pbuf
 *
ßp
 =

14110 
	`pbuf_Æloc
(
PBUF_RAW
, (
sockë_addªss
), 
PBUF_RAM
);

14111 i‡(
ßp
 =
NULL
) {

14112 
	`pbuf_‰ì
(
p
);

14115 
sockë_addªss
 *
ß
 = (sockë_addªs†*Ë
ßp
->
∑ylﬂd
;

14116 
ß
->
sö
.
sö_addr
.
s_addr
 = 
addr
->addr;

14117 
ß
->
sö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

14119 
p
 = 
	`pbuf_cﬂÀs˚
’, 
PBUF_RAW
);

14120 
	`pbuf_chaö
(
ßp
, 
p
);

14121 
	`mg_lwù_ªcv_comm⁄
(
nc
, 
ßp
);

14122 (Ë
pcb
;

14123 
	}
}

14125 
	$mg_lwù_ªcv_comm⁄
(
mg_c⁄√˘i⁄
 *
nc
, 
pbuf
 *
p
) {

14126 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14127 
	`mgos_lock
();

14128 i‡(
cs
->
rx_chaö
 =
NULL
) {

14129 
cs
->
rx_chaö
 = 
p
;

14131 
	`pbuf_chaö
(
cs
->
rx_chaö
, 
p
);

14133 i‡(!
cs
->
ªcv_≥ndög
) {

14134 
cs
->
ªcv_≥ndög
 = 1;

14135 
	`mg_lwù_po°_sig«l
(
MG_SIG_RECV
, 
nc
);

14137 
	`mgos_u∆ock
();

14138 
	}
}

14140 
	$mg_lwù_h™dÀ_ªcv_udp
(
mg_c⁄√˘i⁄
 *
nc
) {

14141 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14146 
cs
->
rx_chaö
 !
NULL
) {

14147 
pbuf
 *
ßp
 = 
cs
->
rx_chaö
;

14148 
pbuf
 *
p
 = 
ßp
->
√xt
;

14149 
cs
->
rx_chaö
 = 
	`pbuf_dechaö
(
p
);

14150 
size_t
 
d©a_Àn
 = 
p
->
Àn
;

14151 *
d©a
 = (*Ë
	`mÆloc
(
d©a_Àn
);

14152 i‡(
d©a
 !
NULL
) {

14153 
	`pbuf_c›y_∑πül
(
p
, 
d©a
, 
d©a_Àn
, 0);

14154 
	`pbuf_‰ì
(
p
);

14155 
	`mg_if_ªcv_udp_cb
(
nc
, 
d©a
, 
d©a_Àn
,

14156 (
sockë_addªss
 *Ë
ßp
->
∑ylﬂd
, s≠->
Àn
);

14157 
	`pbuf_‰ì
(
ßp
);

14159 
	`pbuf_‰ì
(
p
);

14160 
	`pbuf_‰ì
(
ßp
);

14163 
	}
}

14165 
	$mg_lwù_if_c⁄√˘_udp
(
mg_c⁄√˘i⁄
 *
nc
) {

14166 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14167 
udp_pcb
 *
upcb
 = 
	`udp_√w
();

14168 
cs
->
îr
 = 
	`UDP_BIND
(
upcb
, 
IP_ADDR_ANY
, 0 );

14169 
	`DBG
(("%∞udp_böd %∞%d", 
nc
, 
upcb
, 
cs
->
îr
));

14170 i‡(
cs
->
îr
 =
ERR_OK
) {

14171 
	`udp_ªcv
(
upcb
, 
mg_lwù_udp_ªcv_cb
, 
nc
);

14172 
cs
->
pcb
.
udp
 = 
upcb
;

14174 
	`udp_ªmove
(
upcb
);

14176 
	`mg_lwù_po°_sig«l
(
MG_SIG_CONNECT_RESULT
, 
nc
);

14177 
	}
}

14179 
	$mg_lwù_ac˚±_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
, 
t˝_pcb
 *
çcb
) {

14180 
sockë_addªss
 
ß
;

14181 
	`SET_ADDR
(&
ß
, &
çcb
->
ªmŸe_ù
);

14182 
ß
.
sö
.
sö_p‹t
 = 
	`ht⁄s
(
çcb
->
ªmŸe_p‹t
);

14183 
	`mg_if_ac˚±_t˝_cb
(
nc
, &
ß
, (ß.
sö
));

14184 
	}
}

14186 
	$mg_lwù_h™dÀ_ac˚±
(
mg_c⁄√˘i⁄
 *
nc
) {

14187 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14188 #i‡
MG_ENABLE_SSL


14189 i‡(
cs
->
lc
->
Êags
 & 
MG_F_SSL
) {

14190 i‡(
	`mg_s¶_if_c⁄n_ac˚±
(
nc
, 
cs
->
lc
Ë!
MG_SSL_OK
) {

14191 
	`LOG
(
LL_ERROR
, ("SSLÉrror"));

14192 
	`t˝_˛o£
(
cs
->
pcb
.
t˝
);

14197 
	`mg_lwù_ac˚±_c⁄n
(
nc
, 
cs
->
pcb
.
t˝
);

14199 
	}
}

14201 
îr_t
 
	$mg_lwù_ac˚±_cb
(*
¨g
, 
t˝_pcb
 *
√wçcb
, 
îr_t
 
îr
) {

14202 
mg_c⁄√˘i⁄
 *
lc
 = (mg_c⁄√˘i⁄ *Ë
¨g
;

14203 
	`DBG
(("%∞c⁄¿%∞‰om %s:%u", 
lc
, 
√wçcb
,

14204 
	`IPADDR_NTOA
(
	`ùX_2_ù
(&
√wçcb
->
ªmŸe_ù
)),Çewçcb->
ªmŸe_p‹t
));

14205 
mg_c⁄√˘i⁄
 *
nc
 = 
	`mg_if_ac˚±_√w_c⁄n
(
lc
);

14206 i‡(
nc
 =
NULL
) {

14207 
	`t˝_ab‹t
(
√wçcb
);

14208  
ERR_ABRT
;

14210 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14211 
cs
->
lc
 =Üc;

14212 
cs
->
pcb
.
t˝
 = 
√wçcb
;

14215 
	`t˝_¨g
(
√wçcb
, 
nc
);

14216 
	`t˝_îr
(
√wçcb
, 
mg_lwù_t˝_îr‹_cb
);

14217 
	`t˝_£¡
(
√wçcb
, 
mg_lwù_t˝_£¡_cb
);

14218 
	`t˝_ªcv
(
√wçcb
, 
mg_lwù_t˝_ªcv_cb
);

14219 #i‡
LWIP_TCP_KEEPALIVE


14220 
	`mg_lwù_£t_kì∑live_∑øms
(
nc
, 60, 10, 6);

14222 
	`mg_lwù_po°_sig«l
(
MG_SIG_ACCEPT
, 
nc
);

14223 (Ë
îr
;

14224  
ERR_OK
;

14225 
	}
}

14227 
	$mg_lwù_if_li°í_t˝
(
mg_c⁄√˘i⁄
 *
nc
, 
sockë_addªss
 *
ß
) {

14228 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14229 
t˝_pcb
 *
çcb
 = 
	`TCP_NEW
();

14230 
ù_addr_t
 *
ù
 = (ù_addr_à*Ë&
ß
->
sö
.
sö_addr
.
s_addr
;

14231 
u16_t
 
p‹t
 = 
	`¡ohs
(
ß
->
sö
.
sö_p‹t
);

14232 
cs
->
îr
 = 
	`TCP_BIND
(
çcb
, 
ù
, 
p‹t
);

14233 
	`DBG
(("%∞t˝_böd(%s:%uË%d", 
nc
, 
	`IPADDR_NTOA
(
ù
), 
p‹t
, 
cs
->
îr
));

14234 i‡(
cs
->
îr
 !
ERR_OK
) {

14235 
	`t˝_˛o£
(
çcb
);

14238 
	`t˝_¨g
(
çcb
, 
nc
);

14239 
çcb
 = 
	`t˝_li°í
(tpcb);

14240 
cs
->
pcb
.
t˝
 = 
çcb
;

14241 
	`t˝_ac˚±
(
çcb
, 
mg_lwù_ac˚±_cb
);

14243 
	}
}

14245 
	$mg_lwù_if_li°í_udp
(
mg_c⁄√˘i⁄
 *
nc
, 
sockë_addªss
 *
ß
) {

14246 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14247 
udp_pcb
 *
upcb
 = 
	`udp_√w
();

14248 
ù_addr_t
 *
ù
 = (ù_addr_à*Ë&
ß
->
sö
.
sö_addr
.
s_addr
;

14249 
u16_t
 
p‹t
 = 
	`¡ohs
(
ß
->
sö
.
sö_p‹t
);

14250 
cs
->
îr
 = 
	`UDP_BIND
(
upcb
, 
ù
, 
p‹t
);

14251 
	`DBG
(("%∞udb_böd(%s:%uË%d", 
nc
, 
	`IPADDR_NTOA
(
ù
), 
p‹t
, 
cs
->
îr
));

14252 i‡(
cs
->
îr
 !
ERR_OK
) {

14253 
	`udp_ªmove
(
upcb
);

14256 
	`udp_ªcv
(
upcb
, 
mg_lwù_udp_ªcv_cb
, 
nc
);

14257 
cs
->
pcb
.
udp
 = 
upcb
;

14259 
	}
}

14261 
	$mg_lwù_t˝_wrôe
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
d©a
,

14262 
uöt16_t
 
Àn
) {

14263 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14264 
t˝_pcb
 *
çcb
 = 
cs
->
pcb
.
t˝
;

14265 
Àn
 = 
	`MIN
(
çcb
->
mss
, MIN÷í,Åpcb->
¢d_buf
));

14266 i‡(
Àn
 == 0) {

14267 
	`DBG
(("%∞nÿbu‡avaû %u %u %u %∞%p", 
çcb
,Åpcb->
acked
,Åpcb->
¢d_buf
,

14268 
çcb
->
¢d_queuñí
,Åpcb->
un£¡
,Åpcb->
u«cked
));

14269 
	`t˝_ouçut
(
çcb
);

14278 #i‡
CS_PLATFORM
 =
CS_P_ESP8266


14279 i‡(
çcb
->
u«cked
 !
NULL
) {

14282 i‡(
çcb
->
un£¡
 !
NULL
) {

14283 
Àn
 = 
	`MIN
÷í, (
TCP_MSS
 - 
çcb
->
un£¡
->len));

14286 
îr_t
 
îr
 = 
	`t˝_wrôe
(
çcb
, 
d©a
, 
Àn
, 
TCP_WRITE_FLAG_COPY
);

14287 
	`DBG
(("%∞t˝_wrôê%u = %d", 
çcb
, 
Àn
, 
îr
));

14288 i‡(
îr
 !
ERR_OK
) {

14293  (
îr
 =
ERR_MEM
 ? 0 : -1);

14295  
Àn
;

14296 
	}
}

14298 
	$mg_lwù_£nd_m‹e
(
mg_c⁄√˘i⁄
 *
nc
) {

14299 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14300 i‡(
nc
->
sock
 =
INVALID_SOCKET
 || 
cs
->
pcb
.
t˝
 =
NULL
) {

14301 
	`DBG
(("%∞övÆid sockë", 
nc
));

14304 
num_wrôãn
 = 
	`mg_lwù_t˝_wrôe
(
nc
,Çc->
£nd_mbuf
.
buf
,Çc->£nd_mbuf.
Àn
);

14305 
	`DBG
(("%∞mg_lwù_t˝_wrôê%u = %d", 
nc
,Çc->
£nd_mbuf
.
Àn
, 
num_wrôãn
));

14306 i‡(
num_wrôãn
 == 0) ;

14307 i‡(
num_wrôãn
 < 0) {

14308 
	`mg_lwù_po°_sig«l
(
MG_SIG_CLOSE_CONN
, 
nc
);

14310 
	`mbuf_ªmove
(&
nc
->
£nd_mbuf
, 
num_wrôãn
);

14311 
	`mbuf_åim
(&
nc
->
£nd_mbuf
);

14312 
	}
}

14314 
	$mg_lwù_if_t˝_£nd
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
buf
,

14315 
size_t
 
Àn
) {

14316 
	`mbuf_≠≥nd
(&
nc
->
£nd_mbuf
, 
buf
, 
Àn
);

14317 
	`mg_lwù_mgr_scheduÀ_pﬁl
(
nc
->
mgr
);

14318 
	}
}

14320 
	$mg_lwù_if_udp_£nd
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
buf
,

14321 
size_t
 
Àn
) {

14322 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14323 i‡(
nc
->
sock
 =
INVALID_SOCKET
 || 
cs
->
pcb
.
udp
 =
NULL
) {

14329 
	`DBG
(("%∞sockë i†nŸ c⁄√˘ed", 
nc
));

14332 
udp_pcb
 *
upcb
 = 
cs
->
pcb
.
udp
;

14333 
pbuf
 *
p
 = 
	`pbuf_Æloc
(
PBUF_TRANSPORT
, 
Àn
, 
PBUF_RAM
);

14334 
ù_addr_t
 *
ù
 = (ù_addr_à*Ë&
nc
->
ß
.
sö
.
sö_addr
.
s_addr
;

14335 
u16_t
 
p‹t
 = 
	`¡ohs
(
nc
->
ß
.
sö
.
sö_p‹t
);

14336 i‡(
p
 =
NULL
) {

14337 
	`DBG
(("OOM"));

14340 
	`mem˝y
(
p
->
∑ylﬂd
, 
buf
, 
Àn
);

14341 
cs
->
îr
 = 
	`udp_£ndto
(
upcb
, 
p
, (
ù_addr_t
 *Ë
ù
, 
p‹t
);

14342 
	`DBG
(("%∞udp_£ndtÿ%d", 
nc
, 
cs
->
îr
));

14343 
	`pbuf_‰ì
(
p
);

14344 i‡(
cs
->
îr
 !
ERR_OK
) {

14345 
	`mg_lwù_po°_sig«l
(
MG_SIG_CLOSE_CONN
, 
nc
);

14347 
cs
->
num_£¡
 +
Àn
;

14348 
	`mg_lwù_po°_sig«l
(
MG_SIG_SENT_CB
, 
nc
);

14350 
	}
}

14352 
	$mg_lwù_if_ªcved
(
mg_c⁄√˘i⁄
 *
nc
, 
size_t
 
Àn
) {

14353 i‡(
nc
->
Êags
 & 
MG_F_UDP
) ;

14354 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14355 i‡(
nc
->
sock
 =
INVALID_SOCKET
 || 
cs
->
pcb
.
t˝
 =
NULL
) {

14356 
	`DBG
(("%∞övÆid sockë", 
nc
));

14359 
	`DBG
(("%∞%∞%u", 
nc
, 
cs
->
pcb
.
t˝
, 
Àn
));

14362 #i‡
MG_ENABLE_SSL


14363 i‡(!(
nc
->
Êags
 & 
MG_F_SSL
)) {

14364 
	`t˝_ªcved
(
cs
->
pcb
.
t˝
, 
Àn
);

14367 
	`t˝_ªcved
(
cs
->
pcb
.
t˝
, 
Àn
);

14369 
	`mbuf_åim
(&
nc
->
ªcv_mbuf
);

14370 
	}
}

14372 
	$mg_lwù_if_¸óã_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

14373 
mg_lwù_c⁄n_°©e
 *
cs
 =

14374 (
mg_lwù_c⁄n_°©e
 *Ë
	`ˇŒoc
(1, (*
cs
));

14375 i‡(
cs
 =
NULL
)  0;

14376 
cs
->
nc
 =Çc;

14377 
nc
->
sock
 = (
öçå_t
Ë
cs
;

14379 
	}
}

14381 
	$mg_lwù_if_de°roy_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

14382 i‡(
nc
->
sock
 =
INVALID_SOCKET
) ;

14383 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14384 i‡(!(
nc
->
Êags
 & 
MG_F_UDP
)) {

14385 
t˝_pcb
 *
çcb
 = 
cs
->
pcb
.
t˝
;

14386 i‡(
çcb
 !
NULL
) {

14387 
	`t˝_¨g
(
çcb
, 
NULL
);

14388 
	`DBG
(("%∞t˝_˛o£ %p", 
nc
, 
çcb
));

14389 
	`t˝_¨g
(
çcb
, 
NULL
);

14390 
	`t˝_˛o£
(
çcb
);

14392 
cs
->
rx_chaö
 !
NULL
) {

14393 
pbuf
 *
£g
 = 
cs
->
rx_chaö
;

14394 
cs
->
rx_chaö
 = 
	`pbuf_dechaö
(cs->rx_chain);

14395 
	`pbuf_‰ì
(
£g
);

14397 
	`mem£t
(
cs
, 0, (*cs));

14398 
	`‰ì
(
cs
);

14399 } i‡(
nc
->
li°íî
 =
NULL
) {

14401 
udp_pcb
 *
upcb
 = 
cs
->
pcb
.
udp
;

14402 i‡(
upcb
 !
NULL
) {

14403 
	`DBG
(("%∞udp_ªmovê%p", 
nc
, 
upcb
));

14404 
	`udp_ªmove
(
upcb
);

14406 
	`mem£t
(
cs
, 0, (*cs));

14407 
	`‰ì
(
cs
);

14409 
nc
->
sock
 = 
INVALID_SOCKET
;

14410 
	}
}

14412 
	$mg_lwù_if_gë_c⁄n_addr
(
mg_c⁄√˘i⁄
 *
nc
, 
ªmŸe
,

14413 
sockë_addªss
 *
ß
) {

14414 
	`mem£t
(
ß
, 0, (*sa));

14415 i‡(
nc
->
sock
 =
INVALID_SOCKET
) ;

14416 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14417 i‡(
nc
->
Êags
 & 
MG_F_UDP
) {

14418 
udp_pcb
 *
upcb
 = 
cs
->
pcb
.
udp
;

14419 i‡(
ªmŸe
) {

14420 
	`mem˝y
(
ß
, &
nc
->sa, (*sa));

14422 
ß
->
sö
.
sö_p‹t
 = 
	`ht⁄s
(
upcb
->
loˇl_p‹t
);

14423 
	`SET_ADDR
(
ß
, &
upcb
->
loˇl_ù
);

14426 
t˝_pcb
 *
çcb
 = 
cs
->
pcb
.
t˝
;

14427 i‡(
ªmŸe
) {

14428 
ß
->
sö
.
sö_p‹t
 = 
	`ht⁄s
(
çcb
->
ªmŸe_p‹t
);

14429 
	`SET_ADDR
(
ß
, &
çcb
->
ªmŸe_ù
);

14431 
ß
->
sö
.
sö_p‹t
 = 
	`ht⁄s
(
çcb
->
loˇl_p‹t
);

14432 
	`SET_ADDR
(
ß
, &
çcb
->
loˇl_ù
);

14435 
	}
}

14437 
	$mg_lwù_if_sock_£t
(
mg_c⁄√˘i⁄
 *
nc
, 
sock_t
 
sock
) {

14438 
nc
->
sock
 = sock;

14439 
	}
}

14442 
	#MG_LWIP_IFACE_VTABLE
 \

14444 
mg_lwù_if_öô
, \

14445 
mg_lwù_if_‰ì
, \

14446 
mg_lwù_if_add_c⁄n
, \

14447 
mg_lwù_if_ªmove_c⁄n
, \

14448 
mg_lwù_if_pﬁl
, \

14449 
mg_lwù_if_li°í_t˝
, \

14450 
mg_lwù_if_li°í_udp
, \

14451 
mg_lwù_if_c⁄√˘_t˝
, \

14452 
mg_lwù_if_c⁄√˘_udp
, \

14453 
mg_lwù_if_t˝_£nd
, \

14454 
mg_lwù_if_udp_£nd
, \

14455 
mg_lwù_if_ªcved
, \

14456 
mg_lwù_if_¸óã_c⁄n
, \

14457 
mg_lwù_if_de°roy_c⁄n
, \

14458 
mg_lwù_if_sock_£t
, \

14459 
mg_lwù_if_gë_c⁄n_addr
, \

14460 }

	)

14463 
mg_iÁ˚_vèbÀ
 
	gmg_lwù_iÁ˚_vèbÀ
 = 
MG_LWIP_IFACE_VTABLE
;

14464 #i‡
MG_NET_IF
 =
MG_NET_IF_LWIP_LOW_LEVEL


14465 
mg_iÁ˚_vèbÀ
 
	gmg_deÁu…_iÁ˚_vèbÀ
 = 
MG_LWIP_IFACE_VTABLE
;

14469 #ifde‡
MG_MODULE_LINES


14477 #i‡
MG_NET_IF
 =
MG_NET_IF_LWIP_LOW_LEVEL


14479 #i‚de‡
MG_SIG_QUEUE_LEN


14480 
	#MG_SIG_QUEUE_LEN
 32

	)

14483 
	smg_ev_mgr_lwù_sig«l
 {

14484 
	msig
;

14485 
mg_c⁄√˘i⁄
 *
	mnc
;

14488 
	smg_ev_mgr_lwù_d©a
 {

14489 
mg_ev_mgr_lwù_sig«l
 
	msig_queue
[
MG_SIG_QUEUE_LEN
];

14490 
	msig_queue_Àn
;

14491 
	m°¨t_ödex
;

14494 
	$mg_lwù_po°_sig«l
(
mg_sig_ty≥
 
sig
, 
mg_c⁄√˘i⁄
 *
nc
) {

14495 
mg_ev_mgr_lwù_d©a
 *
md
 =

14496 (
mg_ev_mgr_lwù_d©a
 *Ë
nc
->
iÁ˚
->
d©a
;

14497 
	`mgos_lock
();

14498 i‡(
md
->
sig_queue_Àn
 >
MG_SIG_QUEUE_LEN
) {

14499 
	`mgos_u∆ock
();

14502 
íd_ödex
 = (
md
->
°¨t_ödex
 + md->
sig_queue_Àn
Ë% 
MG_SIG_QUEUE_LEN
;

14503 
md
->
sig_queue
[
íd_ödex
].
sig
 = sig;

14504 
md
->
sig_queue
[
íd_ödex
].
nc
 =Çc;

14505 
md
->
sig_queue_Àn
++;

14506 
	`mg_lwù_mgr_scheduÀ_pﬁl
(
nc
->
mgr
);

14507 
	`mgos_u∆ock
();

14508 
	}
}

14510 
	$mg_ev_mgr_lwù_¥o˚ss_sig«ls
(
mg_mgr
 *
mgr
) {

14511 
mg_ev_mgr_lwù_d©a
 *
md
 =

14512 (
mg_ev_mgr_lwù_d©a
 *Ë
mgr
->
iÁ˚s
[
MG_MAIN_IFACE
]->
d©a
;

14513 
md
->
sig_queue_Àn
 > 0) {

14514 
	`mgos_lock
();

14515 
sig
 = 
md
->
sig_queue
[md->
°¨t_ödex
].sig;

14516 
mg_c⁄√˘i⁄
 *
nc
 = 
md
->
sig_queue
[md->
°¨t_ödex
].nc;

14517 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14518 
md
->
°¨t_ödex
 = (md->°¨t_ödex + 1Ë% 
MG_SIG_QUEUE_LEN
;

14519 
md
->
sig_queue_Àn
--;

14520 
	`mgos_u∆ock
();

14521 i‡(
nc
->
iÁ˚
 =
NULL
 ||Çc->
mgr
 == NULL) ;

14522 
sig
) {

14523 
MG_SIG_CONNECT_RESULT
: {

14524 #i‡
MG_ENABLE_SSL


14525 i‡(
cs
->
îr
 =0 && (
nc
->
Êags
 & 
MG_F_SSL
) &&

14526 !(
nc
->
Êags
 & 
MG_F_SSL_HANDSHAKE_DONE
)) {

14527 
	`mg_lwù_s¶_do_hs
(
nc
);

14531 
	`mg_if_c⁄√˘_cb
(
nc
, 
cs
->
îr
);

14535 
MG_SIG_CLOSE_CONN
: {

14536 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

14537 
	`mg_˛o£_c⁄n
(
nc
);

14540 
MG_SIG_RECV
: {

14541 
cs
->
ªcv_≥ndög
 = 0;

14542 i‡(
nc
->
Êags
 & 
MG_F_UDP
) {

14543 
	`mg_lwù_h™dÀ_ªcv_udp
(
nc
);

14545 
	`mg_lwù_h™dÀ_ªcv_t˝
(
nc
);

14549 
MG_SIG_SENT_CB
: {

14550 i‡(
cs
->
num_£¡
 > 0Ë
	`mg_if_£¡_cb
(
nc
, cs->num_sent);

14551 
cs
->
num_£¡
 = 0;

14553 i‡(
nc
->
£nd_mbuf
.
Àn
 =0 && (nc->
Êags
 & 
MG_F_SEND_AND_CLOSE
) &&

14554 !(
nc
->
Êags
 & 
MG_F_WANT_WRITE
)) {

14555 
	`mg_˛o£_c⁄n
(
nc
);

14560 
MG_SIG_TOMBSTONE
: {

14563 
MG_SIG_ACCEPT
: {

14564 
	`mg_lwù_h™dÀ_ac˚±
(
nc
);

14569 
	}
}

14571 
	$mg_lwù_if_öô
(
mg_iÁ˚
 *
iÁ˚
) {

14572 
	`LOG
(
LL_INFO
, ("%p Mongoose init"));

14573 
iÁ˚
->
d©a
 = 
	`MG_CALLOC
(1, (
mg_ev_mgr_lwù_d©a
));

14574 
	}
}

14576 
	$mg_lwù_if_‰ì
(
mg_iÁ˚
 *
iÁ˚
) {

14577 
	`MG_FREE
(
iÁ˚
->
d©a
);

14578 
iÁ˚
->
d©a
 = 
NULL
;

14579 
	}
}

14581 
	$mg_lwù_if_add_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

14582 (Ë
nc
;

14583 
	}
}

14585 
	$mg_lwù_if_ªmove_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

14586 
mg_ev_mgr_lwù_d©a
 *
md
 =

14587 (
mg_ev_mgr_lwù_d©a
 *Ë
nc
->
iÁ˚
->
d©a
;

14589 
i
 = 0; i < 
MG_SIG_QUEUE_LEN
; i++) {

14590 i‡(
md
->
sig_queue
[
i
].
nc
 ==Çc) {

14591 
md
->
sig_queue
[
i
].
sig
 = 
MG_SIG_TOMBSTONE
;

14594 
	}
}

14596 
time_t
 
	$mg_lwù_if_pﬁl
(
mg_iÁ˚
 *
iÁ˚
, 
timeout_ms
) {

14597 
mg_mgr
 *
mgr
 = 
iÁ˚
->mgr;

14598 
n
 = 0;

14599 
now
 = 
	`mg_time
();

14600 
mg_c⁄√˘i⁄
 *
nc
, *
tmp
;

14601 
mö_timî
 = 0;

14602 
num_timîs
 = 0;

14604 
	`DBG
(("begöÖﬁ»@%u", (Ë(
now
 * 1000)));

14606 
	`mg_ev_mgr_lwù_¥o˚ss_sig«ls
(
mgr
);

14607 
nc
 = 
mgr
->
a˘ive_c⁄√˘i⁄s
;Ç¯!
NULL
;Ç¯
tmp
) {

14608 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14609 
tmp
 = 
nc
->
√xt
;

14610 
n
++;

14611 i‡((
nc
->
Êags
 & 
MG_F_CLOSE_IMMEDIATELY
) ||

14612 ((
nc
->
Êags
 & 
MG_F_SEND_AND_CLOSE
Ë&& (nc->Êag†& 
MG_F_UDP
) &&

14613 (
nc
->
£nd_mbuf
.
Àn
 == 0))) {

14614 
	`mg_˛o£_c⁄n
(
nc
);

14617 
	`mg_if_pﬁl
(
nc
, 
now
);

14618 
	`mg_if_timî
(
nc
, 
now
);

14619 #i‡
MG_ENABLE_SSL


14620 i‡((
nc
->
Êags
 & 
MG_F_SSL
Ë&& 
cs
 !
NULL
 && cs->
pcb
.
t˝
 != NULL &&

14621 
cs
->
pcb
.
t˝
->
°©e
 =
ESTABLISHED
) {

14622 i‡(((
nc
->
Êags
 & 
MG_F_WANT_WRITE
) ||

14623 ((
nc
->
£nd_mbuf
.
Àn
 > 0) &&

14624 (
nc
->
Êags
 & 
MG_F_SSL_HANDSHAKE_DONE
))) &&

14625 
cs
->
pcb
.
t˝
->
¢d_buf
 > 0) {

14627 i‡(
nc
->
Êags
 & 
MG_F_SSL_HANDSHAKE_DONE
) {

14628 i‡(!(
nc
->
Êags
 & 
MG_F_CONNECTING
)Ë
	`mg_lwù_s¶_£nd
(nc);

14630 
	`mg_lwù_s¶_do_hs
(
nc
);

14633 i‡(
cs
->
rx_chaö
 !
NULL
 || (
nc
->
Êags
 & 
MG_F_WANT_READ
)) {

14634 i‡(
nc
->
Êags
 & 
MG_F_SSL_HANDSHAKE_DONE
) {

14635 i‡(!(
nc
->
Êags
 & 
MG_F_CONNECTING
)Ë
	`mg_lwù_s¶_ªcv
(nc);

14637 
	`mg_lwù_s¶_do_hs
(
nc
);

14643 i‡(!(
nc
->
Êags
 & (
MG_F_CONNECTING
 | 
MG_F_UDP
))) {

14644 i‡(
nc
->
£nd_mbuf
.
Àn
 > 0Ë
	`mg_lwù_£nd_m‹e
(nc);

14647 i‡(
nc
->
sock
 !
INVALID_SOCKET
 &&

14648 !(
nc
->
Êags
 & (
MG_F_UDP
 | 
MG_F_LISTENING
)Ë&& 
cs
->
pcb
.
t˝
 !
NULL
 &&

14649 
cs
->
pcb
.
t˝
->
un£¡
 !
NULL
) {

14650 
	`t˝_ouçut
(
cs
->
pcb
.
t˝
);

14652 i‡(
nc
->
ev_timî_time
 > 0) {

14653 i‡(
num_timîs
 =0 || 
nc
->
ev_timî_time
 < 
mö_timî
) {

14654 
mö_timî
 = 
nc
->
ev_timî_time
;

14656 
num_timîs
++;

14660 
	`DBG
(("endÖoll @%u, %d conns, %dÅimers (min %u),Çext in %d ms",

14661 (Ë(
now
 * 1000), 
n
, 
num_timîs
,

14662 (Ë(
mö_timî
 * 1000), 
timeout_ms
));

14664 (Ë
timeout_ms
;

14665  
now
;

14666 
	}
}

14668 
uöt32_t
 
	$mg_lwù_gë_pﬁl_dñay_ms
(
mg_mgr
 *
mgr
) {

14669 
mg_c⁄√˘i⁄
 *
nc
;

14670 
now
 = 
	`mg_time
();

14671 
mö_timî
 = 0;

14672 
num_timîs
 = 0;

14673 
	`mg_ev_mgr_lwù_¥o˚ss_sig«ls
(
mgr
);

14674 
nc
 = 
	`mg_√xt
(
mgr
, 
NULL
);Çc != NULL;Çc = mg_next(mgr,Çc)) {

14675 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14676 i‡(
nc
->
ev_timî_time
 > 0) {

14677 i‡(
num_timîs
 =0 || 
nc
->
ev_timî_time
 < 
mö_timî
) {

14678 
mö_timî
 = 
nc
->
ev_timî_time
;

14680 
num_timîs
++;

14682 i‡(
nc
->
£nd_mbuf
.
Àn
 > 0) {

14683 
ˇn_£nd
 = 0;

14685 i‡(
nc
->
Êags
 & 
MG_F_UDP
) {

14687 
ˇn_£nd
 = (
cs
->
pcb
.
udp
 !
NULL
);

14689 
ˇn_£nd
 = (
cs
->
pcb
.
t˝
 !
NULL
 && cs->pcb.t˝->
¢d_buf
 > 0);

14692 i‡(
ˇn_£nd
)  0;

14695 
uöt32_t
 
timeout_ms
 = ~0;

14696 i‡(
num_timîs
 > 0) {

14697 
timî_timeout_ms
 = (
mö_timî
 - 
now
) * 1000 + 1 ;

14698 i‡(
timî_timeout_ms
 < 
timeout_ms
) {

14699 
timeout_ms
 = 
timî_timeout_ms
;

14702  
timeout_ms
;

14703 
	}
}

14706 #ifde‡
MG_MODULE_LINES


14714 #i‡
MG_ENABLE_SSL
 && 
MG_NET_IF
 =
MG_NET_IF_LWIP_LOW_LEVEL


14718 
	~<lwù/pbuf.h
>

14719 
	~<lwù/t˝.h
>

14721 #i‚de‡
MG_LWIP_SSL_IO_SIZE


14722 
	#MG_LWIP_SSL_IO_SIZE
 1024

	)

14729 #i‚de‡
MG_LWIP_SSL_RECV_MBUF_LIMIT


14730 
	#MG_LWIP_SSL_RECV_MBUF_LIMIT
 3072

	)

14733 #i‚de‡
MIN


14734 
	#MIN
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

14737 
	$mg_lwù_s¶_do_hs
(
mg_c⁄√˘i⁄
 *
nc
) {

14738 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14739 
£rvî_side
 = (
nc
->
li°íî
 !
NULL
);

14740 
mg_s¶_if_ªsu…
 
ªs
;

14741 i‡(
nc
->
Êags
 & 
MG_F_CLOSE_IMMEDIATELY
) ;

14742 
ªs
 = 
	`mg_s¶_if_h™dshake
(
nc
);

14743 
	`DBG
(("%∞%d %d %d", 
nc
,Çc->
Êags
, 
£rvî_side
, 
ªs
));

14744 i‡(
ªs
 !
MG_SSL_OK
) {

14745 i‡(
ªs
 =
MG_SSL_WANT_WRITE
) {

14746 
nc
->
Êags
 |
MG_F_WANT_WRITE
;

14747 
cs
->
îr
 = 0;

14748 } i‡(
ªs
 =
MG_SSL_WANT_READ
) {

14753 
nc
->
Êags
 &~
MG_F_WANT_READ
;

14754 
cs
->
îr
 = 0;

14756 
cs
->
îr
 = 
ªs
;

14757 i‡(
£rvî_side
) {

14758 
	`mg_lwù_po°_sig«l
(
MG_SIG_CLOSE_CONN
, 
nc
);

14760 
	`mg_lwù_po°_sig«l
(
MG_SIG_CONNECT_RESULT
, 
nc
);

14764 
cs
->
îr
 = 0;

14765 
nc
->
Êags
 &~
MG_F_WANT_WRITE
;

14770 
nc
->
Êags
 |(
MG_F_SSL_HANDSHAKE_DONE
 | 
MG_F_WANT_READ
);

14771 i‡(
£rvî_side
) {

14772 
	`mg_lwù_ac˚±_c⁄n
(
nc
, 
cs
->
pcb
.
t˝
);

14774 
	`mg_lwù_po°_sig«l
(
MG_SIG_CONNECT_RESULT
, 
nc
);

14777 
	}
}

14779 
	$mg_lwù_s¶_£nd
(
mg_c⁄√˘i⁄
 *
nc
) {

14780 i‡(
nc
->
sock
 =
INVALID_SOCKET
) {

14781 
	`DBG
(("%∞övÆid sockë", 
nc
));

14784 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14786 
Àn
 = 
cs
->
œ°_s¶_wrôe_size
;

14787 i‡(
Àn
 == 0) {

14788 
Àn
 = 
	`MIN
(
MG_LWIP_SSL_IO_SIZE
, 
nc
->
£nd_mbuf
.len);

14790 
ªt
 = 
	`mg_s¶_if_wrôe
(
nc
,Çc->
£nd_mbuf
.
buf
, 
Àn
);

14791 
	`DBG
(("%∞SSL_wrôê%u = %d, %d", 
nc
, 
Àn
, 
ªt
));

14792 i‡(
ªt
 > 0) {

14793 
	`mbuf_ªmove
(&
nc
->
£nd_mbuf
, 
ªt
);

14794 
	`mbuf_åim
(&
nc
->
£nd_mbuf
);

14795 
cs
->
œ°_s¶_wrôe_size
 = 0;

14796 } i‡(
ªt
 < 0) {

14799 
cs
->
œ°_s¶_wrôe_size
 = 
Àn
;

14801 i‡(
ªt
 =
Àn
) {

14802 
nc
->
Êags
 &~
MG_F_WANT_WRITE
;

14803 } i‡(
ªt
 =
MG_SSL_WANT_WRITE
) {

14804 
nc
->
Êags
 |
MG_F_WANT_WRITE
;

14806 
	`mg_lwù_po°_sig«l
(
MG_SIG_CLOSE_CONN
, 
nc
);

14808 
	}
}

14810 
	$mg_lwù_s¶_ªcv
(
mg_c⁄√˘i⁄
 *
nc
) {

14811 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14813 i‡(
nc
->
Êags
 & 
MG_F_CONNECTING
) ;

14814 
nc
->
ªcv_mbuf
.
Àn
 < 
MG_LWIP_SSL_RECV_MBUF_LIMIT
) {

14815 *
buf
 = (*Ë
	`mÆloc
(
MG_LWIP_SSL_IO_SIZE
);

14816 i‡(
buf
 =
NULL
) ;

14817 
ªt
 = 
	`mg_s¶_if_ªad
(
nc
, 
buf
, 
MG_LWIP_SSL_IO_SIZE
);

14818 
	`DBG
(("%∞%∞SSL_ªad %u = %d", 
nc
, 
cs
->
rx_chaö
, 
MG_LWIP_SSL_IO_SIZE
, 
ªt
));

14819 i‡(
ªt
 <= 0) {

14820 
	`‰ì
(
buf
);

14821 i‡(
ªt
 =
MG_SSL_WANT_WRITE
) {

14822 
nc
->
Êags
 |
MG_F_WANT_WRITE
;

14824 } i‡(
ªt
 =
MG_SSL_WANT_READ
) {

14829 
nc
->
Êags
 &~
MG_F_WANT_READ
;

14830 
cs
->
îr
 = 0;

14833 
	`mg_lwù_po°_sig«l
(
MG_SIG_CLOSE_CONN
, 
nc
);

14837 
	`mg_if_ªcv_t˝_cb
(
nc
, 
buf
, 
ªt
, 1 );

14840 
	}
}

14842 #ifde‡
KR_VERSION


14844 
ssize_t
 
	$kr_£nd
(
fd
, c⁄° *
buf
, 
size_t
 
Àn
) {

14845 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
fd
;

14846 
ªt
 = 
	`mg_lwù_t˝_wrôe
(
cs
->
nc
, 
buf
, 
Àn
);

14847 
	`DBG
(("%∞mg_lwù_t˝_wrôê%u = %d", 
cs
->
nc
, 
Àn
, 
ªt
));

14848 i‡(
ªt
 =0Ëªà
KR_IO_WOULDBLOCK
;

14849  
ªt
;

14850 
	}
}

14852 
ssize_t
 
	$kr_ªcv
(
fd
, *
buf
, 
size_t
 
Àn
) {

14853 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
fd
;

14854 
pbuf
 *
£g
 = 
cs
->
rx_chaö
;

14855 i‡(
£g
 =
NULL
) {

14856 
	`DBG
(("%u -ÇŸhögÅÿªad", 
Àn
));

14857  
KR_IO_WOULDBLOCK
;

14859 
size_t
 
£g_Àn
 = (
£g
->
Àn
 - 
cs
->
rx_off£t
);

14860 
	`DBG
(("%u %u %u %u", 
Àn
, 
cs
->
rx_chaö
->Àn, 
£g_Àn
, cs->rx_chaö->
tŸ_Àn
));

14861 
Àn
 = 
	`MIN
÷í, 
£g_Àn
);

14862 
	`pbuf_c›y_∑πül
(
£g
, 
buf
, 
Àn
, 
cs
->
rx_off£t
);

14863 
cs
->
rx_off£t
 +
Àn
;

14864 
	`t˝_ªcved
(
cs
->
pcb
.
t˝
, 
Àn
);

14865 i‡(
cs
->
rx_off£t
 =cs->
rx_chaö
->
Àn
) {

14866 
cs
->
rx_chaö
 = 
	`pbuf_dechaö
(cs->rx_chain);

14867 
	`pbuf_‰ì
(
£g
);

14868 
cs
->
rx_off£t
 = 0;

14870  
Àn
;

14871 
	}
}

14873 #ñi‡
MG_SSL_IF
 =
MG_SSL_IF_MBEDTLS


14875 
	$s¶_sockë_£nd
(*
˘x
, c⁄° *
buf
, 
size_t
 
Àn
) {

14876 
mg_c⁄√˘i⁄
 *
nc
 = (mg_c⁄√˘i⁄ *Ë
˘x
;

14877 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14878 
ªt
 = 
	`mg_lwù_t˝_wrôe
(
cs
->
nc
, 
buf
, 
Àn
);

14879 
	`LOG
(
LL_DEBUG
, ("%∞%d -> %d", 
nc
, 
Àn
, 
ªt
));

14880 i‡(
ªt
 =0Ëªà
MBEDTLS_ERR_SSL_WANT_WRITE
;

14881  
ªt
;

14882 
	}
}

14884 
	$s¶_sockë_ªcv
(*
˘x
, *
buf
, 
size_t
 
Àn
) {

14885 
mg_c⁄√˘i⁄
 *
nc
 = (mg_c⁄√˘i⁄ *Ë
˘x
;

14886 
mg_lwù_c⁄n_°©e
 *
cs
 = (mg_lwù_c⁄n_°©ê*Ë
nc
->
sock
;

14887 
pbuf
 *
£g
 = 
cs
->
rx_chaö
;

14888 i‡(
£g
 =
NULL
) {

14889 
	`DBG
(("%u -ÇŸhögÅÿªad", 
Àn
));

14890  
MBEDTLS_ERR_SSL_WANT_READ
;

14892 
size_t
 
£g_Àn
 = (
£g
->
Àn
 - 
cs
->
rx_off£t
);

14893 
	`DBG
(("%u %u %u %u", 
Àn
, 
cs
->
rx_chaö
->Àn, 
£g_Àn
, cs->rx_chaö->
tŸ_Àn
));

14894 
Àn
 = 
	`MIN
÷í, 
£g_Àn
);

14895 
	`pbuf_c›y_∑πül
(
£g
, 
buf
, 
Àn
, 
cs
->
rx_off£t
);

14896 
cs
->
rx_off£t
 +
Àn
;

14899 i‡(
cs
->
pcb
.
t˝
 !
NULL
Ë
	`t˝_ªcved
(cs->pcb.t˝, 
Àn
);

14900 i‡(
cs
->
rx_off£t
 =cs->
rx_chaö
->
Àn
) {

14901 
cs
->
rx_chaö
 = 
	`pbuf_dechaö
(cs->rx_chain);

14902 
	`pbuf_‰ì
(
£g
);

14903 
cs
->
rx_off£t
 = 0;

14905 
	`LOG
(
LL_DEBUG
, ("%∞<- %d", 
nc
, (Ë
Àn
));

14906  
Àn
;

14907 
	}
}

14912 #ifde‡
MG_MODULE_LINES


14920 #ifde‡
WINCE


14922 c⁄° *
	$°ªº‹
(
îr
) {

14927 
buf
[10];

14928 
	`¢¥ötf
(
buf
, (buf), "%d", 
îr
);

14929  
buf
;

14930 
	}
}

14932 
	$›í
(c⁄° *
fûíame
, 
oÊag
, 
pmode
) {

14938 
	`DebugBªak
();

14940 
	}
}

14942 
	$_w°©i64
(c⁄° 
wch¨_t
 *
∑th
, 
cs_°©_t
 *
°
) {

14943 
DWORD
 
Á
 = 
	`GëFûeAâribuãsW
(
∑th
);

14944 i‡(
Á
 =
INVALID_FILE_ATTRIBUTES
) {

14947 
	`mem£t
(
°
, 0, (*st));

14948 i‡((
Á
 & 
FILE_ATTRIBUTE_DIRECTORY
) == 0) {

14949 
HANDLE
 
h
;

14950 
FILETIME
 
·ime
;

14951 
°
->
°_mode
 |
_S_IFREG
;

14952 
h
 = 
	`Cª©eFûeW
(
∑th
, 
GENERIC_READ
, 0, 
NULL
, 
OPEN_EXISTING
,

14953 
FILE_ATTRIBUTE_NORMAL
, 
NULL
);

14954 i‡(
h
 =
INVALID_HANDLE_VALUE
) {

14957 
°
->
°_size
 = 
	`GëFûeSize
(
h
, 
NULL
);

14958 
	`GëFûeTime
(
h
, 
NULL
, NULL, &
·ime
);

14959 
°
->
°_mtime
 = (
uöt32_t
)((((
uöt64_t
Ë
·ime
.
dwLowD©eTime
 +

14960 ((
uöt64_t
Ë
·ime
.
dwHighD©eTime
 << 32)) /

14963 
	`Clo£H™dÀ
(
h
);

14965 
°
->
°_mode
 |
_S_IFDIR
;

14968 
	}
}

14971 
	$mg_gmt_time_°rög
(*
buf
, 
size_t
 
buf_Àn
, 
time_t
 *
t
) {

14972 
FILETIME
 
·
;

14973 
SYSTEMTIME
 
sy°ime
;

14974 i‡(
t
 !
NULL
) {

14975 
uöt64_t
 
fûëime
 = (*
t
 + 11644473600) * 10000000;

14976 
·
.
dwLowD©eTime
 = 
fûëime
 & 0xFFFFFFFF;

14977 
·
.
dwHighD©eTime
 = (
fûëime
 & 0xFFFFFFFF00000000) >> 32;

14978 
	`FûeTimeToSy°emTime
(&
·
, &
sy°ime
);

14980 
	`GëSy°emTime
(&
sy°ime
);

14983 
	`¢¥ötf
(
buf
, 
buf_Àn
, "%d.%d.%d %d:%d:%d GMT", (Ë
sy°ime
.
wYór
,

14984 (Ë
sy°ime
.
wM⁄th
, (Ësy°ime.
wDay
, (Ësy°ime.
wHour
,

14985 (Ë
sy°ime
.
wMöuã
, (Ësy°ime.
wSec⁄d
);

14986 
	}
}

14989 #ifde‡
MG_MODULE_LINES


14997 #i‚de‡
CS_COMMON_PLATFORMS_PIC32_NET_IF_H_


14998 
	#CS_COMMON_PLATFORMS_PIC32_NET_IF_H_


	)

15002 #ifde‡
__˝lu•lus


15006 #i‚de‡
MG_ENABLE_NET_IF_PIC32


15007 
	#MG_ENABLE_NET_IF_PIC32
 
MG_NET_IF
 =
MG_NET_IF_PIC32


	)

15010 
mg_iÁ˚_vèbÀ
 
mg_pic32_iÁ˚_vèbÀ
;

15012 #ifde‡
__˝lu•lus


15017 #ifde‡
MG_MODULE_LINES


15025 #i‡
MG_ENABLE_NET_IF_PIC32


15027 
	$mg_pic32_if_¸óã_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

15028 (Ë
nc
;

15030 
	}
}

15032 
	$mg_pic32_if_ªcved
(
mg_c⁄√˘i⁄
 *
nc
, 
size_t
 
Àn
) {

15033 (Ë
nc
;

15034 (Ë
Àn
;

15035 
	}
}

15037 
	$mg_pic32_if_add_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

15038 (Ë
nc
;

15039 
	}
}

15041 
	$mg_pic32_if_öô
(
mg_iÁ˚
 *
iÁ˚
) {

15042 (Ë
iÁ˚
;

15043 (Ë
	`mg_gë_î∫o
();

15044 
	}
}

15046 
	$mg_pic32_if_‰ì
(
mg_iÁ˚
 *
iÁ˚
) {

15047 (Ë
iÁ˚
;

15048 
	}
}

15050 
	$mg_pic32_if_ªmove_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

15051 (Ë
nc
;

15052 
	}
}

15054 
	$mg_pic32_if_de°roy_c⁄n
(
mg_c⁄√˘i⁄
 *
nc
) {

15055 i‡(
nc
->
sock
 =
INVALID_SOCKET
) ;

15057 i‡(!(
nc
->
Êags
 & 
MG_F_UDP
)) {

15059 
	`TCPIP_TCP_Clo£
((
TCP_SOCKET
Ë
nc
->
sock
);

15060 } i‡(
nc
->
li°íî
 =
NULL
) {

15062 
	`TCPIP_UDP_Clo£
((
UDP_SOCKET
Ë
nc
->
sock
);

15065 
nc
->
sock
 = 
INVALID_SOCKET
;

15066 
	}
}

15068 
	$mg_pic32_if_li°í_udp
(
mg_c⁄√˘i⁄
 *
nc
, 
sockë_addªss
 *
ß
) {

15069 
nc
->
sock
 = 
	`TCPIP_UDP_SîvîO≥n
(

15070 
ß
->
sö
.
sö_Ámûy
 =
AF_INET
 ? 
IP_ADDRESS_TYPE_IPV4


15071 : 
IP_ADDRESS_TYPE_IPV6
,

15072 
	`¡ohs
(
ß
->
sö
.
sö_p‹t
),

15073 
ß
->
sö
.
sö_addr
.
s_addr
 =0 ? 0 : (
IP_MULTI_ADDRESS
 *) &sa->sin);

15074 i‡(
nc
->
sock
 =
INVALID_SOCKET
) {

15078 
	}
}

15080 
	$mg_pic32_if_udp_£nd
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
buf
,

15081 
size_t
 
Àn
) {

15082 
	`mbuf_≠≥nd
(&
nc
->
£nd_mbuf
, 
buf
, 
Àn
);

15083 
	}
}

15085 
	$mg_pic32_if_t˝_£nd
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
buf
,

15086 
size_t
 
Àn
) {

15087 
	`mbuf_≠≥nd
(&
nc
->
£nd_mbuf
, 
buf
, 
Àn
);

15088 
	}
}

15090 
	$mg_pic32_if_li°í_t˝
(
mg_c⁄√˘i⁄
 *
nc
, 
sockë_addªss
 *
ß
) {

15091 
nc
->
sock
 = 
	`TCPIP_TCP_SîvîO≥n
(

15092 
ß
->
sö
.
sö_Ámûy
 =
AF_INET
 ? 
IP_ADDRESS_TYPE_IPV4


15093 : 
IP_ADDRESS_TYPE_IPV6
,

15094 
	`¡ohs
(
ß
->
sö
.
sö_p‹t
),

15095 
ß
->
sö
.
sö_addr
.
s_addr
 =0 ? 0 : (
IP_MULTI_ADDRESS
 *) &sa->sin);

15096 
	`mem˝y
(&
nc
->
ß
, sa, (*sa));

15097 i‡(
nc
->
sock
 =
INVALID_SOCKET
) {

15101 
	}
}

15103 
	$mg_ac˚±_c⁄n
(
mg_c⁄√˘i⁄
 *
lc
) {

15104 
mg_c⁄√˘i⁄
 *
nc
;

15105 
TCP_SOCKET_INFO
 
si
;

15106 
sockë_addªss
 
ß
;

15108 
nc
 = 
	`mg_if_ac˚±_√w_c⁄n
(
lc
);

15110 i‡(
nc
 =
NULL
) {

15114 
nc
->
sock
 = 
lc
->sock;

15115 
nc
->
Êags
 &~
MG_F_LISTENING
;

15117 i‡(!
	`TCPIP_TCP_SockëInfoGë
((
TCP_SOCKET
Ë
nc
->
sock
, &
si
)) {

15121 i‡(
si
.
addªssTy≥
 =
IP_ADDRESS_TYPE_IPV4
) {

15122 
ß
.
sö
.
sö_Ámûy
 = 
AF_INET
;

15123 
ß
.
sö
.
sö_p‹t
 = 
	`ht⁄s
(
si
.
ªmŸeP‹t
);

15124 
ß
.
sö
.
sö_addr
.
s_addr
 = 
si
.
ªmŸeIPaddªss
.
v4Add
.
VÆ
;

15127 
	`mem£t
(&
ß
, 0, (sa));

15130 
	`mg_if_ac˚±_t˝_cb
(
nc
, (
sockë_addªss
 *Ë&
ß
, (sa));

15132  
	`mg_pic32_if_li°í_t˝
(
lc
, &lc->
ß
) >= 0;

15133 
	}
}

15135 *
	$öë_¡ﬂ
(
ö_addr
 
ö
) {

15136 
addr
[17];

15137 
	`¢¥ötf
(
addr
, ◊ddr), "%d.%d.%d.%d", (Ë
ö
.
S_un
.
S_un_b
.
s_b1
,

15138 (Ë
ö
.
S_un
.
S_un_b
.
s_b2
, (Ëö.S_un.S_un_b.
s_b3
,

15139 (Ë
ö
.
S_un
.
S_un_b
.
s_b4
);

15140  
addr
;

15141 
	}
}

15143 
	$mg_h™dÀ_£nd
(
mg_c⁄√˘i⁄
 *
nc
) {

15144 
uöt16_t
 
byãs_wrôãn
 = 0;

15145 i‡(
nc
->
Êags
 & 
MG_F_UDP
) {

15146 i‡(!
	`TCPIP_UDP_RemŸeBöd
(

15147 (
UDP_SOCKET
Ë
nc
->
sock
,

15148 
nc
->
ß
.
sö
.
sö_Ámûy
 =
AF_INET
 ? 
IP_ADDRESS_TYPE_IPV4


15149 : 
IP_ADDRESS_TYPE_IPV6
,

15150 
	`¡ohs
(
nc
->
ß
.
sö
.
sö_p‹t
), (
IP_MULTI_ADDRESS
 *) &nc->sa.sin)) {

15151 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

15154 
byãs_wrôãn
 = 
	`TCPIP_UDP_TxPutIsRódy
((
UDP_SOCKET
Ë
nc
->
sock
, 0);

15155 i‡(
byãs_wrôãn
 >
nc
->
£nd_mbuf
.
Àn
) {

15156 i‡(
	`TCPIP_UDP_AºayPut
((
UDP_SOCKET
Ë
nc
->
sock
,

15157 (
uöt8_t
 *Ë
nc
->
£nd_mbuf
.
buf
,

15158 
nc
->
£nd_mbuf
.
Àn
) !=Çc->send_mbuf.len) {

15159 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

15160 
byãs_wrôãn
 = 0;

15164 
byãs_wrôãn
 = 
	`TCPIP_TCP_FifoTxFªeGë
((
TCP_SOCKET
Ë
nc
->
sock
);

15165 i‡(
byãs_wrôãn
 != 0) {

15166 i‡(
byãs_wrôãn
 > 
nc
->
£nd_mbuf
.
Àn
) {

15167 
byãs_wrôãn
 = 
nc
->
£nd_mbuf
.
Àn
;

15169 i‡(
	`TCPIP_TCP_AºayPut
((
TCP_SOCKET
Ë
nc
->
sock
,

15170 (
uöt8_t
 *Ë
nc
->
£nd_mbuf
.
buf
,

15171 
byãs_wrôãn
) != bytes_written) {

15172 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

15173 
byãs_wrôãn
 = 0;

15178 i‡(
byãs_wrôãn
 != 0) {

15179 
	`mbuf_ªmove
(&
nc
->
£nd_mbuf
, 
byãs_wrôãn
);

15180 
	`mg_if_£¡_cb
(
nc
, 
byãs_wrôãn
);

15182 
	}
}

15184 
	$mg_h™dÀ_ªcv
(
mg_c⁄√˘i⁄
 *
nc
) {

15185 
uöt16_t
 
byãs_ªad
 = 0;

15186 
uöt8_t
 *
buf
 = 
NULL
;

15187 i‡(
nc
->
Êags
 & 
MG_F_UDP
) {

15188 
byãs_ªad
 = 
	`TCPIP_UDP_GëIsRódy
((
UDP_SOCKET
Ë
nc
->
sock
);

15189 i‡(
byãs_ªad
 != 0 &&

15190 (
nc
->
ªcv_mbuf_limô
 == -1 ||

15191 
nc
->
ªcv_mbuf
.
Àn
 + 
byãs_ªad
 <Çc->
ªcv_mbuf_limô
)) {

15192 
buf
 = (
uöt8_t
 *Ë
	`MG_MALLOC
(
byãs_ªad
);

15193 i‡(
	`TCPIP_UDP_AºayGë
((
UDP_SOCKET
Ë
nc
->
sock
, 
buf
, 
byãs_ªad
) !=

15194 
byãs_ªad
) {

15195 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

15196 
byãs_ªad
 = 0;

15197 
	`MG_FREE
(
buf
);

15201 
byãs_ªad
 = 
	`TCPIP_TCP_GëIsRódy
((
TCP_SOCKET
Ë
nc
->
sock
);

15202 i‡(
byãs_ªad
 != 0) {

15203 i‡(
nc
->
ªcv_mbuf_limô
 != -1 &&

15204 
nc
->
ªcv_mbuf_limô
 -Çc->
ªcv_mbuf
.
Àn
 > 
byãs_ªad
) {

15205 
byãs_ªad
 = 
nc
->
ªcv_mbuf_limô
 -Çc->
ªcv_mbuf
.
Àn
;

15207 
buf
 = (
uöt8_t
 *Ë
	`MG_MALLOC
(
byãs_ªad
);

15208 i‡(
	`TCPIP_TCP_AºayGë
((
TCP_SOCKET
Ë
nc
->
sock
, 
buf
, 
byãs_ªad
) !=

15209 
byãs_ªad
) {

15210 
nc
->
Êags
 |
MG_F_CLOSE_IMMEDIATELY
;

15211 
	`MG_FREE
(
buf
);

15212 
byãs_ªad
 = 0;

15217 i‡(
byãs_ªad
 != 0) {

15218 
	`mg_if_ªcv_t˝_cb
(
nc
, 
buf
, 
byãs_ªad
, 1 );

15220 
	}
}

15222 
time_t
 
	$mg_pic32_if_pﬁl
(
mg_iÁ˚
 *
iÁ˚
, 
timeout_ms
) {

15223 
mg_mgr
 *
mgr
 = 
iÁ˚
->mgr;

15224 
now
 = 
	`mg_time
();

15225 
mg_c⁄√˘i⁄
 *
nc
, *
tmp
;

15227 
nc
 = 
mgr
->
a˘ive_c⁄√˘i⁄s
;Ç¯!
NULL
;Ç¯
tmp
) {

15228 
tmp
 = 
nc
->
√xt
;

15230 i‡(
nc
->
Êags
 & 
MG_F_CONNECTING
) {

15232 i‡(
nc
->
Êags
 & 
MG_F_UDP
 ||

15233 
	`TCPIP_TCP_IsC⁄√˘ed
((
TCP_SOCKET
Ë
nc
->
sock
)) {

15234 
	`mg_if_c⁄√˘_cb
(
nc
, 0);

15236 } i‡(
nc
->
Êags
 & 
MG_F_LISTENING
) {

15237 i‡(
	`TCPIP_TCP_IsC⁄√˘ed
((
TCP_SOCKET
Ë
nc
->
sock
)) {

15239 
	`mg_ac˚±_c⁄n
(
nc
);

15242 i‡(
nc
->
£nd_mbuf
.
Àn
 != 0) {

15243 
	`mg_h™dÀ_£nd
(
nc
);

15246 i‡(
nc
->
ªcv_mbuf_limô
 == -1 ||

15247 
nc
->
ªcv_mbuf
.
Àn
 <Çc->
ªcv_mbuf_limô
) {

15248 
	`mg_h™dÀ_ªcv
(
nc
);

15253 
nc
 = 
mgr
->
a˘ive_c⁄√˘i⁄s
;Ç¯!
NULL
;Ç¯
tmp
) {

15254 
tmp
 = 
nc
->
√xt
;

15255 i‡((
nc
->
Êags
 & 
MG_F_CLOSE_IMMEDIATELY
) ||

15256 (
nc
->
£nd_mbuf
.
Àn
 =0 && (nc->
Êags
 & 
MG_F_SEND_AND_CLOSE
))) {

15257 
	`mg_˛o£_c⁄n
(
nc
);

15261  
now
;

15262 
	}
}

15264 
	$mg_pic32_if_sock_£t
(
mg_c⁄√˘i⁄
 *
nc
, 
sock_t
 
sock
) {

15265 
nc
->
sock
 = sock;

15266 
	}
}

15268 
	$mg_pic32_if_gë_c⁄n_addr
(
mg_c⁄√˘i⁄
 *
nc
, 
ªmŸe
,

15269 
sockë_addªss
 *
ß
) {

15271 
	}
}

15273 
	$mg_pic32_if_c⁄√˘_t˝
(
mg_c⁄√˘i⁄
 *
nc
,

15274 c⁄° 
sockë_addªss
 *
ß
) {

15275 
nc
->
sock
 = 
	`TCPIP_TCP_Clõ¡O≥n
(

15276 
ß
->
sö
.
sö_Ámûy
 =
AF_INET
 ? 
IP_ADDRESS_TYPE_IPV4


15277 : 
IP_ADDRESS_TYPE_IPV6
,

15278 
	`¡ohs
(
ß
->
sö
.
sö_p‹t
), (
IP_MULTI_ADDRESS
 *) &sa->sin);

15279 
nc
->
îr
 = (nc->
sock
 =
INVALID_SOCKET
) ? -1 : 0;

15280 
	}
}

15282 
	$mg_pic32_if_c⁄√˘_udp
(
mg_c⁄√˘i⁄
 *
nc
) {

15283 
nc
->
sock
 = 
	`TCPIP_UDP_Clõ¡O≥n
(
IP_ADDRESS_TYPE_ANY
, 0, 
NULL
);

15284 
nc
->
îr
 = (nc->
sock
 =
INVALID_SOCKET
) ? -1 : 0;

15285 
	}
}

15288 
	#MG_PIC32_IFACE_VTABLE
 \

15290 
mg_pic32_if_öô
, \

15291 
mg_pic32_if_‰ì
, \

15292 
mg_pic32_if_add_c⁄n
, \

15293 
mg_pic32_if_ªmove_c⁄n
, \

15294 
mg_pic32_if_pﬁl
, \

15295 
mg_pic32_if_li°í_t˝
, \

15296 
mg_pic32_if_li°í_udp
, \

15297 
mg_pic32_if_c⁄√˘_t˝
, \

15298 
mg_pic32_if_c⁄√˘_udp
, \

15299 
mg_pic32_if_t˝_£nd
, \

15300 
mg_pic32_if_udp_£nd
, \

15301 
mg_pic32_if_ªcved
, \

15302 
mg_pic32_if_¸óã_c⁄n
, \

15303 
mg_pic32_if_de°roy_c⁄n
, \

15304 
mg_pic32_if_sock_£t
, \

15305 
mg_pic32_if_gë_c⁄n_addr
, \

15306 }

	)

15309 
mg_iÁ˚_vèbÀ
 
	gmg_pic32_iÁ˚_vèbÀ
 = 
MG_PIC32_IFACE_VTABLE
;

15310 #i‡
MG_NET_IF
 =
MG_NET_IF_PIC32


15311 
mg_iÁ˚_vèbÀ
 
	gmg_deÁu…_iÁ˚_vèbÀ
 = 
MG_PIC32_IFACE_VTABLE
;

	@Enclave/mongoose.h

1 #ifde‡
MG_MODULE_LINES


5 
	#mÆloc
 
mymÆloc


	)

6 
	#ˇŒoc
 
myˇŒoc


	)

7 
	#ªÆloc
 
myªÆloc


	)

8 
	#‰ì
 
my‰ì


	)

11 
	#‰ód
 
‰ód__wøµî


	)

12 
	#f›í
 
f›í__wøµî


	)

13 
	#‰ód_¥iv©e
 
‰ód_¥iv©e__wøµî


	)

14 
	#f˛o£
 
f˛o£__wøµî


	)

35 #i‚de‡
CS_MONGOOSE_SRC_COMMON_H_


36 
	#CS_MONGOOSE_SRC_COMMON_H_


	)

38 
	#MG_VERSION
 "6.7"

	)

41 #ifde‡
MG_LOCALS


42 
	~<mg_loˇls.h
>

46 #ifde‡
MG_MODULE_LINES


49 #i‚de‡
CS_COMMON_PLATFORM_H_


50 
	#CS_COMMON_PLATFORM_H_


	)

56 
	#CS_P_CUSTOM
 0

	)

57 
	#CS_P_UNIX
 1

	)

58 
	#CS_P_WINDOWS
 2

	)

59 
	#CS_P_ESP32
 15

	)

60 
	#CS_P_ESP8266
 3

	)

61 
	#CS_P_CC3200
 4

	)

62 
	#CS_P_MSP432
 5

	)

63 
	#CS_P_CC3100
 6

	)

64 
	#CS_P_TM4C129
 14

	)

65 
	#CS_P_MBED
 7

	)

66 
	#CS_P_WINCE
 8

	)

67 
	#CS_P_NXP_LPC
 13

	)

68 
	#CS_P_NXP_KINETIS
 9

	)

69 
	#CS_P_NRF51
 12

	)

70 
	#CS_P_NRF52
 10

	)

71 
	#CS_P_PIC32
 11

	)

72 
	#CS_P_STM32
 16

	)

76 #i‚de‡
CS_PLATFORM


78 #i‡
deföed
(
TARGET_IS_MSP432P4XX
Ë|| deföed(
__MSP432P401R__
)

79 
	#CS_PLATFORM
 
CS_P_MSP432


	)

80 #ñi‡
deföed
(
cc3200
)

81 
	#CS_PLATFORM
 
CS_P_CC3200


	)

82 #ñi‡
deföed
(
__unix__
Ë|| deföed(
__APPLE__
)

83 
	#CS_PLATFORM
 
CS_P_UNIX


	)

84 #ñi‡
deföed
(
WINCE
)

85 
	#CS_PLATFORM
 
CS_P_WINCE


	)

86 #ñi‡
deföed
(
_WIN32
)

87 
	#CS_PLATFORM
 
CS_P_WINDOWS


	)

88 #ñi‡
deföed
(
__MBED__
)

89 
	#CS_PLATFORM
 
CS_P_MBED


	)

90 #ñi‡
deföed
(
__USE_LPCOPEN
)

91 
	#CS_PLATFORM
 
CS_P_NXP_LPC


	)

92 #ñi‡
deföed
(
FRDM_K64F
Ë|| deföed(
FREEDOM
)

93 
	#CS_PLATFORM
 
CS_P_NXP_KINETIS


	)

94 #ñi‡
deföed
(
PIC32
)

95 
	#CS_PLATFORM
 
CS_P_PIC32


	)

96 #ñi‡
deföed
(
ESP_PLATFORM
)

97 
	#CS_PLATFORM
 
CS_P_ESP32


	)

98 #ñi‡
deföed
(
ICACHE_FLASH
)

99 
	#CS_PLATFORM
 
CS_P_ESP8266


	)

100 #ñi‡
deföed
(
TARGET_IS_TM4C129_RA0
Ë|| deföed(
TARGET_IS_TM4C129_RA1
) || \

101 
	$deföed
(
TARGET_IS_TM4C129_RA2
)

102 
	#CS_PLATFORM
 
CS_P_TM4C129


	)

103 #ñi‡
	`deföed
(
STM32
)

104 
	#CS_PLATFORM
 
CS_P_STM32


	)

107 #i‚de‡
CS_PLATFORM


113 
	#MG_NET_IF_SOCKET
 1

	)

114 
	#MG_NET_IF_SIMPLELINK
 2

	)

115 
	#MG_NET_IF_LWIP_LOW_LEVEL
 3

	)

116 
	#MG_NET_IF_PIC32
 4

	)

118 
	#MG_SSL_IF_OPENSSL
 1

	)

119 
	#MG_SSL_IF_MBEDTLS
 2

	)

120 
	#MG_SSL_IF_SIMPLELINK
 3

	)

139 #i‡!
	`deföed
(
WEAK
)

140 #i‡(
	`deföed
(
__GNUC__
Ë|| deföed(
__TI_COMPILER_VERSION__
)Ë&& !deföed(
_WIN32
)

141 
	#WEAK
 
	`__©åibuã__
((
wók
))

	)

143 
	#WEAK


	)

147 #ifde‡
__GNUC__


148 
	#NORETURN
 
	`__©åibuã__
((
n‹ëu∫
))

	)

149 
	#NOINLINE
 
	`__©åibuã__
((
noölöe
))

	)

150 
	#WARN_UNUSED_RESULT
 
	`__©åibuã__
((
w¨n_unu£d_ªsu…
))

	)

151 
	#NOINSTR
 
	`__©åibuã__
((
no_ö°rumít_fun˘i⁄
))

	)

152 
	#DO_NOT_WARN_UNUSED
 
	`__©åibuã__
((
unu£d
))

	)

154 
	#NORETURN


	)

155 
	#NOINLINE


	)

156 
	#WARN_UNUSED_RESULT


	)

157 
	#NOINSTR


	)

158 
	#DO_NOT_WARN_UNUSED


	)

161 #i‚de‡
ARRAY_SIZE


162 
	#ARRAY_SIZE
(
¨øy
Ë(◊ºayË/ ◊ºay[0]))

	)

166 #ifde‡
MG_MODULE_LINES


169 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_WINDOWS_H_


170 
	#CS_COMMON_PLATFORMS_PLATFORM_WINDOWS_H_


	)

171 #i‡
CS_PLATFORM
 =
CS_P_WINDOWS


185 #ifde‡
_MSC_VER


186 #¥agm®
	`w¨nög
(
dißbÀ
 : 4127)

187 #¥agm®
	`w¨nög
(
dißbÀ
 : 4204)

190 #i‚de‡
_WINSOCK_DEPRECATED_NO_WARNINGS


191 
	#_WINSOCK_DEPRECATED_NO_WARNINGS
 1

	)

194 #i‚de‡
_CRT_SECURE_NO_WARNINGS


195 
	#_CRT_SECURE_NO_WARNINGS


	)

198 
	~<as£π.h
>

199 
	~<dúe˘.h
>

200 
	~<î∫o.h
>

201 
	~<f˙é.h
>

202 
	~<io.h
>

203 
	~<limôs.h
>

204 
	~<sig«l.h
>

205 
	~<°ddef.h
>

206 
	~<°dio.h
>

207 
	~<°dlib.h
>

208 
	~<sys/°©.h
>

209 
	~<time.h
>

211 #ifde‡
_MSC_VER


212 #¥agm®
	`commít
(
lib
, "ws2_32.lib")

215 
	~<wösock2.h
>

216 
	~<ws2t˝ù.h
>

217 
	~<wödows.h
>

218 
	~<¥o˚ss.h
>

220 #i‡
	`deföed
(
_MSC_VER
) && _MSC_VER >= 1800

221 
	#°rdup
 
_°rdup


	)

224 #i‚de‡
EINPROGRESS


225 
	#EINPROGRESS
 
WSAEINPROGRESS


	)

227 #i‚de‡
EWOULDBLOCK


228 
	#EWOULDBLOCK
 
WSAEWOULDBLOCK


	)

230 #i‚de‡
__func__


231 
	#STRX
(
x
Ë#x

	)

232 
	#STR
(
x
Ë
	`STRX
(x)

	)

233 
	#__func__
 
__FILE__
 ":" 
	`STR
(
__LINE__
)

	)

235 
	#¢¥ötf
 
_¢¥ötf


	)

236 
	#fûío
 
_fûío


	)

237 
	#v¢¥ötf
 
_v¢¥ötf


	)

238 
	#¶ìp
(
x
Ë
	`SÀï
((xË*1000)

	)

239 
	#to64
(
x
Ë
	`_©oi64
(x)

	)

240 #i‡!
	`deföed
(
__MINGW32__
Ë&& !deföed(
__MINGW64__
)

241 
	#p›í
(
x
, 
y
Ë
	`_p›í
((x), (y))

	)

242 
	#p˛o£
(
x
Ë
	`_p˛o£
(x)

	)

244 
	#rmdú
 
_rmdú


	)

245 #i‡
	`deföed
(
_MSC_VER
) && _MSC_VER >= 1400

246 
	#f£eko
(
x
, 
y
, 
z
Ë
	`_f£eki64
((x), (y), (z))

	)

248 
	#f£eko
(
x
, 
y
, 
z
Ë
	`f£ek
((x), (y), (z))

	)

250 #i‡
	`deföed
(
_MSC_VER
) && _MSC_VER <= 1200

251 
	tuöçå_t
;

252 
	töçå_t
;

254 
	tsockÀn_t
;

255 #i‡
_MSC_VER
 >= 1700

256 
	~<°döt.h
>

258 sig√d 
	töt8_t
;

259 
	tuöt8_t
;

260 
	töt32_t
;

261 
	tuöt32_t
;

262 
	töt16_t
;

263 
	tuöt16_t
;

264 
__öt64
 
	töt64_t
;

265 
	t__öt64
 
	tuöt64_t
;

267 
SOCKET
 
	tsock_t
;

268 
uöt32_t
 
	tö_addr_t
;

269 #i‚de‡
UINT16_MAX


270 
	#UINT16_MAX
 65535

	)

272 #i‚de‡
UINT32_MAX


273 
	#UINT32_MAX
 4294967295

	)

275 #i‚de‡
pid_t


276 
	#pid_t
 
HANDLE


	)

278 
	#INT64_FMT
 "I64d"

	)

279 
	#INT64_X_FMT
 "I64x"

	)

280 
	#SIZE_T_FMT
 "Iu"

	)

281 
_°©i64
 
	tcs_°©_t
;

282 #i‚de‡
S_ISDIR


283 
	#S_ISDIR
(
x
Ë(((xË&
_S_IFMT
Ë=
_S_IFDIR
)

	)

285 #i‚de‡
S_ISREG


286 
	#S_ISREG
(
x
Ë(((xË&
_S_IFMT
Ë=
_S_IFREG
)

	)

288 
	#DIRSEP
 '\\'

	)

289 
	#CS_DEFINE_DIRENT


	)

291 #i‚de‡
va_c›y


292 #ifde‡
__va_c›y


293 
	#va_c›y
 
__va_c›y


	)

295 
	#va_c›y
(
x
, 
y
Ë(xË(y)

	)

299 #i‚de‡
MG_MAX_HTTP_REQUEST_SIZE


300 
	#MG_MAX_HTTP_REQUEST_SIZE
 8192

	)

303 #i‚de‡
MG_MAX_HTTP_SEND_MBUF


304 
	#MG_MAX_HTTP_SEND_MBUF
 4096

	)

307 #i‚de‡
MG_MAX_HTTP_HEADERS


308 
	#MG_MAX_HTTP_HEADERS
 40

	)

311 #i‚de‡
CS_ENABLE_STDIO


312 
	#CS_ENABLE_STDIO
 1

	)

315 #i‚de‡
MG_ENABLE_BROADCAST


316 
	#MG_ENABLE_BROADCAST
 1

	)

319 #i‚de‡
MG_ENABLE_DIRECTORY_LISTING


320 
	#MG_ENABLE_DIRECTORY_LISTING
 1

	)

323 #i‚de‡
MG_ENABLE_FILESYSTEM


324 
	#MG_ENABLE_FILESYSTEM
 1

	)

327 #i‚de‡
MG_ENABLE_HTTP_CGI


331 #i‚de‡
MG_NET_IF


332 
	#MG_NET_IF
 
MG_NET_IF_SOCKET


	)

337 #ifde‡
MG_MODULE_LINES


340 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_UNIX_H_


341 
	#CS_COMMON_PLATFORMS_PLATFORM_UNIX_H_


	)

342 #i‡
CS_PLATFORM
 =
CS_P_UNIX


344 #i‚de‡
_XOPEN_SOURCE


345 
	#_XOPEN_SOURCE
 600

	)

349 #i‚de‡
__STDC_FORMAT_MACROS


350 
	#__STDC_FORMAT_MACROS


	)

354 #i‚de‡
__STDC_LIMIT_MACROS


355 
	#__STDC_LIMIT_MACROS


	)

359 #i‚de‡
_LARGEFILE_SOURCE


360 
	#_LARGEFILE_SOURCE


	)

364 #i‚de‡
_FILE_OFFSET_BITS


365 
	#_FILE_OFFSET_BITS
 64

	)

368 
	~<¨∑/öë.h
>

369 
	~<as£π.h
>

370 
	~<˘y≥.h
>

371 
	~<dúít.h
>

372 
	~<î∫o.h
>

373 
	~<f˙é.h
>

374 
	~<öây≥s.h
>

375 
	~<°döt.h
>

376 
	~<limôs.h
>

377 
	~<m©h.h
>

378 
	~<√tdb.h
>

379 
	~<√töë/ö.h
>

380 
	~<±hªad.h
>

381 
	~<sig«l.h
>

382 
	~<°d¨g.h
>

383 
	~<°dio.h
>

384 
	~<°dlib.h
>

385 
	~<°rög.h
>

386 
	~<sys/∑øm.h
>

387 
	~<sys/sockë.h
>

388 
	~<sys/£À˘.h
>

389 
	~<sys/°©.h
>

390 
	~<sys/time.h
>

391 
	~<sys/ty≥s.h
>

392 
	~<uni°d.h
>

394 #ifde‡
__APPLE__


395 
	~<machöe/ídün.h
>

396 #i‚de‡
BYTE_ORDER


397 
	#LITTLE_ENDIAN
 
__DARWIN_LITTLE_ENDIAN


	)

398 
	#BIG_ENDIAN
 
__DARWIN_BIG_ENDIAN


	)

399 
	#PDP_ENDIAN
 
__DARWIN_PDP_ENDIAN


	)

400 
	#BYTE_ORDER
 
__DARWIN_BYTE_ORDER


	)

410 #i‡!(
	`deföed
(
__˝lu•lus
) && __cplusplus >= 201103L) && \

411 !(
	`deföed
(
__DARWIN_C_LEVEL
) && __DARWIN_C_LEVEL >= 200809L)

412 
	`°πﬁl
(const *, **, );

415 
	tsock_t
;

416 
	#INVALID_SOCKET
 (-1)

	)

417 
	#SIZE_T_FMT
 "zu"

	)

418 
°©
 
	tcs_°©_t
;

419 
	#DIRSEP
 '/'

	)

420 
	#to64
(
x
Ë
	`°πﬁl
(x, 
NULL
, 10)

	)

421 
	#INT64_FMT
 
PRId64


	)

422 
	#INT64_X_FMT
 
PRIx64


	)

424 #i‚de‡
__cde˛


425 
	#__cde˛


	)

428 #i‚de‡
va_c›y


429 #ifde‡
__va_c›y


430 
	#va_c›y
 
__va_c›y


	)

432 
	#va_c›y
(
x
, 
y
Ë(xË(y)

	)

436 
	#˛o£sockë
(
x
Ë
	`˛o£
(x)

	)

438 #i‚de‡
MG_MAX_HTTP_REQUEST_SIZE


439 
	#MG_MAX_HTTP_REQUEST_SIZE
 8192

	)

442 #i‚de‡
MG_MAX_HTTP_SEND_MBUF


443 
	#MG_MAX_HTTP_SEND_MBUF
 4096

	)

446 #i‚de‡
MG_MAX_HTTP_HEADERS


447 
	#MG_MAX_HTTP_HEADERS
 40

	)

450 #i‚de‡
CS_ENABLE_STDIO


451 
	#CS_ENABLE_STDIO
 1

	)

454 #i‚de‡
MG_ENABLE_BROADCAST


455 
	#MG_ENABLE_BROADCAST
 1

	)

458 #i‚de‡
MG_ENABLE_DIRECTORY_LISTING


459 
	#MG_ENABLE_DIRECTORY_LISTING
 1

	)

462 #i‚de‡
MG_ENABLE_FILESYSTEM


463 
	#MG_ENABLE_FILESYSTEM
 1

	)

466 #i‚de‡
MG_ENABLE_HTTP_CGI


467 
	#MG_ENABLE_HTTP_CGI
 
MG_ENABLE_FILESYSTEM


	)

470 #i‚de‡
MG_NET_IF


471 
	#MG_NET_IF
 
MG_NET_IF_SOCKET


	)

476 #ifde‡
MG_MODULE_LINES


484 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_ESP32_H_


485 
	#CS_COMMON_PLATFORMS_PLATFORM_ESP32_H_


	)

486 #i‡
CS_PLATFORM
 =
CS_P_ESP32


488 
	~<as£π.h
>

489 
	~<˘y≥.h
>

490 
	~<dúít.h
>

491 
	~<f˙é.h
>

492 
	~<öây≥s.h
>

493 
	~<machöe/ídün.h
>

494 
	~<°döt.h
>

495 
	~<°rög.h
>

496 
	~<sys/°©.h
>

497 
	~<sys/time.h
>

499 
	#SIZE_T_FMT
 "u"

	)

500 
°©
 
	tcs_°©_t
;

501 
	#DIRSEP
 '/'

	)

502 
	#to64
(
x
Ë
	`°πﬁl
(x, 
NULL
, 10)

	)

503 
	#INT64_FMT
 
PRId64


	)

504 
	#INT64_X_FMT
 
PRIx64


	)

505 
	#__cde˛


	)

506 
	#_FILE_OFFSET_BITS
 32

	)

508 
	#MG_LWIP
 1

	)

510 #i‚de‡
MG_NET_IF


511 
	#MG_NET_IF
 
MG_NET_IF_SOCKET


	)

514 #i‚de‡
CS_ENABLE_STDIO


515 
	#CS_ENABLE_STDIO
 1

	)

520 #ifde‡
MG_MODULE_LINES


528 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_ESP8266_H_


529 
	#CS_COMMON_PLATFORMS_PLATFORM_ESP8266_H_


	)

530 #i‡
CS_PLATFORM
 =
CS_P_ESP8266


532 
	~<as£π.h
>

533 
	~<˘y≥.h
>

534 
	~<f˙é.h
>

535 
	~<öây≥s.h
>

536 
	~<machöe/ídün.h
>

537 
	~<°rög.h
>

538 
	~<sys/°©.h
>

539 
	~<sys/time.h
>

541 
	#SIZE_T_FMT
 "u"

	)

542 
°©
 
	tcs_°©_t
;

543 
	#DIRSEP
 '/'

	)

544 
	#CS_DEFINE_DIRENT


	)

546 
	#to64
(
x
Ë
	`°πﬁl
(x, 
NULL
, 10)

	)

547 
	#INT64_FMT
 
PRId64


	)

548 
	#INT64_X_FMT
 
PRIx64


	)

549 
	#__cde˛


	)

550 
	#_FILE_OFFSET_BITS
 32

	)

552 #i‚de‡
RTOS_SDK


553 
	#fûío
(
x
Ë-1

	)

556 
	#MG_LWIP
 1

	)

559 
	#LWIP_TIMEVAL_PRIVATE
 0

	)

561 #i‚de‡
MG_NET_IF


562 
	~<lwù/›t.h
>

563 #i‡
LWIP_SOCKET


564 
	#MG_NET_IF
 
MG_NET_IF_SOCKET


	)

566 
	#MG_NET_IF
 
MG_NET_IF_LWIP_LOW_LEVEL


	)

570 #i‚de‡
CS_ENABLE_STDIO


571 
	#CS_ENABLE_STDIO
 1

	)

576 #ifde‡
MG_MODULE_LINES


584 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_CC3100_H_


585 
	#CS_COMMON_PLATFORMS_PLATFORM_CC3100_H_


	)

586 #i‡
CS_PLATFORM
 =
CS_P_CC3100


588 
	~<as£π.h
>

589 
	~<˘y≥.h
>

590 
	~<î∫o.h
>

591 
	~<öây≥s.h
>

592 
	~<°döt.h
>

593 
	~<°rög.h
>

594 
	~<time.h
>

596 
	#MG_NET_IF
 
MG_NET_IF_SIMPLELINK


	)

597 
	#MG_SSL_IF
 
MG_SSL_IF_SIMPLELINK


	)

605 
	~<sim∂ñök.h
>

606 
	~<√èµ.h
>

607 #unde‡
timevÆ


609 
	tsock_t
;

610 
	#INVALID_SOCKET
 (-1)

	)

612 
	#to64
(
x
Ë
	`°πﬁl
(x, 
NULL
, 10)

	)

613 
	#INT64_FMT
 
PRId64


	)

614 
	#INT64_X_FMT
 
PRIx64


	)

615 
	#SIZE_T_FMT
 "u"

	)

617 
	#SOMAXCONN
 8

	)

619 c⁄° *
	`öë_¡›
(
af
, c⁄° *
§c
, *
d°
, 
sockÀn_t
 
size
);

620 *
	`öë_¡ﬂ
(
ö_addr
 
ö
);

621 
	`öë_±⁄
(
af
, c⁄° *
§c
, *
d°
);

625 #ifde‡
MG_MODULE_LINES


633 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_CC3200_H_


634 
	#CS_COMMON_PLATFORMS_PLATFORM_CC3200_H_


	)

635 #i‡
CS_PLATFORM
 =
CS_P_CC3200


637 
	~<as£π.h
>

638 
	~<˘y≥.h
>

639 
	~<î∫o.h
>

640 
	~<öây≥s.h
>

641 
	~<°döt.h
>

642 
	~<°rög.h
>

643 
	~<time.h
>

645 #i‚de‡
__TI_COMPILER_VERSION__


646 
	~<f˙é.h
>

647 
	~<sys/time.h
>

650 
	#MG_NET_IF
 
MG_NET_IF_SIMPLELINK


	)

651 
	#MG_SSL_IF
 
MG_SSL_IF_SIMPLELINK


	)

654 #i‡
	`deföed
(
CC3200_FS_SPIFFS
Ë&& !deföed(
MG_ENABLE_DIRECTORY_LISTING
)

655 
	#MG_ENABLE_DIRECTORY_LISTING
 1

	)

660 
	tsock_t
;

661 
	#INVALID_SOCKET
 (-1)

	)

662 
	#SIZE_T_FMT
 "u"

	)

663 
°©
 
	tcs_°©_t
;

664 
	#DIRSEP
 '/'

	)

665 
	#to64
(
x
Ë
	`°πﬁl
(x, 
NULL
, 10)

	)

666 
	#INT64_FMT
 
PRId64


	)

667 
	#INT64_X_FMT
 
PRIx64


	)

668 
	#__cde˛


	)

670 
	#fûío
(
x
Ë-1

	)

674 #ifde‡
__˝lu•lus


678 #ifde‡
__TI_COMPILER_VERSION__


679 
SlTimevÆ_t
;

680 
	#timevÆ
 
SlTimevÆ_t


	)

681 
	`gëtimeofday
(
timevÆ
 *
t
, *
tz
);

683 
	`a•rötf
(**
°Ω
, c⁄° *
fmt
, ...);

688 #ifde‡
__TI_COMPILER_VERSION__


690 
	~<fûe.h
>

692 
	tmode_t
;

693 
size_t
 
	t_off_t
;

694 
	tssize_t
;

696 
	s°©
 {

697 
°_öo
;

698 
mode_t
 
°_mode
;

699 
°_∆ök
;

700 
time_t
 
°_mtime
;

701 
off_t
 
°_size
;

704 
	`_°©
(c⁄° *
∑th«me
, 
°©
 *
°
);

705 
	#°©
(
a
, 
b
Ë
	`_°©
◊, b)

	)

707 
	#__S_IFMT
 0170000

	)

709 
	#__S_IFDIR
 0040000

	)

710 
	#__S_IFCHR
 0020000

	)

711 
	#__S_IFREG
 0100000

	)

713 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË&
__S_IFMT
Ë=(mask))

	)

715 
	#S_IFDIR
 
__S_IFDIR


	)

716 
	#S_IFCHR
 
__S_IFCHR


	)

717 
	#S_IFREG
 
__S_IFREG


	)

718 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

719 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

722 
	#va_c›y
(
≠c
, 
≠
Ë(◊pcË◊p))

	)

726 #ifde‡
CC3200_FS_SLFS


727 
	#MG_FS_SLFS


	)

730 #i‡(
	`deföed
(
CC3200_FS_SPIFFS
Ë|| deföed(
CC3200_FS_SLFS
)) && \

731 !
	$deföed
(
MG_ENABLE_FILESYSTEM
)

732 
	#MG_ENABLE_FILESYSTEM
 1

	)

733 
	#CS_DEFINE_DIRENT


	)

736 #i‚de‡
CS_ENABLE_STDIO


737 
	#CS_ENABLE_STDIO
 1

	)

740 #ifde‡
__˝lu•lus


741 
	}
}

746 #ifde‡
MG_MODULE_LINES


754 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_MSP432_H_


755 
	#CS_COMMON_PLATFORMS_PLATFORM_MSP432_H_


	)

756 #i‡
CS_PLATFORM
 =
CS_P_MSP432


758 
	~<as£π.h
>

759 
	~<˘y≥.h
>

760 
	~<î∫o.h
>

761 
	~<öây≥s.h
>

762 
	~<°döt.h
>

763 
	~<°rög.h
>

764 
	~<time.h
>

766 #i‚de‡
__TI_COMPILER_VERSION__


767 
	~<f˙é.h
>

768 
	~<sys/time.h
>

771 
	#MG_NET_IF
 
MG_NET_IF_SIMPLELINK


	)

772 
	#MG_SSL_IF
 
MG_SSL_IF_SIMPLELINK


	)

776 
	tsock_t
;

777 
	#INVALID_SOCKET
 (-1)

	)

778 
	#SIZE_T_FMT
 "u"

	)

779 
°©
 
	tcs_°©_t
;

780 
	#DIRSEP
 '/'

	)

781 
	#to64
(
x
Ë
	`°πﬁl
(x, 
NULL
, 10)

	)

782 
	#INT64_FMT
 
PRId64


	)

783 
	#INT64_X_FMT
 
PRIx64


	)

784 
	#__cde˛


	)

786 
	#fûío
(
x
Ë-1

	)

790 #ifde‡
__˝lu•lus


794 #ifde‡
__TI_COMPILER_VERSION__


795 
SlTimevÆ_t
;

796 
	#timevÆ
 
SlTimevÆ_t


	)

797 
gëtimeofday
(
timevÆ
 *
t
, *
tz
);

801 #ifde‡
__TI_COMPILER_VERSION__


803 
	~<fûe.h
>

805 
	tmode_t
;

806 
size_t
 
	t_off_t
;

807 
	tssize_t
;

809 
	s°©
 {

810 
	m°_öo
;

811 
mode_t
 
	m°_mode
;

812 
	m°_∆ök
;

813 
time_t
 
	m°_mtime
;

814 
off_t
 
	m°_size
;

817 
_°©
(c⁄° *
∑th«me
, 
°©
 *
°
);

818 
	#°©
(
a
, 
b
Ë
	`_°©
◊, b)

	)

820 
	#__S_IFMT
 0170000

	)

822 
	#__S_IFDIR
 0040000

	)

823 
	#__S_IFCHR
 0020000

	)

824 
	#__S_IFREG
 0100000

	)

826 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË&
__S_IFMT
Ë=(mask))

	)

828 
	#S_IFDIR
 
__S_IFDIR


	)

829 
	#S_IFCHR
 
__S_IFCHR


	)

830 
	#S_IFREG
 
__S_IFREG


	)

831 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

832 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

835 
	#va_c›y
(
≠c
, 
≠
Ë(◊pcË◊p))

	)

839 #i‚de‡
CS_ENABLE_STDIO


840 
	#CS_ENABLE_STDIO
 1

	)

843 #i‡(
deföed
(
CC3200_FS_SPIFFS
Ë|| deföed(
CC3200_FS_SLFS
)Ë&& !deföed(
MG_ENABLE_FILESYSTEM
)

844 
	#MG_ENABLE_FILESYSTEM
 1

	)

847 #ifde‡
__˝lu•lus


853 #ifde‡
MG_MODULE_LINES


861 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_TM4C129_H_


862 
	#CS_COMMON_PLATFORMS_PLATFORM_TM4C129_H_


	)

863 #i‡
CS_PLATFORM
 =
CS_P_TM4C129


865 
	~<as£π.h
>

866 
	~<˘y≥.h
>

867 
	~<î∫o.h
>

868 
	~<öây≥s.h
>

869 
	~<°döt.h
>

870 
	~<°rög.h
>

871 
	~<time.h
>

873 #i‚de‡
__TI_COMPILER_VERSION__


874 
	~<f˙é.h
>

875 
	~<sys/time.h
>

878 
	#SIZE_T_FMT
 "u"

	)

879 
°©
 
	tcs_°©_t
;

880 
	#DIRSEP
 '/'

	)

881 
	#to64
(
x
Ë
	`°πﬁl
(x, 
NULL
, 10)

	)

882 
	#INT64_FMT
 
PRId64


	)

883 
	#INT64_X_FMT
 
PRIx64


	)

884 
	#__cde˛


	)

886 #i‚de‡
MG_NET_IF


887 
	~<lwù/›t.h
>

888 #i‡
LWIP_SOCKET


889 
	#MG_NET_IF
 
MG_NET_IF_SOCKET


	)

891 
	#MG_NET_IF
 
MG_NET_IF_LWIP_LOW_LEVEL


	)

893 
	#MG_LWIP
 1

	)

894 #ñi‡
MG_NET_IF
 =
MG_NET_IF_SIMPLELINK


895 
	~"comm⁄/∂©f‹ms/sim∂ñök/cs_sim∂ñök.h
"

898 #i‚de‡
CS_ENABLE_STDIO


899 
	#CS_ENABLE_STDIO
 1

	)

902 #ifde‡
__TI_COMPILER_VERSION__


904 
	#va_c›y
(
≠c
, 
≠
Ë(◊pcË◊p))

	)

907 #ifde‡
__˝lu•lus


913 #ifde‡
MG_MODULE_LINES


921 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_MBED_H_


922 
	#CS_COMMON_PLATFORMS_PLATFORM_MBED_H_


	)

923 #i‡
CS_PLATFORM
 =
CS_P_MBED


929 #ifde‡
__˝lu•lus


933 
	~<as£π.h
>

934 
	~<˘y≥.h
>

935 
	~<î∫o.h
>

936 
	~<öây≥s.h
>

937 
	~<°döt.h
>

938 
	~<°rög.h
>

939 
	~<time.h
>

940 
	~<sys/°©.h
>

941 
	~<sys/ty≥s.h
>

942 
	~<f˙é.h
>

943 
	~<°dio.h
>

945 
°©
 
	tcs_°©_t
;

946 
	#DIRSEP
 '/'

	)

948 #i‚de‡
CS_ENABLE_STDIO


949 
	#CS_ENABLE_STDIO
 1

	)

958 #i‡
deföed
(
__ARMCC_VERSION
Ë|| deföed(
__ICCARM__
)

959 
	#_TIMEVAL_DEFINED


	)

960 
	#gëtimeofday
 
_gëtimeofday


	)

963 
	tsu£c⁄ds_t
;

964 
	stimevÆ
 {

965 
time_t
 
	mtv_£c
;

966 
su£c⁄ds_t
 
	mtv_u£c
;

971 #i‡
MG_NET_IF
 =
MG_NET_IF_SIMPLELINK


973 
	#MG_SIMPLELINK_NO_OSI
 1

	)

975 
	~<sim∂ñök.h
>

977 
	tsock_t
;

978 
	#INVALID_SOCKET
 (-1)

	)

980 
	#to64
(
x
Ë
	`°πﬁl
(x, 
NULL
, 10)

	)

981 
	#INT64_FMT
 
PRId64


	)

982 
	#INT64_X_FMT
 
PRIx64


	)

983 
	#SIZE_T_FMT
 "u"

	)

985 
	#SOMAXCONN
 8

	)

987 c⁄° *
öë_¡›
(
af
, c⁄° *
§c
, *
d°
, 
sockÀn_t
 
size
);

988 *
öë_¡ﬂ
(
ö_addr
 
ö
);

989 
öë_±⁄
(
af
, c⁄° *
§c
, *
d°
);

990 
öë_©⁄
(c⁄° *
˝
, 
ö_addr
 *
öp
);

991 
ö_addr_t
 
öë_addr
(c⁄° *
˝
);

997 #ifde‡
MG_MODULE_LINES


1004 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_NRF51_H_


1005 
	#CS_COMMON_PLATFORMS_PLATFORM_NRF51_H_


	)

1006 #i‡
CS_PLATFORM
 =
CS_P_NRF51


1008 
	~<as£π.h
>

1009 
	~<˘y≥.h
>

1010 
	~<öây≥s.h
>

1011 
	~<°döt.h
>

1012 
	~<°rög.h
>

1013 
	~<time.h
>

1015 
	#to64
(
x
Ë
	`°πﬁl
(x, 
NULL
, 10)

	)

1017 
	#MG_NET_IF
 
MG_NET_IF_LWIP_LOW_LEVEL


	)

1018 
	#MG_LWIP
 1

	)

1019 
	#MG_ENABLE_IPV6
 1

	)

1025 #i‡!
deföed
(
__ARMCC_VERSION
)

1026 
	#LWIP_TIMEVAL_PRIVATE
 0

	)

1028 
	gtimevÆ
;

1029 
gëtimeofday
(
timevÆ
 *
ç
, *
tzp
);

1032 
	#INT64_FMT
 
PRId64


	)

1033 
	#SIZE_T_FMT
 "u"

	)

1038 
	#CS_ENABLE_STRDUP
 
	`deföed
(
__ARMCC_VERSION
)

	)

1042 #ifde‡
MG_MODULE_LINES


1049 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_NRF52_H_


1050 
	#CS_COMMON_PLATFORMS_PLATFORM_NRF52_H_


	)

1051 #i‡
CS_PLATFORM
 =
CS_P_NRF52


1053 
	~<as£π.h
>

1054 
	~<˘y≥.h
>

1055 
	~<î∫o.h
>

1056 
	~<öây≥s.h
>

1057 
	~<°döt.h
>

1058 
	~<°rög.h
>

1059 
	~<time.h
>

1061 
	#to64
(
x
Ë
	`°πﬁl
(x, 
NULL
, 10)

	)

1063 
	#MG_NET_IF
 
MG_NET_IF_LWIP_LOW_LEVEL


	)

1064 
	#MG_LWIP
 1

	)

1065 
	#MG_ENABLE_IPV6
 1

	)

1067 #i‡!
deföed
(
ENOSPC
)

1068 
	#ENOSPC
 28

	)

1075 #i‡!
deföed
(
__ARMCC_VERSION
)

1076 
	#LWIP_TIMEVAL_PRIVATE
 0

	)

1079 
	#INT64_FMT
 
PRId64


	)

1080 
	#SIZE_T_FMT
 "u"

	)

1085 
	#CS_ENABLE_STRDUP
 
	`deföed
(
__ARMCC_VERSION
)

	)

1089 #ifde‡
MG_MODULE_LINES


1097 #i‚de‡
CS_COMMON_PLATFORMS_SIMPLELINK_CS_SIMPLELINK_H_


1098 
	#CS_COMMON_PLATFORMS_SIMPLELINK_CS_SIMPLELINK_H_


	)

1101 #i‡
deföed
(
MG_NET_IF
Ë&& MG_NET_IF =
MG_NET_IF_SIMPLELINK
 && \

1102 !
deföed
(
__SIMPLELINK_H__
)

1104 
	~<°dboﬁ.h
>

1106 #i‚de‡
__TI_COMPILER_VERSION__


1107 #unde‡
__CONCAT


1108 #unde‡
FD_CLR


1109 #unde‡
FD_ISSET


1110 #unde‡
FD_SET


1111 #unde‡
FD_SETSIZE


1112 #unde‡
FD_ZERO


1113 #unde‡
fd_£t


1118 
	#PROVISIONING_API_H_


	)

1119 
	~<sim∂ñök/u£r.h
>

1120 #unde‡
PROVISIONING_API_H_


1121 #unde‡
SL_INC_STD_BSD_API_NAMING


1123 
	~<sim∂ñök/ö˛ude/sim∂ñök.h
>

1124 
	~<sim∂ñök/ö˛ude/√èµ.h
>

1128 
	#AF_INET
 
SL_AF_INET


	)

1130 
	#sockÀn_t
 
SlSockÀn_t


	)

1131 
	#sockaddr
 
SlSockAddr_t


	)

1132 
	#sockaddr_ö
 
SlSockAddrIn_t


	)

1133 
	#ö_addr
 
SlInAddr_t


	)

1135 
	#SOCK_STREAM
 
SL_SOCK_STREAM


	)

1136 
	#SOCK_DGRAM
 
SL_SOCK_DGRAM


	)

1138 
	#ht⁄l
 
¶_Ht⁄l


	)

1139 
	#¡ohl
 
¶_Ntohl


	)

1140 
	#ht⁄s
 
¶_Ht⁄s


	)

1141 
	#¡ohs
 
¶_Ntohs


	)

1143 #i‚de‡
EACCES


1144 
	#EACCES
 
SL_EACCES


	)

1146 #i‚de‡
EAFNOSUPPORT


1147 
	#EAFNOSUPPORT
 
SL_EAFNOSUPPORT


	)

1149 #i‚de‡
EAGAIN


1150 
	#EAGAIN
 
SL_EAGAIN


	)

1152 #i‚de‡
EBADF


1153 
	#EBADF
 
SL_EBADF


	)

1155 #i‚de‡
EINVAL


1156 
	#EINVAL
 
SL_EINVAL


	)

1158 #i‚de‡
ENOMEM


1159 
	#ENOMEM
 
SL_ENOMEM


	)

1161 #i‚de‡
EWOULDBLOCK


1162 
	#EWOULDBLOCK
 
SL_EWOULDBLOCK


	)

1165 
	#SOMAXCONN
 8

	)

1167 #ifde‡
__˝lu•lus


1171 c⁄° *
öë_¡›
(
af
, c⁄° *
§c
, *
d°
, 
sockÀn_t
 
size
);

1172 *
öë_¡ﬂ
(
ö_addr
 
ö
);

1173 
öë_±⁄
(
af
, c⁄° *
§c
, *
d°
);

1175 
mg_mgr
;

1176 
mg_c⁄√˘i⁄
;

1178 (*
mg_öô_cb
)(
	tmg_mgr
 *
	tmgr
);

1179 
boﬁ
 
mg_°¨t_èsk
(
¥i‹ôy
, 
°ack_size
, 
mg_öô_cb
 
mg_öô
);

1181 
mg_run_ö_èsk
((*
cb
)(
mg_mgr
 *
mgr
, *
¨g
), *
cb_¨g
);

1183 
¶_fs_öô
();

1185 
¶_ª°¨t_cb
(
mg_mgr
 *
mgr
);

1187 
¶_£t_s¶_›ts
(
mg_c⁄√˘i⁄
 *
nc
);

1189 #ifde‡
__˝lu•lus


1196 #ifde‡
MG_MODULE_LINES


1199 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_WINCE_H_


1200 
	#CS_COMMON_PLATFORMS_PLATFORM_WINCE_H_


	)

1202 #i‡
CS_PLATFORM
 =
CS_P_WINCE


1216 #¥agm®
w¨nög
(
dißbÀ
 : 4127)

1217 #¥agm®
w¨nög
(
dißbÀ
 : 4204)

1219 #i‚de‡
_WINSOCK_DEPRECATED_NO_WARNINGS


1220 
	#_WINSOCK_DEPRECATED_NO_WARNINGS
 1

	)

1223 #i‚de‡
_CRT_SECURE_NO_WARNINGS


1224 
	#_CRT_SECURE_NO_WARNINGS


	)

1227 
	~<as£π.h
>

1228 
	~<limôs.h
>

1229 
	~<°ddef.h
>

1230 
	~<°dio.h
>

1231 
	~<°dlib.h
>

1232 
	~<time.h
>

1234 #¥agm®
commít
(
lib
, "ws2.lib")

1236 
	~<wösock2.h
>

1237 
	~<ws2t˝ù.h
>

1238 
	~<wödows.h
>

1240 
	#°rdup
 
_°rdup


	)

1242 #i‚de‡
EINPROGRESS


1243 
	#EINPROGRESS
 
WSAEINPROGRESS


	)

1246 #i‚de‡
EWOULDBLOCK


1247 
	#EWOULDBLOCK
 
WSAEWOULDBLOCK


	)

1250 #i‚de‡
__func__


1251 
	#STRX
(
x
Ë#x

	)

1252 
	#STR
(
x
Ë
	`STRX
(x)

	)

1253 
	#__func__
 
__FILE__
 ":" 
	`STR
(
__LINE__
)

	)

1256 
	#¢¥ötf
 
_¢¥ötf


	)

1257 
	#fûío
 
_fûío


	)

1258 
	#v¢¥ötf
 
_v¢¥ötf


	)

1259 
	#¶ìp
(
x
Ë
	`SÀï
((xË*1000)

	)

1260 
	#to64
(
x
Ë
	`_©oi64
(x)

	)

1261 
	#rmdú
 
_rmdú


	)

1263 #i‡
deföed
(
_MSC_VER
) && _MSC_VER >= 1400

1264 
	#f£eko
(
x
, 
y
, 
z
Ë
	`_f£eki64
((x), (y), (z))

	)

1266 
	#f£eko
(
x
, 
y
, 
z
Ë
	`f£ek
((x), (y), (z))

	)

1269 
	tsockÀn_t
;

1271 #i‡
_MSC_VER
 >= 1700

1272 
	~<°döt.h
>

1274 sig√d 
	töt8_t
;

1275 
	tuöt8_t
;

1276 
	töt32_t
;

1277 
	tuöt32_t
;

1278 
	töt16_t
;

1279 
	tuöt16_t
;

1280 
__öt64
 
	töt64_t
;

1281 
	t__öt64
 
	tuöt64_t
;

1284 
SOCKET
 
	tsock_t
;

1285 
uöt32_t
 
	tö_addr_t
;

1287 #i‚de‡
UINT16_MAX


1288 
	#UINT16_MAX
 65535

	)

1291 #i‚de‡
UINT32_MAX


1292 
	#UINT32_MAX
 4294967295

	)

1295 #i‚de‡
pid_t


1296 
	#pid_t
 
HANDLE


	)

1299 
	#INT64_FMT
 "I64d"

	)

1300 
	#INT64_X_FMT
 "I64x"

	)

1302 
	#SIZE_T_FMT
 "u"

	)

1304 
	#DIRSEP
 '\\'

	)

1305 
	#CS_DEFINE_DIRENT


	)

1307 #i‚de‡
va_c›y


1308 #ifde‡
__va_c›y


1309 
	#va_c›y
 
__va_c›y


	)

1311 
	#va_c›y
(
x
, 
y
Ë(xË(y)

	)

1315 #i‚de‡
MG_MAX_HTTP_REQUEST_SIZE


1316 
	#MG_MAX_HTTP_REQUEST_SIZE
 8192

	)

1319 #i‚de‡
MG_MAX_HTTP_SEND_MBUF


1320 
	#MG_MAX_HTTP_SEND_MBUF
 4096

	)

1323 #i‚de‡
MG_MAX_HTTP_HEADERS


1324 
	#MG_MAX_HTTP_HEADERS
 40

	)

1327 #i‚de‡
CS_ENABLE_STDIO


1328 
	#CS_ENABLE_STDIO
 1

	)

1331 
	#ab‹t
(Ë
	`DebugBªak
();

	)

1333 #i‚de‡
BUFSIZ


1334 
	#BUFSIZ
 4096

	)

1340 #i‚de‡
MG_ENABLE_THREADS


1341 
	#MG_ENABLE_THREADS
 0

	)

1344 #i‚de‡
MG_ENABLE_FILESYSTEM


1345 
	#MG_ENABLE_FILESYSTEM
 1

	)

1348 #i‚de‡
MG_NET_IF


1349 
	#MG_NET_IF
 
MG_NET_IF_SOCKET


	)

1352 
	s_°©i64
 {

1353 
uöt32_t
 
	g°_mtime
;

1354 
uöt32_t
 
	g°_size
;

1355 
uöt32_t
 
	g°_mode
;

1356 } 
	tcs_°©_t
;

1363 #i‚de‡
ENOENT


1364 
	#ENOENT
 
ERROR_PATH_NOT_FOUND


	)

1367 #i‚de‡
EACCES


1368 
	#EACCES
 
ERROR_ACCESS_DENIED


	)

1371 #i‚de‡
ENOMEM


1372 
	#ENOMEM
 
ERROR_NOT_ENOUGH_MEMORY


	)

1375 #i‚de‡
_UINTPTR_T_DEFINED


1376 * 
	tuöçå_t
;

1379 
	#_S_IFREG
 2

	)

1380 
	#_S_IFDIR
 4

	)

1382 #i‚de‡
S_ISDIR


1383 
	#S_ISDIR
(
x
Ë(((xË& 
_S_IFDIR
Ë!0)

	)

1386 #i‚de‡
S_ISREG


1387 
	#S_ISREG
(
x
Ë(((xË& 
_S_IFREG
Ë!0)

	)

1390 
›í
(c⁄° *
fûíame
, 
oÊag
, 
pmode
);

1391 
_w°©i64
(c⁄° 
wch¨_t
 *
∑th
, 
cs_°©_t
 *
°
);

1392 c⁄° *
°ªº‹
();

1396 #ifde‡
MG_MODULE_LINES


1404 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_NXP_LPC_H_


1405 
	#CS_COMMON_PLATFORMS_PLATFORM_NXP_LPC_H_


	)

1407 #i‡
CS_PLATFORM
 =
CS_P_NXP_LPC


1409 
	~<˘y≥.h
>

1410 
	~<°döt.h
>

1411 
	~<°rög.h
>

1413 
	#SIZE_T_FMT
 "u"

	)

1414 
°©
 
	tcs_°©_t
;

1415 
	#INT64_FMT
 "Œd"

	)

1416 
	#INT64_X_FMT
 "Œx"

	)

1417 
	#__cde˛


	)

1419 
	#MG_LWIP
 1

	)

1421 
	#MG_NET_IF
 
MG_NET_IF_LWIP_LOW_LEVEL


	)

1429 #ifde‡
__REDLIB_INTERFACE_VERSION__


1432 
	#LWIP_TIMEVAL_PRIVATE
 1

	)

1434 
	#va_c›y
(
d
, 
s
Ë
	`__buûtö_va_c›y
(d, s)

	)

1436 
	#CS_ENABLE_TO64
 1

	)

1437 
	#to64
(
x
Ë
	`cs_to64
(x)

	)

1439 
	#CS_ENABLE_STRDUP
 1

	)

1443 
	~<sys/time.h
>

1444 
	#LWIP_TIMEVAL_PRIVATE
 0

	)

1445 
	#to64
(
x
Ë
	`°πﬁl
(x, 
NULL
, 10)

	)

1451 #ifde‡
MG_MODULE_LINES


1459 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_NXP_KINETIS_H_


1460 
	#CS_COMMON_PLATFORMS_PLATFORM_NXP_KINETIS_H_


	)

1462 #i‡
CS_PLATFORM
 =
CS_P_NXP_KINETIS


1464 
	~<˘y≥.h
>

1465 
	~<öây≥s.h
>

1466 
	~<°rög.h
>

1467 
	~<sys/time.h
>

1469 
	#SIZE_T_FMT
 "u"

	)

1470 
°©
 
	tcs_°©_t
;

1471 
	#to64
(
x
Ë
	`°πﬁl
(x, 
NULL
, 10)

	)

1472 
	#INT64_FMT
 "Œd"

	)

1473 
	#INT64_X_FMT
 "Œx"

	)

1474 
	#__cde˛


	)

1476 
	#MG_LWIP
 1

	)

1478 
	#MG_NET_IF
 
MG_NET_IF_LWIP_LOW_LEVEL


	)

1481 
	#LWIP_TIMEVAL_PRIVATE
 0

	)

1485 #ifde‡
MG_MODULE_LINES


1493 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_PIC32_H_


1494 
	#CS_COMMON_PLATFORMS_PLATFORM_PIC32_H_


	)

1496 #i‡
CS_PLATFORM
 =
CS_P_PIC32


1498 
	#MG_NET_IF
 
MG_NET_IF_PIC32


	)

1500 
	~<°döt.h
>

1501 
	~<time.h
>

1502 
	~<˘y≥.h
>

1503 
	~<°dlib.h
>

1505 
	~<sy°em_c⁄fig.h
>

1506 
	~<sy°em_deföôi⁄s.h
>

1508 
	~<sys/ty≥s.h
>

1510 
TCP_SOCKET
 
	tsock_t
;

1511 
	#to64
(
x
Ë
	`°πﬁl
(x, 
NULL
, 10)

	)

1513 
	#SIZE_T_FMT
 "lu"

	)

1514 
	#INT64_FMT
 "Œd"

	)

1516 #i‚de‡
CS_ENABLE_STDIO


1517 
	#CS_ENABLE_STDIO
 1

	)

1520 * 
öë_¡ﬂ
(
ö_addr
 
ö
);

1525 #ifde‡
MG_MODULE_LINES


1533 #i‚de‡
CS_COMMON_PLATFORMS_PLATFORM_STM32_H_


1534 
	#CS_COMMON_PLATFORMS_PLATFORM_STM32_H_


	)

1535 #i‡
CS_PLATFORM
 =
CS_P_STM32


1537 
	~<sys/ty≥s.h
>

1538 
	~<sys/°©.h
>

1539 
	~<°döt.h
>

1540 
	~<öây≥s.h
>

1541 
	~<°dio.h
>

1542 
	~<˘y≥.h
>

1543 
	~<î∫o.h
>

1544 
	~<mem‹y.h
>

1545 
	~<f˙é.h
>

1546 
	~<°m32_sdk_hÆ.h
>

1548 
	#to64
(
x
Ë
	`°πﬁl
(x, 
NULL
, 10)

	)

1549 
	#INT64_FMT
 
PRId64


	)

1550 
	#SIZE_T_FMT
 "u"

	)

1551 
°©
 
	tcs_°©_t
;

1552 
	#DIRSEP
 '/'

	)

1554 #i‚de‡
CS_ENABLE_STDIO


1555 
	#CS_ENABLE_STDIO
 1

	)

1558 #i‚de‡
MG_ENABLE_FILESYSTEM


1559 
	#MG_ENABLE_FILESYSTEM
 1

	)

1562 
	#CS_DEFINE_DIRENT


	)

1566 #ifde‡
MG_MODULE_LINES


1574 #i‚de‡
CS_COMMON_PLATFORMS_LWIP_MG_LWIP_H_


1575 
	#CS_COMMON_PLATFORMS_LWIP_MG_LWIP_H_


	)

1577 #i‚de‡
MG_LWIP


1578 
	#MG_LWIP
 0

	)

1581 #i‡
MG_LWIP


1592 #i‡
CS_PLATFORM
 =
CS_P_NRF51
 || CS_PLATFORM =
CS_P_NRF52


1593 #unde‡
BYTE_ORDER


1596 
	~<lwù/›t.h
>

1597 
	~<lwù/îr.h
>

1598 
	~<lwù/ù_addr.h
>

1599 
	~<lwù/öë.h
>

1600 
	~<lwù/√tdb.h
>

1601 
	~<lwù/dns.h
>

1603 #i‚de‡
LWIP_PROVIDE_ERRNO


1604 
	~<î∫o.h
>

1607 #i‡
LWIP_SOCKET


1608 
	~<lwù/sockës.h
>

1611 #unde‡
LWIP_SOCKET


1612 
	#LWIP_SOCKET
 1

	)

1613 
	~<lwù/sockës.h
>

1614 #unde‡
LWIP_SOCKET


1615 
	#LWIP_SOCKET
 0

	)

1618 
	#INVALID_SOCKET
 (-1)

	)

1619 
	#SOMAXCONN
 10

	)

1620 
	tsock_t
;

1622 #i‡
MG_NET_IF
 =
MG_NET_IF_LWIP_LOW_LEVEL


1623 
	gmg_mgr
;

1624 
	gmg_c⁄√˘i⁄
;

1625 
uöt32_t
 
mg_lwù_gë_pﬁl_dñay_ms
(
mg_mgr
 *
mgr
);

1626 
mg_lwù_£t_kì∑live_∑øms
(
mg_c⁄√˘i⁄
 *
nc
, 
idÀ
,

1627 
öãrvÆ
, 
cou¡
);

1631 #i‚de‡
ùX_2_ù


1632 
	#ùX_2_ù
(
x
Ë(x)

	)

1638 #ifde‡
MG_MODULE_LINES


1646 #i‚de‡
CS_COMMON_CS_TIME_H_


1647 
	#CS_COMMON_CS_TIME_H_


	)

1651 #ifde‡
__˝lu•lus


1656 
cs_time
();

1658 #ifde‡
__˝lu•lus


1663 #ifde‡
MG_MODULE_LINES


1671 #i‚de‡
CS_COMMON_MG_STR_H_


1672 
	#CS_COMMON_MG_STR_H_


	)

1674 
	~<°ddef.h
>

1678 #ifde‡
__˝lu•lus


1683 
	smg_°r
 {

1684 c⁄° *
p
;

1685 
size_t
 
Àn
;

1692 
mg_°r
 
mg_mk_°r
(c⁄° *
s
);

1693 
mg_°r
 
mg_mk_°r_n
(c⁄° *
s
, 
size_t
 
Àn
);

1696 
	#MG_MK_STR
(
°r_lôîÆ
) \

1697 { 
°r_lôîÆ
, (°r_lôîÆË- 1 }

	)

1703 
mg_vcmp
(c⁄° 
mg_°r
 *
°r2
, c⁄° *
°r1
);

1709 
mg_vˇ£cmp
(c⁄° 
mg_°r
 *
°r2
, c⁄° *
°r1
);

1711 
mg_°r
 
mg_°rdup
(c⁄° mg_°∏
s
);

1712 
mg_°rcmp
(c⁄° 
mg_°r
 
°r1
, c⁄° mg_°∏
°r2
);

1713 
mg_°∫cmp
(c⁄° 
mg_°r
 
°r1
, c⁄° mg_°∏
°r2
, 
size_t
 
n
);

1715 #ifde‡
__˝lu•lus


1720 #ifde‡
MG_MODULE_LINES


1737 #i‚de‡
CS_COMMON_MBUF_H_


1738 
	#CS_COMMON_MBUF_H_


	)

1740 
	~<°dlib.h
>

1743 #i‡
deföed
(
__˝lu•lus
)

1747 #i‚de‡
MBUF_SIZE_MULTIPLIER


1748 
	#MBUF_SIZE_MULTIPLIER
 1.5

	)

1752 
	smbuf
 {

1753 *
buf
;

1754 
size_t
 
Àn
;

1755 
size_t
 
size
;

1762 
mbuf_öô
(
mbuf
 *, 
size_t
 
öôül_ˇ∑côy
);

1765 
mbuf_‰ì
(
mbuf
 *);

1772 
size_t
 
mbuf_≠≥nd
(
mbuf
 *, c⁄° *
d©a
, size_à
d©a_size
);

1781 
size_t
 
mbuf_ö£π
(
mbuf
 *, size_t, const *, size_t);

1784 
mbuf_ªmove
(
mbuf
 *, 
size_t
 
d©a_size
);

1792 
mbuf_ªsize
(
mbuf
 *, 
size_t
 
√w_size
);

1795 
mbuf_åim
(
mbuf
 *);

1797 #i‡
deföed
(
__˝lu•lus
)

1802 #ifde‡
MG_MODULE_LINES


1810 #i‚de‡
CS_COMMON_SHA1_H_


1811 
	#CS_COMMON_SHA1_H_


	)

1813 #i‚de‡
DISABLE_SHA1


1814 
	#DISABLE_SHA1
 0

	)

1817 #i‡!
DISABLE_SHA1


1821 #ifde‡
__˝lu•lus


1826 
uöt32_t
 
°©e
[5];

1827 
uöt32_t
 
cou¡
[2];

1828 
buf„r
[64];

1829 } 
	tcs_sha1_˘x
;

1831 
cs_sha1_öô
(
cs_sha1_˘x
 *);

1832 
cs_sha1_upd©e
(
cs_sha1_˘x
 *, c⁄° *
d©a
, 
uöt32_t
 
Àn
);

1833 
cs_sha1_föÆ
(
dige°
[20], 
cs_sha1_˘x
 *);

1834 
cs_hmac_sha1
(c⁄° *
key
, 
size_t
 
key_Àn
,

1835 c⁄° *
ãxt
, 
size_t
 
ãxt_Àn
,

1836 
out
[20]);

1837 #ifde‡
__˝lu•lus


1844 #ifde‡
MG_MODULE_LINES


1852 #i‚de‡
CS_COMMON_MD5_H_


1853 
	#CS_COMMON_MD5_H_


	)

1857 #i‚de‡
DISABLE_MD5


1858 
	#DISABLE_MD5
 0

	)

1861 #ifde‡
__˝lu•lus


1865 
	sMD5C⁄ãxt
 {

1866 
uöt32_t
 
buf
[4];

1867 
uöt32_t
 
bôs
[2];

1868 
ö
[64];

1869 } 
	tMD5_CTX
;

1871 
MD5_Inô
(
MD5_CTX
 *
c
);

1872 
MD5_Upd©e
(
MD5_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

1873 
MD5_FöÆ
(*
md
, 
MD5_CTX
 *
c
);

1883 *
cs_md5
(
buf
[33], ...);

1885 #ifde‡
__˝lu•lus


1890 #ifde‡
MG_MODULE_LINES


1898 #i‚de‡
CS_COMMON_BASE64_H_


1899 
	#CS_COMMON_BASE64_H_


	)

1901 #i‚de‡
DISABLE_BASE64


1902 
	#DISABLE_BASE64
 0

	)

1905 #i‡!
DISABLE_BASE64


1907 
	~<°dio.h
>

1909 #ifde‡
__˝lu•lus


1913 (*
cs_ba£64_putc_t
)(, *);

1915 
	scs_ba£64_˘x
 {

1917 
cs_ba£64_putc_t
 
b64_putc
;

1918 
chunk
[3];

1919 
chunk_size
;

1920 *
u£r_d©a
;

1923 
cs_ba£64_öô
(
cs_ba£64_˘x
 *
˘x
, 
cs_ba£64_putc_t
 
putc
,

1924 *
u£r_d©a
);

1925 
cs_ba£64_upd©e
(
cs_ba£64_˘x
 *
˘x
, c⁄° *
°r
, 
size_t
 
Àn
);

1926 
cs_ba£64_föish
(
cs_ba£64_˘x
 *
˘x
);

1928 
cs_ba£64_ícode
(c⁄° *
§c
, 
§c_Àn
, *
d°
);

1929 
cs_Âröt_ba£64
(
FILE
 *
f
, c⁄° *
§c
, 
§c_Àn
);

1930 
cs_ba£64_decode
(c⁄° *
s
, 
Àn
, *
d°
, *
dec_Àn
);

1932 #ifde‡
__˝lu•lus


1939 #ifde‡
MG_MODULE_LINES


1947 #i‚de‡
CS_COMMON_STR_UTIL_H_


1948 
	#CS_COMMON_STR_UTIL_H_


	)

1950 
	~<°d¨g.h
>

1951 
	~<°dlib.h
>

1955 #i‚de‡
CS_ENABLE_STRDUP


1956 
	#CS_ENABLE_STRDUP
 0

	)

1959 #i‚de‡
CS_ENABLE_TO64


1960 
	#CS_ENABLE_TO64
 0

	)

1967 
	#CS_STRINGIFY_LIT
(
x
Ë#x

	)

1978 
	#CS_STRINGIFY_MACRO
(
x
Ë
	`CS_STRINGIFY_LIT
(x)

	)

1980 #ifde‡
__˝lu•lus


1984 
size_t
 
c_°∫Àn
(c⁄° *
s
, size_à
maxÀn
);

1985 
c_¢¥ötf
(*
buf
, 
size_t
 
buf_size
, c⁄° *
f‹m©
, ...);

1986 
c_v¢¥ötf
(*
buf
, 
size_t
 
buf_size
, c⁄° *
f‹m©
, 
va_li°
 
≠
);

1991 c⁄° *
c_°∫°r
(c⁄° *
s
, c⁄° *
föd
, 
size_t
 
¶í
);

1998 
cs_to_hex
(*
to
, c⁄° *
p
, 
size_t
 
Àn
);

2004 
cs_‰om_hex
(*
to
, c⁄° *
p
, 
size_t
 
Àn
);

2006 #i‡
CS_ENABLE_STRDUP


2007 *
°rdup
(c⁄° *
§c
);

2010 #i‡
CS_ENABLE_TO64


2011 
	~<°döt.h
>

2015 
öt64_t
 
cs_to64
(c⁄° *
s
);

2021 
mg_nˇ£cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
Àn
);

2026 
mg_ˇ£cmp
(c⁄° *
s1
, c⁄° *
s2
);

2043 
mg_a•rötf
(**
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...);

2046 
mg_av¥ötf
(**
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
≠
);

2048 #ifde‡
__˝lu•lus


2053 #ifde‡
MG_MODULE_LINES


2089 #i‚de‡
_SYS_QUEUE_H_


2090 
	#_SYS_QUEUE_H_


	)

2165 #ifde‡
QUEUE_MACRO_DEBUG


2167 
	sqm_åa˚
 {

2168 
œ°löe
;

2169 
¥evlöe
;

2170 c⁄° *
œ°fûe
;

2171 c⁄° *
¥evfûe
;

2174 
	#TRACEBUF
 
qm_åa˚
 
åa˚
;

	)

2175 
	#TRACEBUF_INITIALIZER
 { 
__LINE__
, 0, 
__FILE__
, 
NULL
 } ,

	)

2176 
	#TRASHIT
(
x
Ëdÿ{(xË(*)-1;} 0)

	)

2177 
	#QMD_SAVELINK
(
«me
, 
lök
Ë**«mê(*)&÷ök)

	)

2179 
	#QMD_TRACE_HEAD
(
hód
) do { \

2180 (
hód
)->
åa˚
.
¥evlöe
 = (hód)->åa˚.
œ°löe
; \

2181 (
hód
)->
åa˚
.
¥evfûe
 = (hód)->åa˚.
œ°fûe
; \

2182 (
hód
)->
åa˚
.
œ°löe
 = 
__LINE__
; \

2183 (
hód
)->
åa˚
.
œ°fûe
 = 
__FILE__
; \

2184 } 0)

	)

2186 
	#QMD_TRACE_ELEM
(
ñem
) do { \

2187 (
ñem
)->
åa˚
.
¥evlöe
 = (ñem)->åa˚.
œ°löe
; \

2188 (
ñem
)->
åa˚
.
¥evfûe
 = (ñem)->åa˚.
œ°fûe
; \

2189 (
ñem
)->
åa˚
.
œ°löe
 = 
__LINE__
; \

2190 (
ñem
)->
åa˚
.
œ°fûe
 = 
__FILE__
; \

2191 } 0)

	)

2194 
	#QMD_TRACE_ELEM
(
ñem
)

	)

2195 
	#QMD_TRACE_HEAD
(
hód
)

	)

2196 
	#QMD_SAVELINK
(
«me
, 
lök
)

	)

2197 
	#TRACEBUF


	)

2198 
	#TRACEBUF_INITIALIZER


	)

2199 
	#TRASHIT
(
x
)

	)

2202 #ifde‡
__˝lu•lus


2206 
	#QUEUE_TYPEOF
(
ty≥
Ë
	)
type

2208 
	#QUEUE_TYPEOF
(
ty≥
Ë
	)
type

2214 
	#SLIST_HEAD
(
«me
, 
ty≥
) \

2215 
	s«me
 { \

2216 
ty≥
 *
¶h_fú°
; \

2217 }

	)

2219 
	#SLIST_CLASS_HEAD
(
«me
, 
ty≥
) \

2220 
	s«me
 { \

2221 
˛ass
 
ty≥
 *
¶h_fú°
; \

2222 }

	)

2224 
	#SLIST_HEAD_INITIALIZER
(
hód
) \

2225 { 
NULL
 }

	)

2227 
	#SLIST_ENTRY
(
ty≥
) \

2229 
ty≥
 *
¶e_√xt
; \

2230 }

	)

2232 
	#SLIST_CLASS_ENTRY
(
ty≥
) \

2234 
˛ass
 
ty≥
 *
¶e_√xt
; \

2235 }

	)

2240 
	#SLIST_EMPTY
(
hód
Ë((hód)->
¶h_fú°
 =
NULL
)

	)

2242 
	#SLIST_FIRST
(
hód
Ë((hód)->
¶h_fú°
)

	)

2244 
	#SLIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

2245 (
v¨
Ë
	`SLIST_FIRST
((
hód
)); \

2246 (
v¨
); \

2247 (
v¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
))

	)

2249 
	#SLIST_FOREACH_FROM
(
v¨
, 
hód
, 
fõld
) \

2250 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`SLIST_FIRST
((
hód
))); \

2251 (
v¨
); \

2252 (
v¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
))

	)

2254 
	#SLIST_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

2255 (
v¨
Ë
	`SLIST_FIRST
((
hód
)); \

2256 (
v¨
Ë&& ((
tv¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
), 1); \

2257 (
v¨
Ë(
tv¨
))

	)

2259 
	#SLIST_FOREACH_FROM_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

2260 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`SLIST_FIRST
((
hód
))); \

2261 (
v¨
Ë&& ((
tv¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
), 1); \

2262 (
v¨
Ë(
tv¨
))

	)

2264 
	#SLIST_FOREACH_PREVPTR
(
v¨
, 
v¨p
, 
hód
, 
fõld
) \

2265 (
v¨p
Ë&
	`SLIST_FIRST
((
hód
)); \

2266 ((
v¨
Ë*(
v¨p
)Ë!
NULL
; \

2267 (
v¨p
Ë&
	`SLIST_NEXT
((
v¨
), 
fõld
))

	)

2269 
	#SLIST_INIT
(
hód
) do { \

2270 
	`SLIST_FIRST
((
hód
)Ë
NULL
; \

2271 } 0)

	)

2273 
	#SLIST_INSERT_AFTER
(
¶i°ñm
, 
ñm
, 
fõld
) do { \

2274 
	`SLIST_NEXT
((
ñm
), 
fõld
ËSLIST_NEXT((
¶i°ñm
), field); \

2275 
	`SLIST_NEXT
((
¶i°ñm
), 
fõld
Ë(
ñm
); \

2276 } 0)

	)

2278 
	#SLIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

2279 
	`SLIST_NEXT
((
ñm
), 
fõld
Ë
	`SLIST_FIRST
((
hód
)); \

2280 
	`SLIST_FIRST
((
hód
)Ë(
ñm
); \

2281 } 0)

	)

2283 
	#SLIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
¶e_√xt
)

	)

2285 
	#SLIST_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

2286 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
¶e_√xt
); \

2287 i‡(
	`SLIST_FIRST
((
hód
)Ë=(
ñm
)) { \

2288 
	`SLIST_REMOVE_HEAD
((
hód
), 
fõld
); \

2291 
	`QUEUE_TYPEOF
(
ty≥
Ë*
cuªlm
 = 
	`SLIST_FIRST
(
hód
); \

2292 
	`SLIST_NEXT
(
cuªlm
, 
fõld
Ë!(
ñm
)) \

2293 
cuªlm
 = 
	`SLIST_NEXT
(cuªlm, 
fõld
); \

2294 
	`SLIST_REMOVE_AFTER
(
cuªlm
, 
fõld
); \

2296 
	`TRASHIT
(*
ﬁd√xt
); \

2297 } 0)

	)

2299 
	#SLIST_REMOVE_AFTER
(
ñm
, 
fõld
) do { \

2300 
	`SLIST_NEXT
(
ñm
, 
fõld
) = \

2301 
	`SLIST_NEXT
(SLIST_NEXT(
ñm
, 
fõld
), field); \

2302 } 0)

	)

2304 
	#SLIST_REMOVE_HEAD
(
hód
, 
fõld
) do { \

2305 
	`SLIST_FIRST
((
hód
)Ë
	`SLIST_NEXT
(SLIST_FIRST((hód)), 
fõld
); \

2306 } 0)

	)

2308 
	#SLIST_SWAP
(
hód1
, 
hód2
, 
ty≥
) do { \

2309 
	`QUEUE_TYPEOF
(
ty≥
Ë*
sw≠_fú°
 = 
	`SLIST_FIRST
(
hód1
); \

2310 
	`SLIST_FIRST
(
hód1
ËSLIST_FIRST(
hód2
); \

2311 
	`SLIST_FIRST
(
hód2
Ë
sw≠_fú°
; \

2312 } 0)

	)

2317 
	#STAILQ_HEAD
(
«me
, 
ty≥
) \

2318 
	s«me
 { \

2319 
ty≥
 *
°qh_fú°
; \

2320 
ty≥
 **
°qh_œ°
; \

2321 }

	)

2323 
	#STAILQ_CLASS_HEAD
(
«me
, 
ty≥
) \

2324 
	s«me
 { \

2325 
˛ass
 
ty≥
 *
°qh_fú°
; \

2326 
˛ass
 
ty≥
 **
°qh_œ°
; \

2327 }

	)

2329 
	#STAILQ_HEAD_INITIALIZER
(
hód
) \

2330 { 
NULL
, &(
hód
).
°qh_fú°
 }

	)

2332 
	#STAILQ_ENTRY
(
ty≥
) \

2334 
ty≥
 *
°qe_√xt
; \

2335 }

	)

2337 
	#STAILQ_CLASS_ENTRY
(
ty≥
) \

2339 
˛ass
 
ty≥
 *
°qe_√xt
; \

2340 }

	)

2345 
	#STAILQ_CONCAT
(
hód1
, 
hód2
) do { \

2346 i‡(!
	`STAILQ_EMPTY
((
hód2
))) { \

2347 *(
hód1
)->
°qh_œ°
 = (
hód2
)->
°qh_fú°
; \

2348 (
hód1
)->
°qh_œ°
 = (
hód2
)->stqh_last; \

2349 
	`STAILQ_INIT
((
hód2
)); \

2351 } 0)

	)

2353 
	#STAILQ_EMPTY
(
hód
Ë((hód)->
°qh_fú°
 =
NULL
)

	)

2355 
	#STAILQ_FIRST
(
hód
Ë((hód)->
°qh_fú°
)

	)

2357 
	#STAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

2358 (
v¨
Ë
	`STAILQ_FIRST
((
hód
)); \

2359 (
v¨
); \

2360 (
v¨
Ë
	`STAILQ_NEXT
((v¨), 
fõld
))

	)

2362 
	#STAILQ_FOREACH_FROM
(
v¨
, 
hód
, 
fõld
) \

2363 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`STAILQ_FIRST
((
hód
))); \

2364 (
v¨
); \

2365 (
v¨
Ë
	`STAILQ_NEXT
((v¨), 
fõld
))

	)

2367 
	#STAILQ_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

2368 (
v¨
Ë
	`STAILQ_FIRST
((
hód
)); \

2369 (
v¨
Ë&& ((
tv¨
Ë
	`STAILQ_NEXT
((v¨), 
fõld
), 1); \

2370 (
v¨
Ë(
tv¨
))

	)

2372 
	#STAILQ_FOREACH_FROM_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

2373 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`STAILQ_FIRST
((
hód
))); \

2374 (
v¨
Ë&& ((
tv¨
Ë
	`STAILQ_NEXT
((v¨), 
fõld
), 1); \

2375 (
v¨
Ë(
tv¨
))

	)

2377 
	#STAILQ_INIT
(
hód
) do { \

2378 
	`STAILQ_FIRST
((
hód
)Ë
NULL
; \

2379 (
hód
)->
°qh_œ°
 = &
	`STAILQ_FIRST
((head)); \

2380 } 0)

	)

2382 
	#STAILQ_INSERT_AFTER
(
hód
, 
tqñm
, 
ñm
, 
fõld
) do { \

2383 i‡((
	`STAILQ_NEXT
((
ñm
), 
fõld
ËSTAILQ_NEXT((
tqñm
), fõld)Ë=
NULL
)\

2384 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

2385 
	`STAILQ_NEXT
((
tqñm
), 
fõld
Ë(
ñm
); \

2386 } 0)

	)

2388 
	#STAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

2389 i‡((
	`STAILQ_NEXT
((
ñm
), 
fõld
Ë
	`STAILQ_FIRST
((
hód
))Ë=
NULL
) \

2390 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

2391 
	`STAILQ_FIRST
((
hód
)Ë(
ñm
); \

2392 } 0)

	)

2394 
	#STAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

2395 
	`STAILQ_NEXT
((
ñm
), 
fõld
Ë
NULL
; \

2396 *(
hód
)->
°qh_œ°
 = (
ñm
); \

2397 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

2398 } 0)

	)

2400 
	#STAILQ_LAST
(
hód
, 
ty≥
, 
fõld
) \

2401 (
	`STAILQ_EMPTY
((
hód
)Ë? 
NULL
 : \

2402 
	`__c⁄èöîof
((
hód
)->
°qh_œ°
, \

2403 
	`QUEUE_TYPEOF
(
ty≥
), 
fõld
.
°qe_√xt
))

	)

2405 
	#STAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
°qe_√xt
)

	)

2407 
	#STAILQ_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

2408 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
°qe_√xt
); \

2409 i‡(
	`STAILQ_FIRST
((
hód
)Ë=(
ñm
)) { \

2410 
	`STAILQ_REMOVE_HEAD
((
hód
), 
fõld
); \

2413 
	`QUEUE_TYPEOF
(
ty≥
Ë*
cuªlm
 = 
	`STAILQ_FIRST
(
hód
); \

2414 
	`STAILQ_NEXT
(
cuªlm
, 
fõld
Ë!(
ñm
)) \

2415 
cuªlm
 = 
	`STAILQ_NEXT
(cuªlm, 
fõld
); \

2416 
	`STAILQ_REMOVE_AFTER
(
hód
, 
cuªlm
, 
fõld
); \

2418 
	`TRASHIT
(*
ﬁd√xt
); \

2419 } 0)

	)

2421 
	#STAILQ_REMOVE_AFTER
(
hód
, 
ñm
, 
fõld
) do { \

2422 i‡((
	`STAILQ_NEXT
(
ñm
, 
fõld
) = \

2423 
	`STAILQ_NEXT
(STAILQ_NEXT(
ñm
, 
fõld
), fõld)Ë=
NULL
) \

2424 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

2425 } 0)

	)

2427 
	#STAILQ_REMOVE_HEAD
(
hód
, 
fõld
) do { \

2428 i‡((
	`STAILQ_FIRST
((
hód
)) = \

2429 
	`STAILQ_NEXT
(
	`STAILQ_FIRST
((
hód
)), 
fõld
)Ë=
NULL
) \

2430 (
hód
)->
°qh_œ°
 = &
	`STAILQ_FIRST
((head)); \

2431 } 0)

	)

2433 
	#STAILQ_SWAP
(
hód1
, 
hód2
, 
ty≥
) do { \

2434 
	`QUEUE_TYPEOF
(
ty≥
Ë*
sw≠_fú°
 = 
	`STAILQ_FIRST
(
hód1
); \

2435 
	`QUEUE_TYPEOF
(
ty≥
Ë**
sw≠_œ°
 = (
hód1
)->
°qh_œ°
; \

2436 
	`STAILQ_FIRST
(
hód1
ËSTAILQ_FIRST(
hód2
); \

2437 (
hód1
)->
°qh_œ°
 = (
hód2
)->stqh_last; \

2438 
	`STAILQ_FIRST
(
hód2
Ë
sw≠_fú°
; \

2439 (
hód2
)->
°qh_œ°
 = 
sw≠_œ°
; \

2440 i‡(
	`STAILQ_EMPTY
(
hód1
)) \

2441 (
hód1
)->
°qh_œ°
 = &
	`STAILQ_FIRST
(head1); \

2442 i‡(
	`STAILQ_EMPTY
(
hód2
)) \

2443 (
hód2
)->
°qh_œ°
 = &
	`STAILQ_FIRST
(head2); \

2444 } 0)

	)

2450 
	#LIST_HEAD
(
«me
, 
ty≥
) \

2451 
	s«me
 { \

2452 
ty≥
 *
lh_fú°
; \

2453 }

	)

2455 
	#LIST_CLASS_HEAD
(
«me
, 
ty≥
) \

2456 
	s«me
 { \

2457 
˛ass
 
ty≥
 *
lh_fú°
; \

2458 }

	)

2460 
	#LIST_HEAD_INITIALIZER
(
hód
) \

2461 { 
NULL
 }

	)

2463 
	#LIST_ENTRY
(
ty≥
) \

2465 
ty≥
 *
À_√xt
; \

2466 
ty≥
 **
À_¥ev
; \

2467 }

	)

2469 
	#LIST_CLASS_ENTRY
(
ty≥
) \

2471 
˛ass
 
ty≥
 *
À_√xt
; \

2472 
˛ass
 
ty≥
 **
À_¥ev
; \

2473 }

	)

2479 #i‡(
deföed
(
_KERNEL
Ë&& deföed(
INVARIANTS
))

2480 
	#QMD_LIST_CHECK_HEAD
(
hód
, 
fõld
) do { \

2481 i‡(
	`LIST_FIRST
((
hód
)Ë!
NULL
 && \

2482 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 != \

2483 &
	`LIST_FIRST
((
hód
))) \

2484 
	`∑nic
("BadÜi° hód %∞fú°->¥ev !hód", (
hód
)); \

2485 } 0)

	)

2487 
	#QMD_LIST_CHECK_NEXT
(
ñm
, 
fõld
) do { \

2488 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
 && \

2489 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 != \

2490 &((
ñm
)->
fõld
.
À_√xt
)) \

2491 
	`∑nic
("BadÜökÉlm %∞√xt->¥ev !ñm", (
ñm
)); \

2492 } 0)

	)

2494 
	#QMD_LIST_CHECK_PREV
(
ñm
, 
fõld
) do { \

2495 i‡(*(
ñm
)->
fõld
.
À_¥ev
 != (elm)) \

2496 
	`∑nic
("BadÜökÉlm %∞¥ev->√xà!ñm", (
ñm
)); \

2497 } 0)

	)

2499 
	#QMD_LIST_CHECK_HEAD
(
hód
, 
fõld
)

	)

2500 
	#QMD_LIST_CHECK_NEXT
(
ñm
, 
fõld
)

	)

2501 
	#QMD_LIST_CHECK_PREV
(
ñm
, 
fõld
)

	)

2504 
	#LIST_EMPTY
(
hód
Ë((hód)->
lh_fú°
 =
NULL
)

	)

2506 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

2508 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

2509 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

2510 (
v¨
); \

2511 (
v¨
Ë
	`LIST_NEXT
((v¨), 
fõld
))

	)

2513 
	#LIST_FOREACH_FROM
(
v¨
, 
hód
, 
fõld
) \

2514 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`LIST_FIRST
((
hód
))); \

2515 (
v¨
); \

2516 (
v¨
Ë
	`LIST_NEXT
((v¨), 
fõld
))

	)

2518 
	#LIST_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

2519 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

2520 (
v¨
Ë&& ((
tv¨
Ë
	`LIST_NEXT
((v¨), 
fõld
), 1); \

2521 (
v¨
Ë(
tv¨
))

	)

2523 
	#LIST_FOREACH_FROM_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

2524 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`LIST_FIRST
((
hód
))); \

2525 (
v¨
Ë&& ((
tv¨
Ë
	`LIST_NEXT
((v¨), 
fõld
), 1); \

2526 (
v¨
Ë(
tv¨
))

	)

2528 
	#LIST_INIT
(
hód
) do { \

2529 
	`LIST_FIRST
((
hód
)Ë
NULL
; \

2530 } 0)

	)

2532 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

2533 
	`QMD_LIST_CHECK_NEXT
(
li°ñm
, 
fõld
); \

2534 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
ËLIST_NEXT((
li°ñm
), fõld)Ë!
NULL
)\

2535 
	`LIST_NEXT
((
li°ñm
), 
fõld
)->fõld.
À_¥ev
 = \

2536 &
	`LIST_NEXT
((
ñm
), 
fõld
); \

2537 
	`LIST_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

2538 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
li°ñm
), field); \

2539 } 0)

	)

2541 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

2542 
	`QMD_LIST_CHECK_PREV
(
li°ñm
, 
fõld
); \

2543 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

2544 
	`LIST_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

2545 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

2546 (
li°ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field); \

2547 } 0)

	)

2549 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

2550 
	`QMD_LIST_CHECK_HEAD
((
hód
), 
fõld
); \

2551 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
Ë
	`LIST_FIRST
((
hód
))Ë!
NULL
) \

2552 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field);\

2553 
	`LIST_FIRST
((
hód
)Ë(
ñm
); \

2554 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód
)); \

2555 } 0)

	)

2557 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

2559 
	#LIST_PREV
(
ñm
, 
hód
, 
ty≥
, 
fõld
) \

2560 ((
ñm
)->
fõld
.
À_¥ev
 =&
	`LIST_FIRST
((
hód
)Ë? 
NULL
 : \

2561 
	`__c⁄èöîof
((
ñm
)->
fõld
.
À_¥ev
, \

2562 
	`QUEUE_TYPEOF
(
ty≥
), 
fõld
.
À_√xt
))

	)

2564 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

2565 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
À_√xt
); \

2566 
	`QMD_SAVELINK
(
ﬁd¥ev
, (
ñm
)->
fõld
.
À_¥ev
); \

2567 
	`QMD_LIST_CHECK_NEXT
(
ñm
, 
fõld
); \

2568 
	`QMD_LIST_CHECK_PREV
(
ñm
, 
fõld
); \

2569 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
) \

2570 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 = \

2571 (
ñm
)->
fõld
.
À_¥ev
; \

2572 *(
ñm
)->
fõld
.
À_¥ev
 = 
	`LIST_NEXT
((elm), field); \

2573 
	`TRASHIT
(*
ﬁd√xt
); \

2574 
	`TRASHIT
(*
ﬁd¥ev
); \

2575 } 0)

	)

2577 
	#LIST_SWAP
(
hód1
, 
hód2
, 
ty≥
, 
fõld
) do { \

2578 
	`QUEUE_TYPEOF
(
ty≥
Ë*
sw≠_tmp
 = 
	`LIST_FIRST
(
hód1
); \

2579 
	`LIST_FIRST
((
hód1
)ËLIST_FIRST((
hód2
)); \

2580 
	`LIST_FIRST
((
hód2
)Ë
sw≠_tmp
; \

2581 i‡((
sw≠_tmp
 = 
	`LIST_FIRST
((
hód1
))Ë!
NULL
) \

2582 
sw≠_tmp
->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód1
)); \

2583 i‡((
sw≠_tmp
 = 
	`LIST_FIRST
((
hód2
))Ë!
NULL
) \

2584 
sw≠_tmp
->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód2
)); \

2585 } 0)

	)

2590 
	#TAILQ_HEAD
(
«me
, 
ty≥
) \

2591 
	s«me
 { \

2592 
ty≥
 *
tqh_fú°
; \

2593 
ty≥
 **
tqh_œ°
; \

2594 
TRACEBUF
 \

2595 }

	)

2597 
	#TAILQ_CLASS_HEAD
(
«me
, 
ty≥
) \

2598 
	s«me
 { \

2599 
˛ass
 
ty≥
 *
tqh_fú°
; \

2600 
˛ass
 
ty≥
 **
tqh_œ°
; \

2601 
TRACEBUF
 \

2602 }

	)

2604 
	#TAILQ_HEAD_INITIALIZER
(
hód
) \

2605 { 
NULL
, &(
hód
).
tqh_fú°
, 
TRACEBUF_INITIALIZER
 }

	)

2607 
	#TAILQ_ENTRY
(
ty≥
) \

2609 
ty≥
 *
tqe_√xt
; \

2610 
ty≥
 **
tqe_¥ev
; \

2611 
TRACEBUF
 \

2612 }

	)

2614 
	#TAILQ_CLASS_ENTRY
(
ty≥
) \

2616 
˛ass
 
ty≥
 *
tqe_√xt
; \

2617 
˛ass
 
ty≥
 **
tqe_¥ev
; \

2618 
TRACEBUF
 \

2619 }

	)

2624 #i‡(
deföed
(
_KERNEL
Ë&& deföed(
INVARIANTS
))

2625 
	#QMD_TAILQ_CHECK_HEAD
(
hód
, 
fõld
) do { \

2626 i‡(!
	`TAILQ_EMPTY
(
hód
) && \

2627 
	`TAILQ_FIRST
((
hód
))->
fõld
.
tqe_¥ev
 != \

2628 &
	`TAILQ_FIRST
((
hód
))) \

2629 
	`∑nic
("BadÅaûq hód %∞fú°->¥ev !hód", (
hód
)); \

2630 } 0)

	)

2632 
	#QMD_TAILQ_CHECK_TAIL
(
hód
, 
fõld
) do { \

2633 i‡(*(
hód
)->
tqh_œ°
 !
NULL
) \

2634 
	`∑nic
("BadÅaûq NEXT(%p->tqh_œ°Ë!NULL", (
hód
)); \

2635 } 0)

	)

2637 
	#QMD_TAILQ_CHECK_NEXT
(
ñm
, 
fõld
) do { \

2638 i‡(
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë!
NULL
 && \

2639 
	`TAILQ_NEXT
((
ñm
), 
fõld
)->fõld.
tqe_¥ev
 != \

2640 &((
ñm
)->
fõld
.
tqe_√xt
)) \

2641 
	`∑nic
("BadÜökÉlm %∞√xt->¥ev !ñm", (
ñm
)); \

2642 } 0)

	)

2644 
	#QMD_TAILQ_CHECK_PREV
(
ñm
, 
fõld
) do { \

2645 i‡(*(
ñm
)->
fõld
.
tqe_¥ev
 != (elm)) \

2646 
	`∑nic
("BadÜökÉlm %∞¥ev->√xà!ñm", (
ñm
)); \

2647 } 0)

	)

2649 
	#QMD_TAILQ_CHECK_HEAD
(
hód
, 
fõld
)

	)

2650 
	#QMD_TAILQ_CHECK_TAIL
(
hód
, 
hód«me
)

	)

2651 
	#QMD_TAILQ_CHECK_NEXT
(
ñm
, 
fõld
)

	)

2652 
	#QMD_TAILQ_CHECK_PREV
(
ñm
, 
fõld
)

	)

2655 
	#TAILQ_CONCAT
(
hód1
, 
hód2
, 
fõld
) do { \

2656 i‡(!
	`TAILQ_EMPTY
(
hód2
)) { \

2657 *(
hód1
)->
tqh_œ°
 = (
hód2
)->
tqh_fú°
; \

2658 (
hód2
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 = (
hód1
)->
tqh_œ°
; \

2659 (
hód1
)->
tqh_œ°
 = (
hód2
)->tqh_last; \

2660 
	`TAILQ_INIT
((
hód2
)); \

2661 
	`QMD_TRACE_HEAD
(
hód1
); \

2662 
	`QMD_TRACE_HEAD
(
hód2
); \

2664 } 0)

	)

2666 
	#TAILQ_EMPTY
(
hód
Ë((hód)->
tqh_fú°
 =
NULL
)

	)

2668 
	#TAILQ_FIRST
(
hód
Ë((hód)->
tqh_fú°
)

	)

2670 
	#TAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

2671 (
v¨
Ë
	`TAILQ_FIRST
((
hód
)); \

2672 (
v¨
); \

2673 (
v¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
))

	)

2675 
	#TAILQ_FOREACH_FROM
(
v¨
, 
hód
, 
fõld
) \

2676 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`TAILQ_FIRST
((
hód
))); \

2677 (
v¨
); \

2678 (
v¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
))

	)

2680 
	#TAILQ_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

2681 (
v¨
Ë
	`TAILQ_FIRST
((
hód
)); \

2682 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
), 1); \

2683 (
v¨
Ë(
tv¨
))

	)

2685 
	#TAILQ_FOREACH_FROM_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

2686 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`TAILQ_FIRST
((
hód
))); \

2687 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
), 1); \

2688 (
v¨
Ë(
tv¨
))

	)

2690 
	#TAILQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
hód«me
, 
fõld
) \

2691 (
v¨
Ë
	`TAILQ_LAST
((
hód
), 
hód«me
); \

2692 (
v¨
); \

2693 (
v¨
Ë
	`TAILQ_PREV
((v¨), 
hód«me
, 
fõld
))

	)

2695 
	#TAILQ_FOREACH_REVERSE_FROM
(
v¨
, 
hód
, 
hód«me
, 
fõld
) \

2696 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`TAILQ_LAST
((
hód
), 
hód«me
)); \

2697 (
v¨
); \

2698 (
v¨
Ë
	`TAILQ_PREV
((v¨), 
hód«me
, 
fõld
))

	)

2700 
	#TAILQ_FOREACH_REVERSE_SAFE
(
v¨
, 
hód
, 
hód«me
, 
fõld
, 
tv¨
) \

2701 (
v¨
Ë
	`TAILQ_LAST
((
hód
), 
hód«me
); \

2702 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_PREV
((v¨), 
hód«me
, 
fõld
), 1); \

2703 (
v¨
Ë(
tv¨
))

	)

2705 
	#TAILQ_FOREACH_REVERSE_FROM_SAFE
(
v¨
, 
hód
, 
hód«me
, 
fõld
, 
tv¨
) \

2706 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`TAILQ_LAST
((
hód
), 
hód«me
)); \

2707 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_PREV
((v¨), 
hód«me
, 
fõld
), 1); \

2708 (
v¨
Ë(
tv¨
))

	)

2710 
	#TAILQ_INIT
(
hód
) do { \

2711 
	`TAILQ_FIRST
((
hód
)Ë
NULL
; \

2712 (
hód
)->
tqh_œ°
 = &
	`TAILQ_FIRST
((head)); \

2713 
	`QMD_TRACE_HEAD
(
hód
); \

2714 } 0)

	)

2716 
	#TAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

2717 
	`QMD_TAILQ_CHECK_NEXT
(
li°ñm
, 
fõld
); \

2718 i‡((
	`TAILQ_NEXT
((
ñm
), 
fõld
ËTAILQ_NEXT((
li°ñm
), fõld)Ë!
NULL
)\

2719 
	`TAILQ_NEXT
((
ñm
), 
fõld
)->fõld.
tqe_¥ev
 = \

2720 &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

2722 (
hód
)->
tqh_œ°
 = &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

2723 
	`QMD_TRACE_HEAD
(
hód
); \

2725 
	`TAILQ_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

2726 (
ñm
)->
fõld
.
tqe_¥ev
 = &
	`TAILQ_NEXT
((
li°ñm
), field); \

2727 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

2728 
	`QMD_TRACE_ELEM
(&(
li°ñm
)->
fõld
); \

2729 } 0)

	)

2731 
	#TAILQ_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

2732 
	`QMD_TAILQ_CHECK_PREV
(
li°ñm
, 
fõld
); \

2733 (
ñm
)->
fõld
.
tqe_¥ev
 = (
li°ñm
)->field.tqe_prev; \

2734 
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

2735 *(
li°ñm
)->
fõld
.
tqe_¥ev
 = (
ñm
); \

2736 (
li°ñm
)->
fõld
.
tqe_¥ev
 = &
	`TAILQ_NEXT
((
ñm
), field); \

2737 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

2738 
	`QMD_TRACE_ELEM
(&(
li°ñm
)->
fõld
); \

2739 } 0)

	)

2741 
	#TAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

2742 
	`QMD_TAILQ_CHECK_HEAD
(
hód
, 
fõld
); \

2743 i‡((
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë
	`TAILQ_FIRST
((
hód
))Ë!
NULL
) \

2744 
	`TAILQ_FIRST
((
hód
))->
fõld
.
tqe_¥ev
 = \

2745 &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

2747 (
hód
)->
tqh_œ°
 = &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

2748 
	`TAILQ_FIRST
((
hód
)Ë(
ñm
); \

2749 (
ñm
)->
fõld
.
tqe_¥ev
 = &
	`TAILQ_FIRST
((
hód
)); \

2750 
	`QMD_TRACE_HEAD
(
hód
); \

2751 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

2752 } 0)

	)

2754 
	#TAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

2755 
	`QMD_TAILQ_CHECK_TAIL
(
hód
, 
fõld
); \

2756 
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë
NULL
; \

2757 (
ñm
)->
fõld
.
tqe_¥ev
 = (
hód
)->
tqh_œ°
; \

2758 *(
hód
)->
tqh_œ°
 = (
ñm
); \

2759 (
hód
)->
tqh_œ°
 = &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

2760 
	`QMD_TRACE_HEAD
(
hód
); \

2761 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

2762 } 0)

	)

2764 
	#TAILQ_LAST
(
hód
, 
hód«me
) \

2765 (*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_œ°))

	)

2767 
	#TAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
tqe_√xt
)

	)

2769 
	#TAILQ_PREV
(
ñm
, 
hód«me
, 
fõld
) \

2770 (*(((
hód«me
 *)((
ñm
)->
fõld
.
tqe_¥ev
))->
tqh_œ°
))

	)

2772 
	#TAILQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

2773 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
tqe_√xt
); \

2774 
	`QMD_SAVELINK
(
ﬁd¥ev
, (
ñm
)->
fõld
.
tqe_¥ev
); \

2775 
	`QMD_TAILQ_CHECK_NEXT
(
ñm
, 
fõld
); \

2776 
	`QMD_TAILQ_CHECK_PREV
(
ñm
, 
fõld
); \

2777 i‡((
	`TAILQ_NEXT
((
ñm
), 
fõld
)Ë!
NULL
) \

2778 
	`TAILQ_NEXT
((
ñm
), 
fõld
)->fõld.
tqe_¥ev
 = \

2779 (
ñm
)->
fõld
.
tqe_¥ev
; \

2781 (
hód
)->
tqh_œ°
 = (
ñm
)->
fõld
.
tqe_¥ev
; \

2782 
	`QMD_TRACE_HEAD
(
hód
); \

2784 *(
ñm
)->
fõld
.
tqe_¥ev
 = 
	`TAILQ_NEXT
((elm), field); \

2785 
	`TRASHIT
(*
ﬁd√xt
); \

2786 
	`TRASHIT
(*
ﬁd¥ev
); \

2787 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

2788 } 0)

	)

2790 
	#TAILQ_SWAP
(
hód1
, 
hód2
, 
ty≥
, 
fõld
) do { \

2791 
	`QUEUE_TYPEOF
(
ty≥
Ë*
sw≠_fú°
 = (
hód1
)->
tqh_fú°
; \

2792 
	`QUEUE_TYPEOF
(
ty≥
Ë**
sw≠_œ°
 = (
hód1
)->
tqh_œ°
; \

2793 (
hód1
)->
tqh_fú°
 = (
hód2
)->tqh_first; \

2794 (
hód1
)->
tqh_œ°
 = (
hód2
)->tqh_last; \

2795 (
hód2
)->
tqh_fú°
 = 
sw≠_fú°
; \

2796 (
hód2
)->
tqh_œ°
 = 
sw≠_œ°
; \

2797 i‡((
sw≠_fú°
 = (
hód1
)->
tqh_fú°
Ë!
NULL
) \

2798 
sw≠_fú°
->
fõld
.
tqe_¥ev
 = &(
hód1
)->
tqh_fú°
; \

2800 (
hód1
)->
tqh_œ°
 = &(hód1)->
tqh_fú°
; \

2801 i‡((
sw≠_fú°
 = (
hód2
)->
tqh_fú°
Ë!
NULL
) \

2802 
sw≠_fú°
->
fõld
.
tqe_¥ev
 = &(
hód2
)->
tqh_fú°
; \

2804 (
hód2
)->
tqh_œ°
 = &(hód2)->
tqh_fú°
; \

2805 } 0)

	)

2808 #ifde‡
MG_MODULE_LINES


2816 #i‚de‡
CS_MONGOOSE_SRC_FEATURES_H_


2817 
	#CS_MONGOOSE_SRC_FEATURES_H_


	)

2819 #i‚de‡
MG_DISABLE_HTTP_DIGEST_AUTH


2820 
	#MG_DISABLE_HTTP_DIGEST_AUTH
 0

	)

2823 #i‚de‡
MG_DISABLE_HTTP_KEEP_ALIVE


2824 
	#MG_DISABLE_HTTP_KEEP_ALIVE
 0

	)

2827 #i‚de‡
MG_DISABLE_PFS


2828 
	#MG_DISABLE_PFS
 0

	)

2831 #i‚de‡
MG_DISABLE_WS_RANDOM_MASK


2832 
	#MG_DISABLE_WS_RANDOM_MASK
 0

	)

2835 #i‚de‡
MG_ENABLE_ASYNC_RESOLVER


2836 
	#MG_ENABLE_ASYNC_RESOLVER
 1

	)

2839 #i‚de‡
MG_ENABLE_BROADCAST


2840 
	#MG_ENABLE_BROADCAST
 0

	)

2843 #i‚de‡
MG_ENABLE_COAP


2844 
	#MG_ENABLE_COAP
 0

	)

2847 #i‚de‡
MG_ENABLE_DEBUG


2848 
	#MG_ENABLE_DEBUG
 0

	)

2851 #i‚de‡
MG_ENABLE_DIRECTORY_LISTING


2852 
	#MG_ENABLE_DIRECTORY_LISTING
 0

	)

2855 #i‚de‡
MG_ENABLE_DNS


2856 
	#MG_ENABLE_DNS
 1

	)

2859 #i‚de‡
MG_ENABLE_DNS_SERVER


2860 
	#MG_ENABLE_DNS_SERVER
 0

	)

2863 #i‚de‡
MG_ENABLE_FAKE_DAVLOCK


2864 
	#MG_ENABLE_FAKE_DAVLOCK
 0

	)

2867 #i‚de‡
MG_ENABLE_FILESYSTEM


2868 
	#MG_ENABLE_FILESYSTEM
 0

	)

2871 #i‚de‡
MG_ENABLE_GETADDRINFO


2872 
	#MG_ENABLE_GETADDRINFO
 0

	)

2875 #i‚de‡
MG_ENABLE_HEXDUMP


2876 
	#MG_ENABLE_HEXDUMP
 
CS_ENABLE_STDIO


	)

2879 #i‚de‡
MG_ENABLE_HTTP


2880 
	#MG_ENABLE_HTTP
 1

	)

2883 #i‚de‡
MG_ENABLE_HTTP_CGI


2884 
	#MG_ENABLE_HTTP_CGI
 0

	)

2887 #i‚de‡
MG_ENABLE_HTTP_SSI


2888 
	#MG_ENABLE_HTTP_SSI
 
MG_ENABLE_FILESYSTEM


	)

2891 #i‚de‡
MG_ENABLE_HTTP_SSI_EXEC


2892 
	#MG_ENABLE_HTTP_SSI_EXEC
 0

	)

2895 #i‚de‡
MG_ENABLE_HTTP_STREAMING_MULTIPART


2896 
	#MG_ENABLE_HTTP_STREAMING_MULTIPART
 0

	)

2899 #i‚de‡
MG_ENABLE_HTTP_WEBDAV


2900 
	#MG_ENABLE_HTTP_WEBDAV
 0

	)

2903 #i‚de‡
MG_ENABLE_HTTP_WEBSOCKET


2904 
	#MG_ENABLE_HTTP_WEBSOCKET
 
MG_ENABLE_HTTP


	)

2907 #i‚de‡
MG_ENABLE_IPV6


2908 
	#MG_ENABLE_IPV6
 0

	)

2911 #i‚de‡
MG_ENABLE_JAVASCRIPT


2912 
	#MG_ENABLE_JAVASCRIPT
 0

	)

2915 #i‚de‡
MG_ENABLE_MQTT


2916 
	#MG_ENABLE_MQTT
 1

	)

2919 #i‚de‡
MG_ENABLE_MQTT_BROKER


2920 
	#MG_ENABLE_MQTT_BROKER
 0

	)

2923 #i‚de‡
MG_ENABLE_SSL


2924 
	#MG_ENABLE_SSL
 0

	)

2927 #i‚de‡
MG_ENABLE_SYNC_RESOLVER


2928 
	#MG_ENABLE_SYNC_RESOLVER
 0

	)

2931 #i‚de‡
MG_ENABLE_STDIO


2932 
	#MG_ENABLE_STDIO
 
CS_ENABLE_STDIO


	)

2935 #i‚de‡
MG_NET_IF


2936 
	#MG_NET_IF
 
MG_NET_IF_SOCKET


	)

2939 #i‚de‡
MG_SSL_IF


2940 
	#MG_SSL_IF
 
MG_SSL_IF_OPENSSL


	)

2943 #i‚de‡
MG_ENABLE_THREADS


2944 #ifde‡
_WIN32


2946 
	#MG_ENABLE_THREADS
 0

	)

2948 
	#MG_ENABLE_THREADS
 0

	)

2952 #i‡
MG_ENABLE_DEBUG
 && !
deföed
(
CS_ENABLE_DEBUG
)

2953 
	#CS_ENABLE_DEBUG
 1

	)

2957 #i‡
MG_ENABLE_MQTT_BROKER
 && !
MG_ENABLE_MQTT


2958 #unde‡
MG_ENABLE_MQTT


2959 
	#MG_ENABLE_MQTT
 1

	)

2962 #i‚de‡
MG_ENABLE_HTTP_URL_REWRITES


2963 
	#MG_ENABLE_HTTP_URL_REWRITES
 \

2964 (
CS_PLATFORM
 =
CS_P_WINDOWS
 || CS_PLATFORM =
CS_P_UNIX
)

	)

2967 #i‚de‡
MG_ENABLE_TUN


2968 
	#MG_ENABLE_TUN
 
MG_ENABLE_HTTP_WEBSOCKET


	)

2971 #i‚de‡
MG_ENABLE_SNTP


2972 
	#MG_ENABLE_SNTP
 0

	)

2975 #i‚de‡
MG_ENABLE_EXTRA_ERRORS_DESC


2976 
	#MG_ENABLE_EXTRA_ERRORS_DESC
 0

	)

2980 #ifde‡
MG_MODULE_LINES


2988 #i‚de‡
CS_MONGOOSE_SRC_NET_IF_H_


2989 
	#CS_MONGOOSE_SRC_NET_IF_H_


	)

3003 #ifde‡
__˝lu•lus


3007 
	#MG_MAIN_IFACE
 0

	)

3009 
mg_mgr
;

3010 
mg_c⁄√˘i⁄
;

3011 
sockë_addªss
;

3013 
mg_iÁ˚_vèbÀ
;

3015 
	smg_iÁ˚
 {

3016 
mg_mgr
 *
mgr
;

3017 *
d©a
;

3018 
mg_iÁ˚_vèbÀ
 *
vèbÀ
;

3021 
	smg_iÁ˚_vèbÀ
 {

3022 (*
öô
)(
mg_iÁ˚
 *
iÁ˚
);

3023 (*
‰ì
)(
mg_iÁ˚
 *
iÁ˚
);

3024 (*
add_c⁄n
)(
mg_c⁄√˘i⁄
 *
nc
);

3025 (*
ªmove_c⁄n
)(
mg_c⁄√˘i⁄
 *
nc
);

3026 
time_t
 (*
pﬁl
)(
mg_iÁ˚
 *
iÁ˚
, 
timeout_ms
);

3029 (*
li°í_t˝
)(
mg_c⁄√˘i⁄
 *
nc
, 
sockë_addªss
 *
ß
);

3031 (*
li°í_udp
)(
mg_c⁄√˘i⁄
 *
nc
, 
sockë_addªss
 *
ß
);

3034 (*
c⁄√˘_t˝
)(
mg_c⁄√˘i⁄
 *
nc
, c⁄° 
sockë_addªss
 *
ß
);

3036 (*
c⁄√˘_udp
)(
mg_c⁄√˘i⁄
 *
nc
);

3039 (*
t˝_£nd
)(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
buf
, 
size_t
 
Àn
);

3040 (*
udp_£nd
)(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
buf
, 
size_t
 
Àn
);

3042 (*
ªcved
)(
mg_c⁄√˘i⁄
 *
nc
, 
size_t
 
Àn
);

3045 (*
¸óã_c⁄n
)(
mg_c⁄√˘i⁄
 *
nc
);

3047 (*
de°roy_c⁄n
)(
mg_c⁄√˘i⁄
 *
nc
);

3050 (*
sock_£t
)(
mg_c⁄√˘i⁄
 *
nc
, 
sock_t
 
sock
);

3053 (*
gë_c⁄n_addr
)(
mg_c⁄√˘i⁄
 *
nc
, 
ªmŸe
,

3054 
sockë_addªss
 *
ß
);

3057 
mg_iÁ˚_vèbÀ
 *
mg_iÁ˚s
[];

3058 
mg_num_iÁ˚s
;

3061 
mg_iÁ˚
 *
mg_if_¸óã_iÁ˚
(
mg_iÁ˚_vèbÀ
 *
vèbÀ
,

3062 
mg_mgr
 *
mgr
);

3068 
mg_iÁ˚
 *
mg_föd_iÁ˚
(
mg_mgr
 *
mgr
,

3069 
mg_iÁ˚_vèbÀ
 *
vèbÀ
,

3070 
mg_iÁ˚
 *
‰om
);

3077 
mg_c⁄√˘i⁄
 *
mg_if_ac˚±_√w_c⁄n
(mg_c⁄√˘i⁄ *
lc
);

3078 
mg_if_ac˚±_t˝_cb
(
mg_c⁄√˘i⁄
 *
nc
, 
sockë_addªss
 *
ß
,

3079 
size_t
 
ß_Àn
);

3082 
mg_if_c⁄√˘_cb
(
mg_c⁄√˘i⁄
 *
nc
, 
îr
);

3084 
mg_if_£¡_cb
(
mg_c⁄√˘i⁄
 *
nc
, 
num_£¡
);

3091 
mg_if_ªcv_t˝_cb
(
mg_c⁄√˘i⁄
 *
nc
, *
buf
, 
Àn
, 
own
);

3097 
mg_if_ªcv_udp_cb
(
mg_c⁄√˘i⁄
 *
nc
, *
buf
, 
Àn
,

3098 
sockë_addªss
 *
ß
, 
size_t
 
ß_Àn
);

3103 
mg_if_pﬁl
(
mg_c⁄√˘i⁄
 *
nc
, 
time_t
 
now
);

3106 
mg_if_timî
(
mg_c⁄√˘i⁄
 *
c
, 
now
);

3108 #ifde‡
__˝lu•lus


3113 #ifde‡
MG_MODULE_LINES


3121 #i‚de‡
CS_MONGOOSE_SRC_SSL_IF_H_


3122 
	#CS_MONGOOSE_SRC_SSL_IF_H_


	)

3124 #i‡
MG_ENABLE_SSL


3126 #ifde‡
__˝lu•lus


3130 
mg_s¶_if_˘x
;

3131 
mg_c⁄√˘i⁄
;

3133 
mg_s¶_if_öô
();

3135 
	emg_s¶_if_ªsu…
 {

3136 
MG_SSL_OK
 = 0,

3137 
MG_SSL_WANT_READ
 = -1,

3138 
MG_SSL_WANT_WRITE
 = -2,

3139 
MG_SSL_ERROR
 = -3,

3142 
	smg_s¶_if_c⁄n_∑øms
 {

3143 c⁄° *
˚π
;

3144 c⁄° *
key
;

3145 c⁄° *
ˇ_˚π
;

3146 c⁄° *
£rvî_«me
;

3147 c⁄° *
cùhî_suôes
;

3148 c⁄° *
psk_idítôy
;

3149 c⁄° *
psk_key
;

3152 
mg_s¶_if_ªsu…
 
mg_s¶_if_c⁄n_öô
(

3153 
mg_c⁄√˘i⁄
 *
nc
, c⁄° 
mg_s¶_if_c⁄n_∑øms
 *
∑øms
,

3154 c⁄° **
îr_msg
);

3155 
mg_s¶_if_ªsu…
 
mg_s¶_if_c⁄n_ac˚±
(
mg_c⁄√˘i⁄
 *
nc
,

3156 
mg_c⁄√˘i⁄
 *
lc
);

3157 
mg_s¶_if_c⁄n_‰ì
(
mg_c⁄√˘i⁄
 *
nc
);

3159 
mg_s¶_if_ªsu…
 
mg_s¶_if_h™dshake
(
mg_c⁄√˘i⁄
 *
nc
);

3160 
mg_s¶_if_ªad
(
mg_c⁄√˘i⁄
 *
nc
, *
buf
, 
size_t
 
buf_size
);

3161 
mg_s¶_if_wrôe
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
d©a
, 
size_t
 
Àn
);

3163 #ifde‡
__˝lu•lus


3170 #ifde‡
MG_MODULE_LINES


3200 #i‚de‡
CS_MONGOOSE_SRC_NET_H_


3201 
	#CS_MONGOOSE_SRC_NET_H_


	)

3203 #i‡
MG_ENABLE_JAVASCRIPT


3204 
	#EXCLUDE_COMMON


	)

3205 
	~<v7.h
>

3212 #i‚de‡
MG_VPRINTF_BUFFER_SIZE


3213 
	#MG_VPRINTF_BUFFER_SIZE
 100

	)

3216 #ifde‡
MG_USE_READ_WRITE


3217 
	#MG_RECV_FUNC
(
s
, 
b
, 
l
, 
f
Ë
	`ªad
(s, b,Ü)

	)

3218 
	#MG_SEND_FUNC
(
s
, 
b
, 
l
, 
f
Ë
	`wrôe
(s, b,Ü)

	)

3220 
	#MG_RECV_FUNC
(
s
, 
b
, 
l
, 
f
Ë
	`ªcv
(s, b,Ü, f)

	)

3221 
	#MG_SEND_FUNC
(
s
, 
b
, 
l
, 
f
Ë
	`£nd
(s, b,Ü, f)

	)

3224 #ifde‡
__˝lu•lus


3228 
	usockë_addªss
 {

3229 
sockaddr
 
ß
;

3230 
sockaddr_ö
 
sö
;

3231 #i‡
MG_ENABLE_IPV6


3232 
sockaddr_ö6
 
sö6
;

3234 
sockaddr
 
sö6
;

3238 
mg_c⁄√˘i⁄
;

3244 (*
mg_evít_h™dÀr_t
)(
	tmg_c⁄√˘i⁄
 *
	tnc
, 
	tev
,

3245 *
	tev_d©a
);

3248 
	#MG_EV_POLL
 0

	)

3249 
	#MG_EV_ACCEPT
 1

	)

3250 
	#MG_EV_CONNECT
 2

	)

3251 
	#MG_EV_RECV
 3

	)

3252 
	#MG_EV_SEND
 4

	)

3253 
	#MG_EV_CLOSE
 5

	)

3254 
	#MG_EV_TIMER
 6

	)

3259 
	smg_mgr
 {

3260 
mg_c⁄√˘i⁄
 *
a˘ive_c⁄√˘i⁄s
;

3261 #i‡
MG_ENABLE_HEXDUMP


3262 c⁄° *
hexdump_fûe
;

3264 #i‡
MG_ENABLE_BROADCAST


3265 
sock_t
 
˘l
[2];

3267 *
u£r_d©a
;

3268 
num_iÁ˚s
;

3269 
mg_iÁ˚
 **
iÁ˚s
;

3270 #i‡
MG_ENABLE_JAVASCRIPT


3271 
v7
 *v7;

3278 
	smg_c⁄√˘i⁄
 {

3279 
mg_c⁄√˘i⁄
 *
√xt
, *
¥ev
;

3280 
mg_c⁄√˘i⁄
 *
li°íî
;

3281 
mg_mgr
 *
mgr
;

3283 
sock_t
 
sock
;

3284 
îr
;

3285 
sockë_addªss
 
ß
;

3286 
size_t
 
ªcv_mbuf_limô
;

3287 
mbuf
 
ªcv_mbuf
;

3288 
mbuf
 
£nd_mbuf
;

3289 
time_t
 
œ°_io_time
;

3290 
ev_timî_time
;

3291 #i‡
MG_ENABLE_SSL


3292 *
s¶_if_d©a
;

3294 
mg_evít_h™dÀr_t
 
¥Ÿo_h™dÀr
;

3295 *
¥Ÿo_d©a
;

3296 (*
¥Ÿo_d©a_de°ru˘‹
)(*
¥Ÿo_d©a
);

3297 
mg_evít_h™dÀr_t
 
h™dÀr
;

3298 *
u£r_d©a
;

3300 *
v
;

3305 
mg_evít_h™dÀr_t
 
f
;

3306 } 
¥iv_1
;

3307 *
¥iv_2
;

3308 *
mgr_d©a
;

3309 
mg_iÁ˚
 *
iÁ˚
;

3310 
Êags
;

3312 
	#MG_F_LISTENING
 (1 << 0Ë

	)

3313 
	#MG_F_UDP
 (1 << 1Ë

	)

3314 
	#MG_F_RESOLVING
 (1 << 2Ë

	)

3315 
	#MG_F_CONNECTING
 (1 << 3Ë

	)

3316 
	#MG_F_SSL
 (1 << 4Ë

	)

3317 
	#MG_F_SSL_HANDSHAKE_DONE
 (1 << 5Ë

	)

3318 
	#MG_F_WANT_READ
 (1 << 6Ë

	)

3319 
	#MG_F_WANT_WRITE
 (1 << 7Ë

	)

3320 
	#MG_F_IS_WEBSOCKET
 (1 << 8Ë

	)

3323 
	#MG_F_SEND_AND_CLOSE
 (1 << 10Ë

	)

3324 
	#MG_F_CLOSE_IMMEDIATELY
 (1 << 11Ë

	)

3325 
	#MG_F_WEBSOCKET_NO_DEFRAG
 (1 << 12Ë

	)

3326 
	#MG_F_DELETE_CHUNK
 (1 << 13Ë

	)

3327 
	#MG_F_ENABLE_BROADCAST
 (1 << 14Ë

	)

3328 
	#MG_F_TUN_DO_NOT_RECONNECT
 (1 << 15Ë

	)

3330 
	#MG_F_USER_1
 (1 << 20Ë

	)

3331 
	#MG_F_USER_2
 (1 << 21)

	)

3332 
	#MG_F_USER_3
 (1 << 22)

	)

3333 
	#MG_F_USER_4
 (1 << 23)

	)

3334 
	#MG_F_USER_5
 (1 << 24)

	)

3335 
	#MG_F_USER_6
 (1 << 25)

	)

3337 
size_t
 
r1
;

3338 
size_t
 
r˛
;

3349 
mg_mgr_öô
(
mg_mgr
 *
mgr
, *
u£r_d©a
);

3366 
	smg_mgr_öô_›ts
 {

3367 
mg_iÁ˚_vèbÀ
 *
maö_iÁ˚
;

3368 
num_iÁ˚s
;

3369 
mg_iÁ˚_vèbÀ
 **
iÁ˚s
;

3378 
mg_mgr_öô_›t
(
mg_mgr
 *
mgr
, *
u£r_d©a
,

3379 
mg_mgr_öô_›ts
 
›ts
);

3386 
mg_mgr_‰ì
(
mg_mgr
 *);

3396 
time_t
 
mg_mgr_pﬁl
(
mg_mgr
 *, 
mûli
);

3398 #i‡
MG_ENABLE_BROADCAST


3411 
mg_brﬂdˇ°
(
mg_mgr
 *, 
mg_evít_h™dÀr_t
 
func
, *, 
size_t
);

3427 
mg_c⁄√˘i⁄
 *
mg_√xt
(
mg_mgr
 *, mg_connection *);

3435 
	smg_add_sock_›ts
 {

3436 *
u£r_d©a
;

3437 
Êags
;

3438 c⁄° **
îr‹_°rög
;

3439 
mg_iÁ˚
 *
iÁ˚
;

3448 
mg_c⁄√˘i⁄
 *
mg_add_sock
(
mg_mgr
 *, 
sock_t
, 
mg_evít_h™dÀr_t
);

3456 
mg_c⁄√˘i⁄
 *
mg_add_sock_›t
(
mg_mgr
 *, 
sock_t
,

3457 
mg_evít_h™dÀr_t
,

3458 
mg_add_sock_›ts
);

3466 
	smg_böd_›ts
 {

3467 *
u£r_d©a
;

3468 
Êags
;

3469 c⁄° **
îr‹_°rög
;

3470 
mg_iÁ˚
 *
iÁ˚
;

3471 #i‡
MG_ENABLE_SSL


3478 c⁄° *
s¶_˚π
;

3481 c⁄° *
s¶_key
;

3483 c⁄° *
s¶_ˇ_˚π
;

3495 c⁄° *
s¶_cùhî_suôes
;

3504 
mg_c⁄√˘i⁄
 *
mg_böd
(
mg_mgr
 *, const *,

3505 
mg_evít_h™dÀr_t
);

3524 
mg_c⁄√˘i⁄
 *
mg_böd_›t
(
mg_mgr
 *
mgr
, c⁄° *
addªss
,

3525 
mg_evít_h™dÀr_t
 
h™dÀr
,

3526 
mg_böd_›ts
 
›ts
);

3529 
	smg_c⁄√˘_›ts
 {

3530 *
u£r_d©a
;

3531 
Êags
;

3532 c⁄° **
îr‹_°rög
;

3533 
mg_iÁ˚
 *
iÁ˚
;

3534 #i‡
MG_ENABLE_SSL


3539 c⁄° *
s¶_˚π
;

3544 c⁄° *
s¶_key
;

3549 c⁄° *
s¶_ˇ_˚π
;

3561 c⁄° *
s¶_cùhî_suôes
;

3569 c⁄° *
s¶_£rvî_«me
;

3577 c⁄° *
s¶_psk_idítôy
;

3578 c⁄° *
s¶_psk_key
;

3587 
mg_c⁄√˘i⁄
 *
mg_c⁄√˘
(
mg_mgr
 *
mgr
, c⁄° *
addªss
,

3588 
mg_evít_h™dÀr_t
 
h™dÀr
);

3638 
mg_c⁄√˘i⁄
 *
mg_c⁄√˘_›t
(
mg_mgr
 *
mgr
, c⁄° *
addªss
,

3639 
mg_evít_h™dÀr_t
 
h™dÀr
,

3640 
mg_c⁄√˘_›ts
 
›ts
);

3642 #i‡
MG_ENABLE_SSL
 && 
MG_NET_IF
 !
MG_NET_IF_SIMPLELINK


3657 c⁄° *
mg_£t_s¶
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
˚π
,

3658 c⁄° *
ˇ_˚π
);

3668 
mg_£nd
(
mg_c⁄√˘i⁄
 *, c⁄° *
buf
, 
Àn
);

3671 #i‡
deföed
(
__GNUC__
)

3672 
__©åibuã__
((
f‹m©
(
¥ötf
, 2, 3)))

3681 
mg_¥ötf
(
mg_c⁄√˘i⁄
 *, c⁄° *
fmt
, ...);

3684 
mg_v¥ötf
(
mg_c⁄√˘i⁄
 *, c⁄° *
fmt
, 
va_li°
 
≠
);

3691 
mg_sockë∑ú
(
sock_t
[2], 
sock_ty≥
);

3693 #i‡
MG_ENABLE_SYNC_RESOLVER


3704 
mg_ªsﬁve
(c⁄° *
domaö_«me
, *
ù_addr_buf
, 
size_t
 
buf_Àn
);

3727 
mg_check_ù_a˛
(c⁄° *
a˛
, 
uöt32_t
 
ªmŸe_ù
);

3729 #i‡
MG_ENABLE_JAVASCRIPT


3736 
v7_îr
 
mg_íabÀ_javas¸ùt
(
mg_mgr
 *
m
, 
v7
 *v7,

3737 c⁄° *
öô_js_fûe_«me
);

3764 
mg_£t_timî
(
mg_c⁄√˘i⁄
 *
c
, 
time°amp
);

3769 
mg_time
();

3771 #ifde‡
__˝lu•lus


3776 #ifde‡
MG_MODULE_LINES


3788 #i‚de‡
CS_MONGOOSE_SRC_URI_H_


3789 
	#CS_MONGOOSE_SRC_URI_H_


	)

3793 #ifde‡
__˝lu•lus


3820 
mg_∑r£_uri
(
mg_°r
 
uri
, mg_°∏*
scheme
,

3821 
mg_°r
 *
u£r_öfo
, mg_°∏*
ho°
,

3822 *
p‹t
, 
mg_°r
 *
∑th
, mg_°∏*
quîy
,

3823 
mg_°r
 *
‰agmít
);

3825 
mg_n‹mÆize_uri_∑th
(c⁄° 
mg_°r
 *
ö
, mg_°∏*
out
);

3827 #ifde‡
__˝lu•lus


3831 #ifde‡
MG_MODULE_LINES


3843 #i‚de‡
CS_MONGOOSE_SRC_UTIL_H_


3844 
	#CS_MONGOOSE_SRC_UTIL_H_


	)

3846 
	~<°dio.h
>

3851 #ifde‡
__˝lu•lus


3855 #i‚de‡
MAX_PATH_SIZE


3856 
	#MAX_PATH_SIZE
 500

	)

3868 c⁄° *
mg_skù
(c⁄° *
s
, c⁄° *
íd_°rög
,

3869 c⁄° *
dñimôîs
, 
mg_°r
 *
v
);

3881 
mg_ba£64_decode
(c⁄° *
s
, 
Àn
, *
d°
);

3888 
mg_ba£64_ícode
(c⁄° *
§c
, 
§c_Àn
, *
d°
);

3890 #i‡
MG_ENABLE_FILESYSTEM


3898 
mg_°©
(c⁄° *
∑th
, 
cs_°©_t
 *
°
);

3907 
FILE
 *
mg_f›í
(c⁄° *
∑th
, c⁄° *
mode
);

3916 
mg_›í
(c⁄° *
∑th
, 
Êag
, 
mode
);

3919 #i‡
MG_ENABLE_THREADS


3926 *
mg_°¨t_thªad
(*(*
thªad_func
)(*), *
thªad_func_∑øm
);

3929 
mg_£t_˛o£_⁄_exec
(
sock_t
);

3931 
	#MG_SOCK_STRINGIFY_IP
 1

	)

3932 
	#MG_SOCK_STRINGIFY_PORT
 2

	)

3933 
	#MG_SOCK_STRINGIFY_REMOTE
 4

	)

3947 
mg_c⁄n_addr_to_°r
(
mg_c⁄√˘i⁄
 *
nc
, *
buf
, 
size_t
 
Àn
,

3948 
Êags
);

3949 #i‡
MG_NET_IF
 =
MG_NET_IF_SOCKET


3951 
mg_sock_to_°r
(
sock_t
 
sock
, *
buf
, 
size_t
 
Àn
, 
Êags
);

3959 
mg_sock_addr_to_°r
(c⁄° 
sockë_addªss
 *
ß
, *
buf
, 
size_t
 
Àn
,

3960 
Êags
);

3962 #i‡
MG_ENABLE_HEXDUMP


3971 
mg_hexdump
(c⁄° *
buf
, 
Àn
, *
d°
, 
d°_Àn
);

3974 
mg_hexdumpf
(
FILE
 *
Â
, c⁄° *
buf
, 
Àn
);

3983 
mg_hexdump_c⁄√˘i⁄
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
,

3984 c⁄° *
buf
, 
num_byãs
, 
ev
);

3990 
mg_is_big_ídün
();

4005 c⁄° *
mg_√xt_comma_li°_íåy
(c⁄° *
li°
, 
mg_°r
 *
vÆ
,

4006 
mg_°r
 *
eq_vÆ
);

4015 
mg_m©ch_¥efix
(c⁄° *
∑âîn
, 
∑âîn_Àn
, c⁄° *
°r
);

4016 
mg_m©ch_¥efix_n
(c⁄° 
mg_°r
 
∑âîn
, c⁄° mg_°∏
°r
);

4021 
mg_mbuf_≠≥nd_ba£64_putc
(
ch
, *
u£r_d©a
);

4026 
mg_mbuf_≠≥nd_ba£64
(
mbuf
 *mbuf, c⁄° *
d©a
, 
size_t
 
Àn
);

4033 
mg_basic_auth_hódî
(c⁄° *
u£r
, c⁄° *
∑ss
, 
mbuf
 *
buf
);

4035 #ifde‡
__˝lu•lus


4039 #ifde‡
MG_MODULE_LINES


4051 #i‚de‡
CS_MONGOOSE_SRC_HTTP_H_


4052 
	#CS_MONGOOSE_SRC_HTTP_H_


	)

4054 #i‡
MG_ENABLE_HTTP


4059 #ifde‡
__˝lu•lus


4063 #i‚de‡
MG_MAX_HTTP_HEADERS


4064 
	#MG_MAX_HTTP_HEADERS
 20

	)

4067 #i‚de‡
MG_MAX_HTTP_REQUEST_SIZE


4068 
	#MG_MAX_HTTP_REQUEST_SIZE
 1024

	)

4071 #i‚de‡
MG_MAX_PATH


4072 #ifde‡
PATH_MAX


4073 
	#MG_MAX_PATH
 
PATH_MAX


	)

4075 
	#MG_MAX_PATH
 256

	)

4079 #i‚de‡
MG_MAX_HTTP_SEND_MBUF


4080 
	#MG_MAX_HTTP_SEND_MBUF
 1024

	)

4083 #i‚de‡
MG_CGI_ENVIRONMENT_SIZE


4084 
	#MG_CGI_ENVIRONMENT_SIZE
 8192

	)

4088 
	shâp_mesßge
 {

4089 
mg_°r
 
mesßge
;

4092 
mg_°r
 
mëhod
;

4093 
mg_°r
 
uri
;

4094 
mg_°r
 
¥Ÿo
;

4097 
ª•_code
;

4098 
mg_°r
 
ª•_°©us_msg
;

4108 
mg_°r
 
quîy_°rög
;

4111 
mg_°r
 
hódî_«mes
[
MG_MAX_HTTP_HEADERS
];

4112 
mg_°r
 
hódî_vÆues
[
MG_MAX_HTTP_HEADERS
];

4115 
mg_°r
 
body
;

4118 #i‡
MG_ENABLE_HTTP_WEBSOCKET


4120 
	swebsockë_mesßge
 {

4121 *
d©a
;

4122 
size_t
 
size
;

4123 
Êags
;

4128 
	smg_hâp_mu…ù¨t_∑π
 {

4129 c⁄° *
fûe_«me
;

4130 c⁄° *
v¨_«me
;

4131 
mg_°r
 
d©a
;

4132 
°©us
;

4133 *
u£r_d©a
;

4137 
	smg_ssi_ˇŒ_˘x
 {

4138 
hâp_mesßge
 *
ªq
;

4139 
mg_°r
 
fûe
;

4140 
mg_°r
 
¨g
;

4144 
	#MG_EV_HTTP_REQUEST
 100

	)

4145 
	#MG_EV_HTTP_REPLY
 101

	)

4146 
	#MG_EV_HTTP_CHUNK
 102

	)

4147 
	#MG_EV_SSI_CALL
 105

	)

4148 
	#MG_EV_SSI_CALL_CTX
 106

	)

4150 #i‡
MG_ENABLE_HTTP_WEBSOCKET


4151 
	#MG_EV_WEBSOCKET_HANDSHAKE_REQUEST
 111

	)

4152 
	#MG_EV_WEBSOCKET_HANDSHAKE_DONE
 112

	)

4153 
	#MG_EV_WEBSOCKET_FRAME
 113

	)

4154 
	#MG_EV_WEBSOCKET_CONTROL_FRAME
 114

	)

4157 #i‡
MG_ENABLE_HTTP_STREAMING_MULTIPART


4158 
	#MG_EV_HTTP_MULTIPART_REQUEST
 121

	)

4159 
	#MG_EV_HTTP_PART_BEGIN
 122

	)

4160 
	#MG_EV_HTTP_PART_DATA
 123

	)

4161 
	#MG_EV_HTTP_PART_END
 124

	)

4163 
	#MG_EV_HTTP_MULTIPART_REQUEST_END
 125

	)

4218 
mg_£t_¥Ÿocﬁ_hâp_websockë
(
mg_c⁄√˘i⁄
 *
nc
);

4220 #i‡
MG_ENABLE_HTTP_WEBSOCKET


4235 
mg_£nd_websockë_h™dshake
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
uri
,

4236 c⁄° *
exåa_hódîs
);

4248 
mg_£nd_websockë_h™dshake2
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
,

4249 c⁄° *
ho°
, c⁄° *
¥Ÿocﬁ
,

4250 c⁄° *
exåa_hódîs
);

4253 
mg_£nd_websockë_h™dshake3
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
∑th
,

4254 c⁄° *
ho°
, c⁄° *
¥Ÿocﬁ
,

4255 c⁄° *
exåa_hódîs
, c⁄° *
u£r
,

4256 c⁄° *
∑ss
);

4277 
mg_c⁄√˘i⁄
 *
mg_c⁄√˘_ws
(
mg_mgr
 *
mgr
,

4278 
mg_evít_h™dÀr_t
 
evít_h™dÀr
,

4279 c⁄° *
uæ
, c⁄° *
¥Ÿocﬁ
,

4280 c⁄° *
exåa_hódîs
);

4288 
mg_c⁄√˘i⁄
 *
mg_c⁄√˘_ws_›t
(
mg_mgr
 *
mgr
,

4289 
mg_evít_h™dÀr_t
 
ev_h™dÀr
,

4290 
mg_c⁄√˘_›ts
 
›ts
,

4291 c⁄° *
uæ
, c⁄° *
¥Ÿocﬁ
,

4292 c⁄° *
exåa_hódîs
);

4312 
mg_£nd_websockë_‰ame
(
mg_c⁄√˘i⁄
 *
nc
, 
›_™d_Êags
,

4313 c⁄° *
d©a
, 
size_t
 
d©a_Àn
);

4320 
mg_£nd_websockë_‰amev
(
mg_c⁄√˘i⁄
 *
nc
, 
›_™d_Êags
,

4321 c⁄° 
mg_°r
 *
°rögs
, 
num_°rögs
);

4329 
mg_¥ötf_websockë_‰ame
(
mg_c⁄√˘i⁄
 *
nc
, 
›_™d_Êags
,

4330 c⁄° *
fmt
, ...);

4333 
	#WEBSOCKET_OP_CONTINUE
 0

	)

4334 
	#WEBSOCKET_OP_TEXT
 1

	)

4335 
	#WEBSOCKET_OP_BINARY
 2

	)

4336 
	#WEBSOCKET_OP_CLOSE
 8

	)

4337 
	#WEBSOCKET_OP_PING
 9

	)

4338 
	#WEBSOCKET_OP_PONG
 10

	)

4352 
	#WEBSOCKET_DONT_FIN
 0x100

	)

4366 
mg_uæ_decode
(c⁄° *
§c
, 
§c_Àn
, *
d°
, 
d°_Àn
,

4367 
is_f‹m_uæ_ícoded
);

4369 #ifde‡
__˝lu•lus


4376 #ifde‡
MG_MODULE_LINES


4383 #i‚de‡
CS_MONGOOSE_SRC_HTTP_SERVER_H_


4384 
	#CS_MONGOOSE_SRC_HTTP_SERVER_H_


	)

4386 #i‡
MG_ENABLE_HTTP


4388 #ifde‡
__˝lu•lus


4400 
mg_∑r£_hâp
(c⁄° *
s
, 
n
, 
hâp_mesßge
 *
hm
, 
is_ªq
);

4408 
mg_°r
 *
mg_gë_hâp_hódî
(
hâp_mesßge
 *
hm
, c⁄° *
«me
);

4425 
mg_hâp_∑r£_hódî
(
mg_°r
 *
hdr
, c⁄° *
v¨_«me
, *
buf
,

4426 
size_t
 
buf_size
);

4434 
mg_gë_hâp_basic_auth
(
hâp_mesßge
 *
hm
, *
u£r
, 
size_t
 
u£r_Àn
,

4435 *
∑ss
, 
size_t
 
∑ss_Àn
);

4442 
mg_∑r£_hâp_basic_auth
(
mg_°r
 *
hdr
, *
u£r
, 
size_t
 
u£r_Àn
,

4443 *
∑ss
, 
size_t
 
∑ss_Àn
);

4481 
size_t
 
mg_∑r£_mu…ù¨t
(c⁄° *
buf
, size_à
buf_Àn
, *
v¨_«me
,

4482 
size_t
 
v¨_«me_Àn
, *
fûe_«me
,

4483 
size_t
 
fûe_«me_Àn
, c⁄° **
chunk
,

4484 
size_t
 *
chunk_Àn
);

4494 
mg_gë_hâp_v¨
(c⁄° 
mg_°r
 *
buf
, c⁄° *
«me
, *
d°
,

4495 
size_t
 
d°_Àn
);

4497 #i‡
MG_ENABLE_FILESYSTEM


4502 
	smg_£rve_hâp_›ts
 {

4504 c⁄° *
documít_roŸ
;

4507 c⁄° *
ödex_fûes
;

4518 c⁄° *
≥r_dúe˘‹y_auth_fûe
;

4521 c⁄° *
auth_domaö
;

4531 c⁄° *
globÆ_auth_fûe
;

4534 c⁄° *
íabÀ_dúe˘‹y_li°ög
;

4594 c⁄° *
ssi_∑âîn
;

4597 c⁄° *
ù_a˛
;

4599 #i‡
MG_ENABLE_HTTP_URL_REWRITES


4624 c⁄° *
uæ_ªwrôes
;

4628 c⁄° *
dav_documít_roŸ
;

4634 c⁄° *
dav_auth_fûe
;

4637 c⁄° *
hiddí_fûe_∑âîn
;

4640 c⁄° *
cgi_fûe_∑âîn
;

4643 c⁄° *
cgi_öãΩªãr
;

4649 c⁄° *
cu°om_mime_ty≥s
;

4655 c⁄° *
exåa_hódîs
;

4678 
mg_£rve_hâp
(
mg_c⁄√˘i⁄
 *
nc
, 
hâp_mesßge
 *
hm
,

4679 
mg_£rve_hâp_›ts
 
›ts
);

4700 
mg_hâp_£rve_fûe
(
mg_c⁄√˘i⁄
 *
nc
, 
hâp_mesßge
 *
hm
,

4701 c⁄° *
∑th
, c⁄° 
mg_°r
 
mime_ty≥
,

4702 c⁄° 
mg_°r
 
exåa_hódîs
);

4704 #i‡
MG_ENABLE_HTTP_STREAMING_MULTIPART


4707 
mg_°r
 (*
	tmg_fu_‚ame_‚
)(
	tmg_c⁄√˘i⁄
 *
	tnc
,

4708 
	tmg_°r
 
	t‚ame
);

4742 
mg_fûe_u∂ﬂd_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
, *
ev_d©a
,

4743 
mg_fu_‚ame_‚
 
loˇl_«me_‚
);

4774 
mg_ªgi°î_hâp_ídpoöt
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
uri_∑th
,

4775 
mg_evít_h™dÀr_t
 
h™dÀr
);

4781 
mg_hâp_check_dige°_auth
(
hâp_mesßge
 *
hm
, c⁄° *
auth_domaö
,

4782 
FILE
 *
Â
);

4802 
mg_£nd_hâp_chunk
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
buf
, 
size_t
 
Àn
);

4808 
mg_¥ötf_hâp_chunk
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
fmt
, ...);

4823 
mg_£nd_ª•⁄£_löe
(
mg_c⁄√˘i⁄
 *
nc
, 
°©us_code
,

4824 c⁄° *
exåa_hódîs
);

4830 
mg_hâp_£nd_îr‹
(
mg_c⁄√˘i⁄
 *
nc
, 
code
, c⁄° *
ªas⁄
);

4843 
mg_hâp_£nd_ªdúe˘
(
mg_c⁄√˘i⁄
 *
nc
, 
°©us_code
,

4844 c⁄° 
mg_°r
 
loˇti⁄
,

4845 c⁄° 
mg_°r
 
exåa_hódîs
);

4861 
mg_£nd_hód
(
mg_c⁄√˘i⁄
 *
n
, 
°©us_code
,

4862 
öt64_t
 
c⁄ã¡_Àngth
, c⁄° *
exåa_hódîs
);

4867 
mg_¥ötf_html_esˇ≥
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
fmt
, ...);

4869 #i‡
MG_ENABLE_HTTP_URL_REWRITES


4880 
mg_hâp_ªvî£_¥oxy
(
mg_c⁄√˘i⁄
 *
nc
,

4881 c⁄° 
hâp_mesßge
 *
hm
, 
mg_°r
 
mou¡
,

4882 
mg_°r
 
up°ªam
);

4885 #ifde‡
__˝lu•lus


4892 #ifde‡
MG_MODULE_LINES


4899 #i‚de‡
CS_MONGOOSE_SRC_HTTP_CLIENT_H_


4900 
	#CS_MONGOOSE_SRC_HTTP_CLIENT_H_


	)

4902 #ifde‡
__˝lu•lus


4930 
mg_c⁄√˘i⁄
 *
mg_c⁄√˘_hâp
(
mg_mgr
 *
mgr
,

4931 
mg_evít_h™dÀr_t
 
evít_h™dÀr
,

4932 c⁄° *
uæ
,

4933 c⁄° *
exåa_hódîs
,

4934 c⁄° *
po°_d©a
);

4943 
mg_c⁄√˘i⁄
 *
mg_c⁄√˘_hâp_›t
(
mg_mgr
 *
mgr
,

4944 
mg_evít_h™dÀr_t
 
ev_h™dÀr
,

4945 
mg_c⁄√˘_›ts
 
›ts
,

4946 c⁄° *
uæ
,

4947 c⁄° *
exåa_hódîs
,

4948 c⁄° *
po°_d©a
);

4951 
mg_hâp_¸óã_dige°_auth_hódî
(*
buf
, 
size_t
 
buf_Àn
,

4952 c⁄° *
mëhod
, c⁄° *
uri
,

4953 c⁄° *
auth_domaö
, c⁄° *
u£r
,

4954 c⁄° *
∑sswd
);

4956 #ifde‡
__˝lu•lus


4960 #ifde‡
MG_MODULE_LINES


4984 #i‚de‡
CS_MONGOOSE_SRC_MQTT_H_


4985 
	#CS_MONGOOSE_SRC_MQTT_H_


	)

4989 
	smg_mqâ_mesßge
 {

4990 
cmd
;

4991 
qos
;

4992 
mg_°r
 
t›ic
;

4993 
mg_°r
 
∑ylﬂd
;

4995 
uöt8_t
 
c⁄«ck_ªt_code
;

4996 
uöt16_t
 
mesßge_id
;

4999 
uöt8_t
 
¥Ÿocﬁ_vîsi⁄
;

5000 
uöt8_t
 
c⁄√˘_Êags
;

5001 
uöt16_t
 
kìp_Æive_timî
;

5002 
mg_°r
 
¥Ÿocﬁ_«me
;

5003 
mg_°r
 
˛õ¡_id
;

5004 
mg_°r
 
wûl_t›ic
;

5005 
mg_°r
 
wûl_mesßge
;

5006 
mg_°r
 
u£r_«me
;

5007 
mg_°r
 
∑ssw‹d
;

5010 
	smg_mqâ_t›ic_ex¥essi⁄
 {

5011 c⁄° *
	gt›ic
;

5012 
uöt8_t
 
	gqos
;

5015 
	smg_£nd_mqâ_h™dshake_›ts
 {

5016 
	gÊags
;

5017 
uöt16_t
 
	gkìp_Æive
;

5018 c⁄° *
	gwûl_t›ic
;

5019 c⁄° *
	gwûl_mesßge
;

5020 c⁄° *
	gu£r_«me
;

5021 c⁄° *
	g∑ssw‹d
;

5025 
	smg_mqâ_¥Ÿo_d©a
 {

5026 
uöt16_t
 
	gkìp_Æive
;

5030 
	#MG_MQTT_CMD_CONNECT
 1

	)

5031 
	#MG_MQTT_CMD_CONNACK
 2

	)

5032 
	#MG_MQTT_CMD_PUBLISH
 3

	)

5033 
	#MG_MQTT_CMD_PUBACK
 4

	)

5034 
	#MG_MQTT_CMD_PUBREC
 5

	)

5035 
	#MG_MQTT_CMD_PUBREL
 6

	)

5036 
	#MG_MQTT_CMD_PUBCOMP
 7

	)

5037 
	#MG_MQTT_CMD_SUBSCRIBE
 8

	)

5038 
	#MG_MQTT_CMD_SUBACK
 9

	)

5039 
	#MG_MQTT_CMD_UNSUBSCRIBE
 10

	)

5040 
	#MG_MQTT_CMD_UNSUBACK
 11

	)

5041 
	#MG_MQTT_CMD_PINGREQ
 12

	)

5042 
	#MG_MQTT_CMD_PINGRESP
 13

	)

5043 
	#MG_MQTT_CMD_DISCONNECT
 14

	)

5046 
	#MG_MQTT_EVENT_BASE
 200

	)

5047 
	#MG_EV_MQTT_CONNECT
 (
MG_MQTT_EVENT_BASE
 + 
MG_MQTT_CMD_CONNECT
)

	)

5048 
	#MG_EV_MQTT_CONNACK
 (
MG_MQTT_EVENT_BASE
 + 
MG_MQTT_CMD_CONNACK
)

	)

5049 
	#MG_EV_MQTT_PUBLISH
 (
MG_MQTT_EVENT_BASE
 + 
MG_MQTT_CMD_PUBLISH
)

	)

5050 
	#MG_EV_MQTT_PUBACK
 (
MG_MQTT_EVENT_BASE
 + 
MG_MQTT_CMD_PUBACK
)

	)

5051 
	#MG_EV_MQTT_PUBREC
 (
MG_MQTT_EVENT_BASE
 + 
MG_MQTT_CMD_PUBREC
)

	)

5052 
	#MG_EV_MQTT_PUBREL
 (
MG_MQTT_EVENT_BASE
 + 
MG_MQTT_CMD_PUBREL
)

	)

5053 
	#MG_EV_MQTT_PUBCOMP
 (
MG_MQTT_EVENT_BASE
 + 
MG_MQTT_CMD_PUBCOMP
)

	)

5054 
	#MG_EV_MQTT_SUBSCRIBE
 (
MG_MQTT_EVENT_BASE
 + 
MG_MQTT_CMD_SUBSCRIBE
)

	)

5055 
	#MG_EV_MQTT_SUBACK
 (
MG_MQTT_EVENT_BASE
 + 
MG_MQTT_CMD_SUBACK
)

	)

5056 
	#MG_EV_MQTT_UNSUBSCRIBE
 (
MG_MQTT_EVENT_BASE
 + 
MG_MQTT_CMD_UNSUBSCRIBE
)

	)

5057 
	#MG_EV_MQTT_UNSUBACK
 (
MG_MQTT_EVENT_BASE
 + 
MG_MQTT_CMD_UNSUBACK
)

	)

5058 
	#MG_EV_MQTT_PINGREQ
 (
MG_MQTT_EVENT_BASE
 + 
MG_MQTT_CMD_PINGREQ
)

	)

5059 
	#MG_EV_MQTT_PINGRESP
 (
MG_MQTT_EVENT_BASE
 + 
MG_MQTT_CMD_PINGRESP
)

	)

5060 
	#MG_EV_MQTT_DISCONNECT
 (
MG_MQTT_EVENT_BASE
 + 
MG_MQTT_CMD_DISCONNECT
)

	)

5063 
	#MG_MQTT_RETAIN
 0x1

	)

5064 
	#MG_MQTT_DUP
 0x4

	)

5065 
	#MG_MQTT_QOS
(
qos
Ë((qosË<< 1)

	)

5066 
	#MG_MQTT_GET_QOS
(
Êags
Ë(((ÊagsË&0x6Ë>> 1)

	)

5067 
	#MG_MQTT_SET_QOS
(
Êags
, 
qos
Ë(ÊagsË((ÊagsË& ~0x6Ë| ((qosË<< 1)

	)

5070 
	#MG_MQTT_CLEAN_SESSION
 0x02

	)

5071 
	#MG_MQTT_HAS_WILL
 0x04

	)

5072 
	#MG_MQTT_WILL_RETAIN
 0x20

	)

5073 
	#MG_MQTT_HAS_PASSWORD
 0x40

	)

5074 
	#MG_MQTT_HAS_USER_NAME
 0x80

	)

5075 
	#MG_MQTT_GET_WILL_QOS
(
Êags
Ë(((ÊagsË&0x18Ë>> 3)

	)

5076 
	#MG_MQTT_SET_WILL_QOS
(
Êags
, 
qos
) \

5077 (
Êags
Ë((ÊagsË& ~0x18Ë| ((
qos
Ë<< 3)

	)

5080 
	#MG_EV_MQTT_CONNACK_ACCEPTED
 0

	)

5081 
	#MG_EV_MQTT_CONNACK_UNACCEPTABLE_VERSION
 1

	)

5082 
	#MG_EV_MQTT_CONNACK_IDENTIFIER_REJECTED
 2

	)

5083 
	#MG_EV_MQTT_CONNACK_SERVER_UNAVAILABLE
 3

	)

5084 
	#MG_EV_MQTT_CONNACK_BAD_AUTH
 4

	)

5085 
	#MG_EV_MQTT_CONNACK_NOT_AUTHORIZED
 5

	)

5087 #ifde‡
__˝lu•lus


5104 
mg_£t_¥Ÿocﬁ_mqâ
(
mg_c⁄√˘i⁄
 *
nc
);

5107 
mg_£nd_mqâ_h™dshake
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
˛õ¡_id
);

5110 
mg_£nd_mqâ_h™dshake_›t
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
˛õ¡_id
,

5111 
mg_£nd_mqâ_h™dshake_›ts
);

5114 
mg_mqâ_publish
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
t›ic
,

5115 
uöt16_t
 
mesßge_id
, 
Êags
, c⁄° *
d©a
,

5116 
size_t
 
Àn
);

5119 
mg_mqâ_subs¸ibe
(
mg_c⁄√˘i⁄
 *
nc
,

5120 c⁄° 
mg_mqâ_t›ic_ex¥essi⁄
 *
t›ics
,

5121 
size_t
 
t›ics_Àn
, 
uöt16_t
 
mesßge_id
);

5124 
mg_mqâ_unsubs¸ibe
(
mg_c⁄√˘i⁄
 *
nc
, **
t›ics
,

5125 
size_t
 
t›ics_Àn
, 
uöt16_t
 
mesßge_id
);

5128 
mg_mqâ_disc⁄√˘
(
mg_c⁄√˘i⁄
 *
nc
);

5131 
mg_mqâ_c⁄«ck
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt8_t
 
ªtu∫_code
);

5134 
mg_mqâ_puback
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt16_t
 
mesßge_id
);

5137 
mg_mqâ_pubªc
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt16_t
 
mesßge_id
);

5140 
mg_mqâ_pubªl
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt16_t
 
mesßge_id
);

5143 
mg_mqâ_pubcomp
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt16_t
 
mesßge_id
);

5149 
mg_mqâ_suback
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt8_t
 *
qoss
, 
size_t
 
qoss_Àn
,

5150 
uöt16_t
 
mesßge_id
);

5153 
mg_mqâ_unsuback
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt16_t
 
mesßge_id
);

5156 
mg_mqâ_pög
(
mg_c⁄√˘i⁄
 *
nc
);

5159 
mg_mqâ_p⁄g
(
mg_c⁄√˘i⁄
 *
nc
);

5168 
mg_mqâ_√xt_subs¸ibe_t›ic
(
mg_mqâ_mesßge
 *
msg
,

5169 
mg_°r
 *
t›ic
, 
uöt8_t
 *
qos
, 
pos
);

5171 #ifde‡
__˝lu•lus


5176 #ifde‡
MG_MODULE_LINES


5200 #i‚de‡
CS_MONGOOSE_SRC_MQTT_BROKER_H_


5201 
	#CS_MONGOOSE_SRC_MQTT_BROKER_H_


	)

5203 #i‡
MG_ENABLE_MQTT_BROKER


5208 #ifde‡
__˝lu•lus


5212 
	#MG_MQTT_MAX_SESSION_SUBSCRIPTIONS
 512;

	)

5214 
mg_mqâ_brokî
;

5217 
	smg_mqâ_£ssi⁄
 {

5218 
mg_mqâ_brokî
 *
brk
;

5219 
LIST_ENTRY
(
mg_mqâ_£ssi⁄
Ë
lök
;

5220 
mg_c⁄√˘i⁄
 *
nc
;

5221 
size_t
 
num_subs¸ùti⁄s
;

5222 *
u£r_d©a
;

5223 
mg_mqâ_t›ic_ex¥essi⁄
 *
subs¸ùti⁄s
;

5227 
	smg_mqâ_brokî
 {

5228 
LIST_HEAD
(
_mg_£sshód
, 
mg_mqâ_£ssi⁄
Ë
£ssi⁄s
;

5229 *
u£r_d©a
;

5233 
mg_mqâ_brokî_öô
(
mg_mqâ_brokî
 *
brk
, *
u£r_d©a
);

5260 
mg_mqâ_brokî
(
mg_c⁄√˘i⁄
 *
brk
, 
ev
, *
d©a
);

5272 
mg_mqâ_£ssi⁄
 *
mg_mqâ_√xt
(
mg_mqâ_brokî
 *
brk
,

5273 
mg_mqâ_£ssi⁄
 *
s
);

5275 #ifde‡
__˝lu•lus


5281 #ifde‡
MG_MODULE_LINES


5293 #i‚de‡
CS_MONGOOSE_SRC_DNS_H_


5294 
	#CS_MONGOOSE_SRC_DNS_H_


	)

5298 #ifde‡
__˝lu•lus


5302 
	#MG_DNS_A_RECORD
 0x01

	)

5303 
	#MG_DNS_CNAME_RECORD
 0x05

	)

5304 
	#MG_DNS_PTR_RECORD
 0x0¯

	)

5305 
	#MG_DNS_TXT_RECORD
 0x10

	)

5306 
	#MG_DNS_AAAA_RECORD
 0x1¯

	)

5307 
	#MG_DNS_SRV_RECORD
 0x21

	)

5308 
	#MG_DNS_MX_RECORD
 0x0‡

	)

5310 
	#MG_MAX_DNS_QUESTIONS
 32

	)

5311 
	#MG_MAX_DNS_ANSWERS
 32

	)

5313 
	#MG_DNS_MESSAGE
 100

	)

5315 
	emg_dns_ªsour˚_ªc‹d_köd
 {

5316 
MG_DNS_INVALID_RECORD
 = 0,

5317 
MG_DNS_QUESTION
,

5318 
MG_DNS_ANSWER


5322 
	smg_dns_ªsour˚_ªc‹d
 {

5323 
mg_°r
 
«me
;

5324 
πy≥
;

5325 
r˛ass
;

5326 
âl
;

5327 
mg_dns_ªsour˚_ªc‹d_köd
 
köd
;

5328 
mg_°r
 
rd©a
;

5332 
	smg_dns_mesßge
 {

5333 
mg_°r
 
pkt
;

5334 
uöt16_t
 
Êags
;

5335 
uöt16_t
 
å™ß˘i⁄_id
;

5336 
num_que°i⁄s
;

5337 
num_™swîs
;

5338 
mg_dns_ªsour˚_ªc‹d
 
que°i⁄s
[
MG_MAX_DNS_QUESTIONS
];

5339 
mg_dns_ªsour˚_ªc‹d
 
™swîs
[
MG_MAX_DNS_ANSWERS
];

5342 
mg_dns_ªsour˚_ªc‹d
 *
mg_dns_√xt_ªc‹d
(

5343 
mg_dns_mesßge
 *
msg
, 
quîy
, 
mg_dns_ªsour˚_ªc‹d
 *
¥ev
);

5356 
mg_dns_∑r£_ªc‹d_d©a
(
mg_dns_mesßge
 *
msg
,

5357 
mg_dns_ªsour˚_ªc‹d
 *
º
, *
d©a
,

5358 
size_t
 
d©a_Àn
);

5363 
mg_£nd_dns_quîy
(
mg_c⁄√˘i⁄
 *
nc
, c⁄° *
«me
,

5364 
quîy_ty≥
);

5371 
mg_dns_ö£π_hódî
(
mbuf
 *
io
, 
size_t
 
pos
,

5372 
mg_dns_mesßge
 *
msg
);

5382 
mg_dns_c›y_que°i⁄s
(
mbuf
 *
io
, 
mg_dns_mesßge
 *
msg
);

5400 
mg_dns_ícode_ªc‹d
(
mbuf
 *
io
, 
mg_dns_ªsour˚_ªc‹d
 *
º
,

5401 c⁄° *
«me
, 
size_t
 
∆í
, c⁄° *
rd©a
,

5402 
size_t
 
æí
);

5407 
mg_dns_ícode_«me
(
mbuf
 *
io
, c⁄° *
«me
, 
size_t
 
Àn
);

5410 
mg_∑r£_dns
(c⁄° *
buf
, 
Àn
, 
mg_dns_mesßge
 *
msg
);

5425 
size_t
 
mg_dns_uncom¥ess_«me
(
mg_dns_mesßge
 *
msg
, 
mg_°r
 *
«me
,

5426 *
d°
, 
d°_Àn
);

5440 
mg_£t_¥Ÿocﬁ_dns
(
mg_c⁄√˘i⁄
 *
nc
);

5442 #ifde‡
__˝lu•lus


5446 #ifde‡
MG_MODULE_LINES


5460 #i‚de‡
CS_MONGOOSE_SRC_DNS_SERVER_H_


5461 
	#CS_MONGOOSE_SRC_DNS_SERVER_H_


	)

5463 #i‡
MG_ENABLE_DNS_SERVER


5467 #ifde‡
__˝lu•lus


5471 
	#MG_DNS_SERVER_DEFAULT_TTL
 3600

	)

5473 
	smg_dns_ª∂y
 {

5474 
mg_dns_mesßge
 *
msg
;

5475 
mbuf
 *
io
;

5476 
size_t
 
°¨t
;

5507 
mg_dns_ª∂y
 
mg_dns_¸óã_ª∂y
(
mbuf
 *
io
,

5508 
mg_dns_mesßge
 *
msg
);

5518 
mg_dns_ª∂y_ªc‹d
(
mg_dns_ª∂y
 *
ª∂y
,

5519 
mg_dns_ªsour˚_ªc‹d
 *
que°i⁄
,

5520 c⁄° *
«me
, 
πy≥
, 
âl
, c⁄° *
rd©a
,

5521 
size_t
 
rd©a_Àn
);

5535 
mg_dns_£nd_ª∂y
(
mg_c⁄√˘i⁄
 *
nc
, 
mg_dns_ª∂y
 *
r
);

5537 #ifde‡
__˝lu•lus


5543 #ifde‡
MG_MODULE_LINES


5555 #i‚de‡
CS_MONGOOSE_SRC_RESOLV_H_


5556 
	#CS_MONGOOSE_SRC_RESOLV_H_


	)

5560 #ifde‡
__˝lu•lus


5564 
	emg_ªsﬁve_îr
 {

5565 
MG_RESOLVE_OK
 = 0,

5566 
MG_RESOLVE_NO_ANSWERS
 = 1,

5567 
MG_RESOLVE_EXCEEDED_RETRY_COUNT
 = 2,

5568 
MG_RESOLVE_TIMEOUT
 = 3

5571 (*
mg_ªsﬁve_ˇŒback_t
)(
	tmg_dns_mesßge
 *
	tdns_mesßge
,

5572 *
	tu£r_d©a
, 
	tmg_ªsﬁve_îr
);

5575 
	smg_ªsﬁve_async_›ts
 {

5576 c⁄° *
«me£rvî_uæ
;

5577 
max_ªåõs
;

5578 
timeout
;

5579 
ac˚±_lôîÆ
;

5580 
⁄ly_lôîÆ
;

5581 
mg_c⁄√˘i⁄
 **
dns_c⁄n
;

5585 
mg_ªsﬁve_async
(
mg_mgr
 *
mgr
, c⁄° *
«me
, 
quîy
,

5586 
mg_ªsﬁve_ˇŒback_t
 
cb
, *
d©a
);

5609 
mg_ªsﬁve_async_›t
(
mg_mgr
 *
mgr
, c⁄° *
«me
, 
quîy
,

5610 
mg_ªsﬁve_ˇŒback_t
 
cb
, *
d©a
,

5611 
mg_ªsﬁve_async_›ts
 
›ts
);

5618 
mg_ªsﬁve_‰om_ho°s_fûe
(c⁄° *
ho°
, 
sockë_addªss
 *
uß
);

5620 #ifde‡
__˝lu•lus


5624 #ifde‡
MG_MODULE_LINES


5658 #i‚de‡
CS_MONGOOSE_SRC_COAP_H_


5659 
	#CS_MONGOOSE_SRC_COAP_H_


	)

5661 #i‡
MG_ENABLE_COAP


5663 
	#MG_COAP_MSG_TYPE_FIELD
 0x2

	)

5664 
	#MG_COAP_CODE_CLASS_FIELD
 0x4

	)

5665 
	#MG_COAP_CODE_DETAIL_FIELD
 0x8

	)

5666 
	#MG_COAP_MSG_ID_FIELD
 0x10

	)

5667 
	#MG_COAP_TOKEN_FIELD
 0x20

	)

5668 
	#MG_COAP_OPTIOMG_FIELD
 0x40

	)

5669 
	#MG_COAP_PAYLOAD_FIELD
 0x80

	)

5671 
	#MG_COAP_ERROR
 0x10000

	)

5672 
	#MG_COAP_FORMAT_ERROR
 (
MG_COAP_ERROR
 | 0x20000)

	)

5673 
	#MG_COAP_IGNORE
 (
MG_COAP_ERROR
 | 0x40000)

	)

5674 
	#MG_COAP_NOT_ENOUGH_DATA
 (
MG_COAP_ERROR
 | 0x80000)

	)

5675 
	#MG_COAP_NETWORK_ERROR
 (
MG_COAP_ERROR
 | 0x100000)

	)

5677 
	#MG_COAP_MSG_CON
 0

	)

5678 
	#MG_COAP_MSG_NOC
 1

	)

5679 
	#MG_COAP_MSG_ACK
 2

	)

5680 
	#MG_COAP_MSG_RST
 3

	)

5681 
	#MG_COAP_MSG_MAX
 3

	)

5683 
	#MG_COAP_CODECLASS_REQUEST
 0

	)

5684 
	#MG_COAP_CODECLASS_RESP_OK
 2

	)

5685 
	#MG_COAP_CODECLASS_CLIENT_ERR
 4

	)

5686 
	#MG_COAP_CODECLASS_SRV_ERR
 5

	)

5688 
	#MG_COAP_EVENT_BASE
 300

	)

5689 
	#MG_EV_COAP_CON
 (
MG_COAP_EVENT_BASE
 + 
MG_COAP_MSG_CON
)

	)

5690 
	#MG_EV_COAP_NOC
 (
MG_COAP_EVENT_BASE
 + 
MG_COAP_MSG_NOC
)

	)

5691 
	#MG_EV_COAP_ACK
 (
MG_COAP_EVENT_BASE
 + 
MG_COAP_MSG_ACK
)

	)

5692 
	#MG_EV_COAP_RST
 (
MG_COAP_EVENT_BASE
 + 
MG_COAP_MSG_RST
)

	)

5699 
	smg_cﬂp_›ti⁄
 {

5700 
mg_cﬂp_›ti⁄
 *
√xt
;

5701 
uöt32_t
 
numbî
;

5702 
mg_°r
 
vÆue
;

5706 
	smg_cﬂp_mesßge
 {

5707 
uöt32_t
 
	gÊags
;

5708 
uöt8_t
 
	gmsg_ty≥
;

5709 
uöt8_t
 
	gcode_˛ass
;

5710 
uöt8_t
 
	gcode_dëaû
;

5711 
uöt16_t
 
	gmsg_id
;

5712 
mg_°r
 
	gtokí
;

5713 
mg_cﬂp_›ti⁄
 *
	g›ti⁄s
;

5714 
mg_°r
 
	g∑ylﬂd
;

5715 
mg_cﬂp_›ti⁄
 *
	g›tiomg_èû
;

5718 #ifde‡
__˝lu•lus


5723 
mg_£t_¥Ÿocﬁ_cﬂp
(
mg_c⁄√˘i⁄
 *
nc
);

5730 
mg_cﬂp_›ti⁄
 *
mg_cﬂp_add_›ti⁄
(
mg_cﬂp_mesßge
 *
cm
,

5731 
uöt32_t
 
numbî
, *
vÆue
,

5732 
size_t
 
Àn
);

5738 
mg_cﬂp_‰ì_›ti⁄s
(
mg_cﬂp_mesßge
 *
cm
);

5751 
uöt32_t
 
mg_cﬂp_£nd_mesßge
(
mg_c⁄√˘i⁄
 *
nc
,

5752 
mg_cﬂp_mesßge
 *
cm
);

5759 
uöt32_t
 
mg_cﬂp_£nd_ack
(
mg_c⁄√˘i⁄
 *
nc
, 
uöt16_t
 
msg_id
);

5776 
uöt32_t
 
mg_cﬂp_∑r£
(
mbuf
 *
io
, 
mg_cﬂp_mesßge
 *
cm
);

5783 
uöt32_t
 
mg_cﬂp_compo£
(
mg_cﬂp_mesßge
 *
cm
, 
mbuf
 *
io
);

5785 #ifde‡
__˝lu•lus


5792 #ifde‡
MG_MODULE_LINES


5800 #i‚de‡
CS_MONGOOSE_SRC_SNTP_H_


5801 
	#CS_MONGOOSE_SRC_SNTP_H_


	)

5803 #i‡
MG_ENABLE_SNTP


5805 
	#MG_SNTP_EVENT_BASE
 500

	)

5811 
	#MG_SNTP_REPLY
 (
MG_SNTP_EVENT_BASE
 + 1)

	)

5814 
	#MG_SNTP_MALFORMED_REPLY
 (
MG_SNTP_EVENT_BASE
 + 2)

	)

5817 
	#MG_SNTP_FAILED
 (
MG_SNTP_EVENT_BASE
 + 3)

	)

5819 
	smg_¢ç_mesßge
 {

5821 
kiss_of_dóth
;

5823 
time
;

5827 
mg_c⁄√˘i⁄
 *
mg_¢ç_c⁄√˘
(
mg_mgr
 *
mgr
,

5828 
mg_evít_h™dÀr_t
 
evít_h™dÀr
,

5829 c⁄° *
¢ç_£rvî_«me
);

5832 
mg_¢ç_£nd_ªque°
(
mg_c⁄√˘i⁄
 *
c
);

5841 
mg_c⁄√˘i⁄
 *
mg_¢ç_gë_time
(
mg_mgr
 *
mgr
,

5842 
mg_evít_h™dÀr_t
 
evít_h™dÀr
,

5843 c⁄° *
¢ç_£rvî_«me
);

5849 #ifde‡
UNSAFE_COMPILE


5850 
	#sgx_¥iv©e


	)

5851 
	#‰ód_¥iv©e
 
‰ód


	)

5853 
size_t
 
‰ód_¥iv©e
(
sgx_¥iv©e
 *
±r
, size_à
size
, size_à
nmemb
, 
FILE
 *
°ªam
);

5857 
gë_í¸y±_Àngth
(
sgx_¥iv©e
 c⁄° *
t
, 
size_t
 
n
);

5858 
is_¥iv©e_fûe
(c⁄° * 
∑th
);

5859 
í¸y±
(* 
de°
, 
sgx_¥iv©e
 c⁄° *
§c
, 
size_t
 
n
 );

	@Enclave/simplest_web_server.c

4 
	~"m⁄goo£.h
"

5 
	~<time.h
>

10 c⁄° *
	gs_hâp_p‹t
 = "8000";

11 
mg_£rve_hâp_›ts
 
	gs_hâp_£rvî_›ts
;

13 
ªadrdtsc
();

14 
öô_ªadrdtsc
();

15 
mi¸oFªq
;

18 
°¨t_cou¡î
;

19 
°›_cou¡î
;

22 
	$ev_h™dÀr
(
mg_c⁄√˘i⁄
 *
nc
, 
ev
, *
p
) {

23 i‡(
ev
 =
MG_EV_HTTP_REQUEST
) {

24 
	`mg_£rve_hâp
(
nc
, (
hâp_mesßge
 *Ë
p
, 
s_hâp_£rvî_›ts
);

28 
	}
}

31 #ifde‡
UNSAFE_COMPILE


32 
public_hóp_öô
(, );

37 
	$maö
(
¨gc
, * 
¨gv
[]) {

38 #ifde‡
UNSAFE_COMPILE


39 
	`public_hóp_öô
(0x3000000000, 0x100000000-0x1000);

44 
	`¥ötf
("Entering main\n");

46 
mg_mgr
 
mgr
;

47 
mg_c⁄√˘i⁄
 *
nc
;

49 
	`mg_mgr_öô
(&
mgr
, 
NULL
);

50 
	`¥ötf
("Sèπög web sîvî o¿p‹à%s\n", 
s_hâp_p‹t
);

51 
nc
 = 
	`mg_böd
(&
mgr
, 
s_hâp_p‹t
, 
ev_h™dÀr
);

52 i‡(
nc
 =
NULL
) {

53 
	`¥ötf
("FailedÅo createÜistener\n");

58 
	`mg_£t_¥Ÿocﬁ_hâp_websockë
(
nc
);

59 
s_hâp_£rvî_›ts
.
documít_roŸ
 = ".";

60 
s_hâp_£rvî_›ts
.
íabÀ_dúe˘‹y_li°ög
 = "yes";

63 
	`mg_mgr_pﬁl
(&
mgr
, 1000);

67 
	`mg_mgr_‰ì
(&
mgr
);

70 
	}
}

71 
	$sgx_maö
(
¨gc
, * 
¨gv
[]) {

72  
	`maö
(
¨gc
, 
¨gv
);

73 
	}
}

	@Include/user_types.h

28 #ifde‡
_MSC_VER


29 
	#memc˝y
 
_memc˝y


	)

32 
	#LOOPS_PER_THREAD
 500

	)

34 *
	tbuf„r_t
;

35 
	t¨øy_t
[10];

	@support_segment.c

1 
	~<°dio.h
>

2 
	~<wödows.h
>

5 
	#COMMIT_AT_ONCE
 1

	)

7 #ifde‡
DEBUG


8 
	~<as£π.h
>

10 
	#as£π
(...)

	)

13 
	#EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

16 #ifde‡
AS_MALLOC


17 
	#public_mÆloc
 
mÆloc


	)

18 
	#public_‰ì
 
‰ì


	)

19 
	#public_ˇŒoc
 
ˇŒoc


	)

20 
	#public_ªÆloc
 
ªÆloc


	)

24 
HANDLE
 
	gpublic_hóp
;

25 
HANDLE
 
	g¥iv©e_hóp
;

28 * (*
	tRéCª©eHóp_t
)(, *, 
	tsize_t
, size_t, *, *);

29 * (*
	tRéAŒoˇãHóp_t
)(*, , 
	tsize_t
);

30 (*
	tRéFªeHóp_t
)(*, , *);

31 * (*
	tRéReAŒoˇãHóp_t
Ë(*, , *, 
	tsize_t
);

32 
	$size_t
 (*
	tRéSizeHóp_t
) (*, , *);

36 
RéAŒoˇãHóp_t
 
RéAŒoˇãHóp
;

37 
RéFªeHóp_t
 
RéFªeHóp
;

38 
RéReAŒoˇãHóp_t
 
RéReAŒoˇãHóp
;

39 
RéSizeHóp_t
 
RéSizeHóp
;

42 * 
bad_addªss
 = (*)0x304852E08C;

44 
	$is_bad
(* 
±r
, 
size
){

45 i‡(
bad_addªss
 >
±r
 && bad_addªs†< (
size
 +Ötr))

49 
	}
}

51 
	#GB1
 0x40000000ULL

	)

52 
big_hóp_öô
(* 
ba£
, 
size_t
 
size
);

53 * 
big_hóp_mÆloc
(
size_t
 
size
);

54 * 
big_hóp_ˇŒoc
(
size_t
 
n
, size_à
s
);

55 
big_hóp_‰ì
(* 
±r
);

56 * 
big_hóp_ªÆloc
(* 
±r
, 
size_t
 
size
);

57 
size_t
 
big_hóp_size
(* 
±r
);

58 * 
	gbig_hóp_ba£
 = 
NULL
;

59 * 
	gbig_hóp_°¨t
 = 
NULL
;

60 
size_t
 
	gbig_hóp_num_∑ges
 = 0;

61 * 
	gbig_hóp_md_ba£
 = 
NULL
;

63 
EXPORT
 
	$public_hóp_öô
(* 
ba£
, 
size
) {

64 
	`big_hóp_öô
(
ba£
, 2*
GB1
);

65 
ba£
 +2*
GB1
;

66 
size
 -2*
GB1
;

67 
HMODULE
 
hNtdŒ
 = 
NULL
;

68 
hNtdŒ
 = 
	`GëModuÀH™dÀ
("ntdll");

69 
RéCª©eHóp_t
 
RéCª©eHóp
 = (RéCª©eHóp_t)
	`GëProcAddªss
(
hNtdŒ
, "RtlCreateHeap");

71 
RéAŒoˇãHóp
 = (
RéAŒoˇãHóp_t
)
	`GëProcAddªss
(
hNtdŒ
, "RtlAllocateHeap");

72 
RéFªeHóp
 = (
RéFªeHóp_t
)
	`GëProcAddªss
(
hNtdŒ
, "RtlFreeHeap");

73 
RéReAŒoˇãHóp
 = (
RéReAŒoˇãHóp_t
)
	`GëProcAddªss
(
hNtdŒ
, "RtlReAllocateHeap");

74 
RéSizeHóp
 = (
RéSizeHóp_t
)
	`GëProcAddªss
(
hNtdŒ
, "RtlSizeHeap");

76 
	`VútuÆAŒoc
(
ba£
, 
size
, 
MEM_RESERVE
, 
PAGE_READWRITE
);

77 
	`¥ötf
("Publi¯hó∞ª£rvedáà(%p, %p)\n", 
ba£
, ba£ + 
size
);

78 
public_hóp
 = 
	`RéCª©eHóp
(0, (*)
ba£
, 
size
, 0, 
NULL
, NULL);

80 if(!
public_hóp
){

81 
	`¥ötf
("Public heap creation failed\n");

82 
	`exô
(-1);

84 
	}
}

85 
EXPORT
 
	$¥iv©e_hóp_öô
(* 
ba£
, 
size
) {

86 
HMODULE
 
hNtdŒ
 = 
NULL
;

87 
hNtdŒ
 = 
	`GëModuÀH™dÀ
("ntdll");

88 
RéCª©eHóp_t
 
RéCª©eHóp
 = (RéCª©eHóp_t)
	`GëProcAddªss
(
hNtdŒ
, "RtlCreateHeap");

89 
	`VútuÆAŒoc
(
ba£
, 
size
, 
MEM_RESERVE
, 
PAGE_READWRITE
);

90 
¥iv©e_hóp
 = 
	`RéCª©eHóp
(0, (*)
ba£
, 
size
, 4096 * 16, 
NULL
, NULL);

91 if(!
¥iv©e_hóp
){

92 
	`¥ötf
("Private heap creation failed\n");

93 
	`exô
(-1);

95 
	}
}

98 * 
	$¥iv©e_mÆloc
(
n
){

99  
	`RéAŒoˇãHóp
(
¥iv©e_hóp
, 0, 
n
);

100 
	}
}

101 * 
	$public_mÆloc
(
n
){

103 if(
n
 >= 0x7f000){

104  
	`big_hóp_mÆloc
(
n
);

106 *
t
 = 
	`RéAŒoˇãHóp
(
public_hóp
, 0, 
n
);

114  
t
;

115 
	}
}

118 
	$public_‰ì
(* 
±r
){

119 if((*)
±r
 >
big_hóp_°¨t
 && (*Ìå < (big_hóp_°¨à+ 2*
GB1
)){

120 
	`big_hóp_‰ì
(
±r
);

133 
	`RéFªeHóp
(
public_hóp
, 0, 
±r
);

135 
	}
}

136 
	$¥iv©e_‰ì
(* 
±r
){

137 
	`RéFªeHóp
(
¥iv©e_hóp
, 0, 
±r
);

138 
	}
}

140 * 
	$public_ˇŒoc
(
n
, 
s
){

141 if(
n
 * 
s
 >= 0x7f000){

142  
	`big_hóp_ˇŒoc
(
n
, 
s
);

144 *
t
 = 
	`RéAŒoˇãHóp
(
public_hóp
, 0x8, 
n
*
s
);

157  
t
;

158 
	}
}

160 * 
	$public_ªÆloc
(* 
±r
, 
size
){

161 i‡(
±r
 =
NULL
)

162  
	`public_mÆloc
(
size
);

169 if–(*)
±r
 >(
big_hóp_°¨t
 + 2*
GB1
Ë&& 
size
 < 0x7f000){

170 
n
 = 
	`RéSizeHóp
(
public_hóp
, 0, 
±r
);

175 * 
t
 = 
	`RéReAŒoˇãHóp
(
public_hóp
, 0, 
±r
, 
size
);

183  
t
;

187 if(((*)
±r
 >
big_hóp_°¨t
 && (*Ìå < (big_hóp_°¨à+ 2*
GB1
)Ë&& 
size
 >= 0x7f000){

188  
	`big_hóp_ªÆloc
(
±r
, 
size
);

190 
size_t
 
ﬁd_size
;

192 i‡((*)
±r
 >
big_hóp_°¨t
 && (*Ìå < (big_hóp_°¨à+ 2*
GB1
)){

193 
ﬁd_size
 = 
	`big_hóp_size
(
±r
);

195 
ﬁd_size
 = 
	`RéSizeHóp
(
public_hóp
, 0, 
±r
);

198 *
t
 = 
	`public_mÆloc
(
size
);

199 i‡(!
t
){

200 
	`¥ötf
("RóŒo¯Áûed wôh sizê%Œu\n", 
size
);

201 
	`exô
(-1);

203 
size_t
 
c›y_size
 = 
ﬁd_size
<
size
?old_size:size;

204 
	`mem˝y
(
t
, 
±r
, 
c›y_size
);

205 
	`public_‰ì
(
±r
);

206  
t
;

208 
	}
}

218 
	#PAGE_SIZE
 0x1000

	)

220 
size_t
 
	$big_hóp_size
(* 
±r
){

221 
ªt
;

222 
i
;

223 
a_ödex
 = (()
±r
 - ()
big_hóp_ba£
)/
PAGE_SIZE
;

224 
	`as£π
(
a_ödex
 < 
big_hóp_num_∑ges
);

225 
ªt
 = 
big_hóp_md_ba£
[
a_ödex
];

226 
	`as£π
(
ªt
 && (ret % 4096) == 0);

227 
i
 = 1 ; i < 
ªt
/4096; i++)

228 
	`as£π
(
big_hóp_md_ba£
[
a_ödex
+
i
] == 1);

229  
ªt
;

230 
	}
}

233 
	$big_hóp_öô
(* 
ba£
, 
size_t
 
size
) {

234 if(
size
 % 
PAGE_SIZE
 != 0){

235 
	`¥ötf
("WrongÖarametersÅo big_heap_init, quiting\n");

236 
	`exô
(-1);

238 if((Ë
ba£
 % 
PAGE_SIZE
 != 0){

239 
	`¥ötf
("WrongÖarametersÅo big_heap_init, quiting\n");

240 
	`exô
(-1);

242 #i‚de‡
COMMIT_AT_ONCE


243 if(
ba£
!=
	`VútuÆAŒoc
(ba£, 
size
, 
MEM_RESERVE
, 
PAGE_READWRITE
)){

245 if(
ba£
!=
	`VútuÆAŒoc
(ba£, 
size
, 
MEM_RESERVE
 | 
MEM_COMMIT
, 
PAGE_READWRITE
)){

247 
	`¥ötf
("Virtualálloc failed in big_heap_init\n");

248 
	`exô
(-1);

250 
big_hóp_num_∑ges
 = 
size
 / 
PAGE_SIZE
;

251 
num_md_∑ges
 = (
big_hóp_num_∑ges
 * 4 + 
PAGE_SIZE
) / PAGE_SIZE;

252 
big_hóp_num_∑ges
 = big_hóp_num_∑ge†- 
num_md_∑ges
;

253 
big_hóp_md_ba£
 = (*)
ba£
;

254 
big_hóp_°¨t
 = 
ba£
;

255 
big_hóp_ba£
 = 
ba£
 + 
num_md_∑ges
 * 
PAGE_SIZE
;

256 #i‚de‡
COMMIT_AT_ONCE


257 if(
big_hóp_md_ba£
 !
	`VútuÆAŒoc
(big_hóp_md_ba£, 
num_md_∑ges
 * 
PAGE_SIZE
, 
MEM_COMMIT
, 
PAGE_READWRITE
)){

258 
	`¥ötf
("Virtualálloc 2 failed in big_heap_init\n");

259 
	`exô
(-1);

262 
	`mem£t
(
big_hóp_md_ba£
, 0, 
num_md_∑ges
 * 
PAGE_SIZE
);

263 
	`¥ötf
("Big hó∞öôülizedáà(%p, %p)\n", 
big_hóp_ba£
, big_hóp_ba£+
size
);

264 
	}
}

267 * 
	$big_hóp_mÆloc
(
size_t
 
size
){

270 i‡(
size
 == 0)

271  
NULL
;

273 
num_∑ges
 = 
size
 / 
PAGE_SIZE
;

274 if(
size
 % 
PAGE_SIZE
 != 0){

275 
num_∑ges
 += 1;

279 
i
, 
j
;

280 
°ªak
 = 0;

281 
i
 = 0; i < 
big_hóp_num_∑ges
; i++){

282 
	`as£π
(
big_hóp_md_ba£
[
i
] == 0 || big_heap_md_base[i] == 1 || (big_heap_md_base[i]%4096) == 0);

283 if(
big_hóp_md_ba£
[
i
] == 0)

284 
°ªak
++;

286 
°ªak
 = 0;

287 i‡(
°ªak
 =
num_∑ges
){

289 
a_ödex
 = 
i
 - (
°ªak
 - 1);

290 * 
Æloˇti⁄_addªss
 = 
big_hóp_ba£
 + (
PAGE_SIZE
 * 
a_ödex
);

291 
big_hóp_md_ba£
[
a_ödex
] = (
num_∑ges
 * 
PAGE_SIZE
);

292 
j
 = 1; j < 
num_∑ges
; j++)

294 
big_hóp_md_ba£
[
a_ödex
 + 
j
] = 1;

300 #i‚de‡
COMMIT_AT_ONCE


301 if(
Æloˇti⁄_addªss
 !
	`VútuÆAŒoc
◊Œoˇti⁄_addªss, 
num_∑ges
 * 
PAGE_SIZE
, 
MEM_COMMIT
, 
PAGE_READWRITE
)){

302 
	`¥ötf
("Virtual Alloc failed in big_heap_malloc\n");

303 
	`exô
(-1);

306  
Æloˇti⁄_addªss
;

309 
	`¥ötf
("BigáŒoˇt‹ faûed wôh sizê%zx(%d), ba£_md = %p\n", 
size
, 
num_∑ges
, 
big_hóp_md_ba£
);

310 
	`exô
(-1);

311  
NULL
;

312 
	}
}

315 * 
	$big_hóp_ˇŒoc
(
size_t
 
n
, size_à
s
){

320 *
t
 = 
	`big_hóp_mÆloc
(
n
*
s
);

321 if(
t
 =
NULL
){

322 
	`¥ötf
("Big callocator failed\n");

323 
	`exô
(-1);

324  
NULL
;

327 
	`mem£t
(
t
, 0, 
n
*
s
);

328  
t
;

329 
	}
}

331 
	$big_hóp_‰ì
(* 
±r
){

333 i‡(
±r
 == 0)

335 
a_ödex
 = (()
±r
 - ()
big_hóp_ba£
Ë/ 
PAGE_SIZE
;

336 
size_t
 
sz
 = 
	`big_hóp_size
(
±r
);

338 #i‚de‡
COMMIT_AT_ONCE


339 if(!
	`VútuÆFªe
(
±r
, 
sz
, 
MEM_DECOMMIT
)){

340 
	`¥ötf
("VirtualFree failed in big_heap_free\n");

341 
	`exô
(-1);

344 
	`mem£t
(&
big_hóp_md_ba£
[
a_ödex
], 0, 
sz
/1024);

351 
	}
}

354 * 
	$big_hóp_ªÆloc
(* 
±r
, 
size_t
 
size
){

356 
size_t
 
ﬁd_size
 = 
	`big_hóp_size
(
±r
);

357 i‡(
size
 < 
ﬁd_size
)

358 
ﬁd_size
 = 
size
;

359 *
t
 = 
	`big_hóp_mÆloc
(
size
);

360 
	`mem˝y
(
t
, 
±r
, 
ﬁd_size
);

361 
	`big_hóp_‰ì
(
±r
);

362  
t
;

372 
size_t
 
ﬁd_size
 = 
	`big_hóp_size
(
±r
);

373 
a_ödex
 = (()
±r
 - ()
big_hóp_ba£
Ë/ 
PAGE_SIZE
;

375 
num_∑ges
 = 
size
 / 
PAGE_SIZE
;

376 if(
size
 % 
PAGE_SIZE
 != 0){

377 
num_∑ges
 += 1;

379 
size
 = 
num_∑ges
 * 
PAGE_SIZE
;

382 i‡(
ﬁd_size
 =
size
)

383  
±r
;

384 
ﬁd_num_∑ges
 = 
ﬁd_size
 / 
PAGE_SIZE
;

386 i‡(
size
 > 
ﬁd_size
) {

387 
√w_∑ges_ªq
 = 
num_∑ges
 - 
ﬁd_num_∑ges
;

388 
a_ödex
 +
ﬁd_num_∑ges
;

389 
Êag
 = 1;

390 
i
 = 0;

391 
i
=0;i<
√w_∑ges_ªq
; i++){

392 i‡(
a_ödex
+
i
 >
big_hóp_num_∑ges
){

395 
Êag
 = 0;

398 if(
big_hóp_md_ba£
[
a_ödex
+
i
] != 0){

399 
	`as£π
(
big_hóp_md_ba£
[
a_ödex
+
i
] % 4096 == 0);

400 
Êag
 = 0;

404 if(
Êag
){

405 
i
 = 0; i < 
√w_∑ges_ªq
; i++)

406 
big_hóp_md_ba£
[
a_ödex
+
i
] = 1;

407 
a_ödex
 = (()
±r
 - ()
big_hóp_ba£
Ë/ 
PAGE_SIZE
;

408 *
exåa_°¨t
 = 
±r
 + 
ﬁd_size
;

409 #i‚de‡
COMMIT_AT_ONCE


410 if(
exåa_°¨t
 !
	`VútuÆAŒoc
”xåa_°¨t, 
√w_∑ges_ªq
 * 
PAGE_SIZE
, 
MEM_COMMIT
, 
PAGE_READWRITE
)){

411 
	`¥ötf
("Virtual Alloc failed in big_heap_realloc\n");

412 
	`exô
(-1);

415 
big_hóp_md_ba£
[
a_ödex
] = 
size
;

416  
±r
;

418 *
t
 = 
	`big_hóp_mÆloc
(
size
);

419 
	`mem˝y
(
t
, 
±r
, 
ﬁd_size
);

420 
	`big_hóp_‰ì
(
±r
);

421  
t
;

424 
num_∑ges_ªmove
 = 
ﬁd_num_∑ges
 - 
num_∑ges
;

425 *(*)(
big_hóp_md_ba£
 + 
a_ödex
 * 4Ë
size
;

426 
big_hóp_md_ba£
[
a_ödex
] = 
size
;

427 * 
exåa_°¨t
 = 
±r
 + 
size
;

428 #i‚de‡
COMMIT_AT_ONCE


429 if(!
	`VútuÆFªe
(
exåa_°¨t
, 
num_∑ges_ªmove
*
PAGE_SIZE
, 
MEM_DECOMMIT
)){

430 
	`¥ötf
("Virtual Free failed in big_heap_realloc\n");

431 
	`exô
(-1);

434 
	`mem£t
(&
big_hóp_md_ba£
[
a_ödex
 + 
num_∑ges
], 0, 
num_∑ges_ªmove
 * 4);

435  
±r
;

437 
	`¥ötf
("ReachedÜast of big_heap_realloc, shouldn'tÑeach\n");

438 
	`exô
(-1);

441 
	}
}

	@
1
.
0
33
786
App/App.cpp
App/App.h
App/Edger8rSyntax/Arrays.cpp
App/Edger8rSyntax/Functions.cpp
App/Edger8rSyntax/Pointers.cpp
App/Edger8rSyntax/Types.cpp
App/Enclave_u.c
App/Enclave_u.h
App/TrustedLibrary/Libc.cpp
App/TrustedLibrary/Libcxx.cpp
App/TrustedLibrary/Thread.cpp
App/functions.h
App/includes.h
Enclave/Edger8rSyntax/Arrays.cpp
Enclave/Edger8rSyntax/Functions.cpp
Enclave/Edger8rSyntax/Pointers.cpp
Enclave/Edger8rSyntax/Types.cpp
Enclave/Enclave.cpp
Enclave/Enclave.h
Enclave/Enclave_t.c
Enclave/Enclave_t.h
Enclave/TrustedLibrary/Libc.cpp
Enclave/TrustedLibrary/Libcxx.cpp
Enclave/TrustedLibrary/Thread.cpp
Enclave/copy_globals.c
Enclave/hello.c
Enclave/library.c
Enclave/main.c
Enclave/mongoose.c
Enclave/mongoose.h
Enclave/simplest_web_server.c
Include/user_types.h
support_segment.c
